title,paper_id,venue,issue,year,urls,doi,pages
Semantically enhanced software traceability using deep learning techniques.,ICSE-2017-0,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.9;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.9;http://dl.acm.org/citation.cfm?id=3097370,10.1109/ICSE.2017.9,12
Can latent topics in source code predict missing architectural tactics?,ICSE-2017-1,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.10;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.10;http://dl.acm.org/citation.cfm?id=3097371,10.1109/ICSE.2017.10,12
Analyzing APIs documentation and code to detect directive defects.,ICSE-2017-2,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.11;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.11;http://dl.acm.org/citation.cfm?id=3097373,10.1109/ICSE.2017.11,11
An unsupervised approach for discovering relevant tutorial fragments for APIs.,ICSE-2017-3,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.12;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.12;http://dl.acm.org/citation.cfm?id=3097374,10.1109/ICSE.2017.12,11
Detecting user story information in developer-client conversations to generate extractive summaries.,ICSE-2017-4,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.13;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.13;http://dl.acm.org/citation.cfm?id=3097375,10.1109/ICSE.2017.13,11
Clone refactoring with lambda expressions.,ICSE-2017-5,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.14;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.14;http://dl.acm.org/citation.cfm?id=3097377,10.1109/ICSE.2017.14,11
Characterizing and detecting anti-patterns in the logging code.,ICSE-2017-6,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.15;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.15;http://dl.acm.org/citation.cfm?id=3097378,10.1109/ICSE.2017.15,11
Automated refactoring of legacy Java software to default methods.,ICSE-2017-7,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.16;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.16;http://dl.acm.org/citation.cfm?id=3097379,10.1109/ICSE.2017.16,12
Supporting software developers with a holistic recommender system.,ICSE-2017-8,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.17;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.17;http://dl.acm.org/citation.cfm?id=3097381,10.1109/ICSE.2017.17,12
Recommending and localizing change requests for mobile apps based on user reviews.,ICSE-2017-9,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.18;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.18;http://dl.acm.org/citation.cfm?id=3097382,10.1109/ICSE.2017.18,12
Machine learning-based detection of open source license exceptions.,ICSE-2017-10,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.19;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.19;http://dl.acm.org/citation.cfm?id=3097383,10.1109/ICSE.2017.19,12
Software development waste.,ICSE-2017-11,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.20;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.20;http://dl.acm.org/citation.cfm?id=3097385,10.1109/ICSE.2017.20,11
Becoming agile: a grounded theory of agile transitions in practice.,ICSE-2017-12,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.21;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.21;http://dl.acm.org/citation.cfm?id=3097386,10.1109/ICSE.2017.21,11
From diversity by numbers to diversity as process: supporting inclusiveness in software development teams with brainstorming.,ICSE-2017-13,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.22;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.22;http://dl.acm.org/citation.cfm?id=3097387,10.1109/ICSE.2017.22,12
Classifying developers into core and peripheral: an empirical study on count and network metrics.,ICSE-2017-14,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.23;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.23;http://dl.acm.org/citation.cfm?id=3097389,10.1109/ICSE.2017.23,11
Decoding the representation of code in the brain: an fMRI study of code review and expertise.,ICSE-2017-15,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.24;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.24;http://dl.acm.org/citation.cfm?id=3097390,10.1109/ICSE.2017.24,12
Understanding the impressions, motivations, and barriers of one time code contributors to FLOSS projects: a survey.,ICSE-2017-16,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.25;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.25;http://dl.acm.org/citation.cfm?id=3097391,10.1109/ICSE.2017.25,11
Search-driven string constraint solving for vulnerability detection.,ICSE-2017-17,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.26;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.26;http://dl.acm.org/citation.cfm?id=3097393,10.1109/ICSE.2017.26,11
A guided genetic algorithm for automated crash reproduction.,ICSE-2017-18,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.27;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.27;http://dl.acm.org/citation.cfm?id=3097394,10.1109/ICSE.2017.27,12
Stochastic optimization of program obfuscation.,ICSE-2017-19,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.28;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.28;http://dl.acm.org/citation.cfm?id=3097395,10.1109/ICSE.2017.28,11
ZenIDS: introspective intrusion detection for PHP applications.,ICSE-2017-20,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.29;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.29;http://dl.acm.org/citation.cfm?id=3097397,10.1109/ICSE.2017.29,12
Statically checking web API requests in JavaScript.,ICSE-2017-21,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.30;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.30;http://dl.acm.org/citation.cfm?id=3097398,10.1109/ICSE.2017.30,11
On cross-stack configuration errors.,ICSE-2017-22,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.31;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.31;http://dl.acm.org/citation.cfm?id=3097399,10.1109/ICSE.2017.31,11
Efficient detection of thread safety violations via coverage-guided generation of concurrent tests.,ICSE-2017-23,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.32;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.32;http://dl.acm.org/citation.cfm?id=3097401,10.1109/ICSE.2017.32,12
RClassify: classifying race conditions in web applications via deterministic replay.,ICSE-2017-24,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.33;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.33;http://dl.acm.org/citation.cfm?id=3097402,10.1109/ICSE.2017.33,11
Repairing event race errors by controlling nondeterminism.,ICSE-2017-25,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.34;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.34;http://dl.acm.org/citation.cfm?id=3097403,10.1109/ICSE.2017.34,11
Making malory behave maliciously: targeted fuzzing of android execution environments.,ICSE-2017-26,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.35;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.35;http://dl.acm.org/citation.cfm?id=3097405,10.1109/ICSE.2017.35,12
A SEALANT for inter-app security holes in android.,ICSE-2017-27,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.36;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.36;http://dl.acm.org/citation.cfm?id=3097406,10.1109/ICSE.2017.36,12
An efficient, robust, and scalable approach for analyzing interacting android apps.,ICSE-2017-28,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.37;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.37;http://dl.acm.org/citation.cfm?id=3097407,10.1109/ICSE.2017.37,11
LibD: scalable and precise third-party library detection in android markets.,ICSE-2017-29,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.38;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.38;http://dl.acm.org/citation.cfm?id=3097409,10.1109/ICSE.2017.38,12
Analysis and testing of notifications in Android wear applications.,ICSE-2017-30,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.39;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.39;http://dl.acm.org/citation.cfm?id=3097410,10.1109/ICSE.2017.39,11
Adaptive unpacking of Android apps.,ICSE-2017-31,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.40;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.40;http://dl.acm.org/citation.cfm?id=3097411,10.1109/ICSE.2017.40,12
Performance diagnosis for inefficient loops.,ICSE-2017-32,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.41;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.41;http://dl.acm.org/citation.cfm?id=3097413,10.1109/ICSE.2017.41,11
How do developers fix cross-project correlated bugs?: a case study on the GitHub scientific python ecosystem.,ICSE-2017-33,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.42;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.42;http://dl.acm.org/citation.cfm?id=3097414,10.1109/ICSE.2017.42,12
Feedback-based debugging.,ICSE-2017-34,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.43;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.43;http://dl.acm.org/citation.cfm?id=3097415,10.1109/ICSE.2017.43,11
Learning syntactic program transformations from examples.,ICSE-2017-35,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.44;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.44;http://dl.acm.org/citation.cfm?id=3097417,10.1109/ICSE.2017.44,12
Precise condition synthesis for program repair.,ICSE-2017-36,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.45;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.45;http://dl.acm.org/citation.cfm?id=3097418,10.1109/ICSE.2017.45,11
Heuristically matching solution spaces of arithmetic formulas to efficiently reuse solutions.,ICSE-2017-37,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.46;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.46;http://dl.acm.org/citation.cfm?id=3097419,10.1109/ICSE.2017.46,11
Exploring API embedding for API usages and applications.,ICSE-2017-38,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.47;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.47;http://dl.acm.org/citation.cfm?id=3097421,10.1109/ICSE.2017.47,12
Unsupervised software-specific morphological forms inference from informal discussions.,ICSE-2017-39,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.48;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.48;http://dl.acm.org/citation.cfm?id=3097422,10.1109/ICSE.2017.48,12
SPAIN: security patch analysis for binaries towards understanding the pain and pills.,ICSE-2017-40,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.49;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.49;http://dl.acm.org/citation.cfm?id=3097424,10.1109/ICSE.2017.49,11
Travioli: a dynamic analysis for detecting data-structure traversals.,ICSE-2017-41,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.50;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.50;http://dl.acm.org/citation.cfm?id=3097425,10.1109/ICSE.2017.50,11
ProEva: runtime proactive performance evaluation based on continuous-time markov chains.,ICSE-2017-42,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.51;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.51;http://dl.acm.org/citation.cfm?id=3097426,10.1109/ICSE.2017.51,12
Glacier: transitive class immutability for Java.,ICSE-2017-43,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.52;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.52;http://dl.acm.org/citation.cfm?id=3097428,10.1109/ICSE.2017.52,11
Challenges for static analysis of Java reflection: literature review and empirical study.,ICSE-2017-44,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.53;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.53;http://dl.acm.org/citation.cfm?id=3097429,10.1109/ICSE.2017.53,12
Machine-learning-guided selectively unsound static analysis.,ICSE-2017-45,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.54;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.54;http://dl.acm.org/citation.cfm?id=3097430,10.1109/ICSE.2017.54,11
How good is a security policy against real breaches?: a HIPAA case study.,ICSE-2017-46,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.55;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.55;http://dl.acm.org/citation.cfm?id=3097432,10.1109/ICSE.2017.55,11
Adaptive coverage and operational profile-based testing for reliability improvement.,ICSE-2017-47,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.56;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.56;http://dl.acm.org/citation.cfm?id=3097433,10.1109/ICSE.2017.56,11
RADAR: a lightweight tool for requirements and architecture decision analysis.,ICSE-2017-48,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.57;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.57;http://dl.acm.org/citation.cfm?id=3097435,10.1109/ICSE.2017.57,11
PEoPL: projectional editing of product lines.,ICSE-2017-49,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.58;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.58;http://dl.acm.org/citation.cfm?id=3097436,10.1109/ICSE.2017.58,12
Do developers read compiler error messages?,ICSE-2017-50,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.59;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.59;http://dl.acm.org/citation.cfm?id=3097437,10.1109/ICSE.2017.59,11
A general framework for dynamic stub injection.,ICSE-2017-51,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.60;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.60;http://dl.acm.org/citation.cfm?id=3097438,10.1109/ICSE.2017.60,11
An empirical study on mutation, statement and branch coverage fault revelation that avoids the unreliable clean program assumption.,ICSE-2017-52,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.61;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.61;http://dl.acm.org/citation.cfm?id=3097440,10.1109/ICSE.2017.61,12
Evaluating and improving fault localization.,ICSE-2017-53,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.62;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.62;http://dl.acm.org/citation.cfm?id=3097441,10.1109/ICSE.2017.62,12
Syntactic and semantic differencing for combinatorial models of test designs.,ICSE-2017-54,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.63;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.63;http://dl.acm.org/citation.cfm?id=3097443,10.1109/ICSE.2017.63,11
Balancing soundness and efficiency for practical testing of configurable systems.,ICSE-2017-55,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.64;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.64;http://dl.acm.org/citation.cfm?id=3097444,10.1109/ICSE.2017.64,11
Automatic text input generation for mobile testing.,ICSE-2017-56,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.65;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.65;http://dl.acm.org/citation.cfm?id=3097445,10.1109/ICSE.2017.65,11
A test-suite diagnosability metric for spectrum-based fault localization approaches.,ICSE-2017-57,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.66;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.66;http://dl.acm.org/citation.cfm?id=3097446,10.1109/ICSE.2017.66,11
Automated transplantation and differential testing for clones.,ICSE-2017-58,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.67;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.67;http://dl.acm.org/citation.cfm?id=3097448,10.1109/ICSE.2017.67,12
Code defenders: crowdsourcing effective tests and subtle mutants with a mutation testing game.,ICSE-2017-59,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.68;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.68;http://dl.acm.org/citation.cfm?id=3097449,10.1109/ICSE.2017.68,12
Optimizing test placement for module-level regression testing.,ICSE-2017-60,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.69;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.69;http://dl.acm.org/citation.cfm?id=3097450,10.1109/ICSE.2017.69,11
Learning to prioritize test programs for compiler testing.,ICSE-2017-61,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.70;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.70;http://dl.acm.org/citation.cfm?id=3097451,10.1109/ICSE.2017.70,12
What causes my test alarm?: automatic cause analysis for test alarms in system and integration testing.,ICSE-2017-62,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.71;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.71;http://dl.acm.org/citation.cfm?id=3097453,10.1109/ICSE.2017.71,12
Symbolic model extraction for web application verification.,ICSE-2017-63,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.72;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.72;http://dl.acm.org/citation.cfm?id=3097455,10.1109/ICSE.2017.72,11
UML diagram refinement (focusing on class- and use case diagrams).,ICSE-2017-64,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.73;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.73;http://dl.acm.org/citation.cfm?id=3097456,10.1109/ICSE.2017.73,11
Fuzzy fine-grained code-history analysis.,ICSE-2017-65,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.74;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.74;http://dl.acm.org/citation.cfm?id=3097458,10.1109/ICSE.2017.74,12
To type or not to type: quantifying detectable bugs in JavaScript.,ICSE-2017-66,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.75;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.75;http://dl.acm.org/citation.cfm?id=3097459,10.1109/ICSE.2017.75,12
The evolution of continuous experimentation in software product development: from data to a data-driven organization at scale.,ICSE-2017-67,ICSE,2017,2017,https://doi.org/10.1109/ICSE.2017.76;https://doi.ieeecomputersociety.org/10.1109/ICSE.2017.76;http://dl.acm.org/citation.cfm?id=3097460,10.1109/ICSE.2017.76,11
Context-aware patch generation for better automated program repair.,ICSE-2018-0,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180233;https://ieeexplore.ieee.org/document/8453055,10.1145/3180155.3180233,11
Towards practical program repair with on-demand candidate generation.,ICSE-2018-1,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180245;https://ieeexplore.ieee.org/document/8453056,10.1145/3180155.3180245,12
Software protection on the go: a large-scale empirical study on mobile app obfuscation.,ICSE-2018-4,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180169;https://ieeexplore.ieee.org/document/8453059,10.1145/3180155.3180169,11
GUILeak: tracing privacy policy claims on user input data for Android applications.,ICSE-2018-5,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180196;https://ieeexplore.ieee.org/document/8453060,10.1145/3180155.3180196,11
Online app review analysis for identifying emerging issues.,ICSE-2018-6,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180218;https://ieeexplore.ieee.org/document/8453061,10.1145/3180155.3180218,11
Neuro-symbolic program corrector for introductory programming assignments.,ICSE-2018-8,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180219;https://ieeexplore.ieee.org/document/8453063,10.1145/3180155.3180219,11
Automated localization for unreproducible builds.,ICSE-2018-9,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180224;https://ieeexplore.ieee.org/document/8453064,10.1145/3180155.3180224,11
Enlightened debugging.,ICSE-2018-10,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180242;https://ieeexplore.ieee.org/document/8453065,10.1145/3180155.3180242,11
Sentiment analysis for software engineering: how far can we go?,ICSE-2018-12,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180195;https://ieeexplore.ieee.org/document/8453067,10.1145/3180155.3180195,11
Identifying features in forks.,ICSE-2018-13,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180205;https://ieeexplore.ieee.org/document/8453068,10.1145/3180155.3180205,12
Roles and impacts of hands-on software architects in five industrial case studies.,ICSE-2018-14,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180234;https://ieeexplore.ieee.org/document/8453069,10.1145/3180155.3180234,11
Semantic program repair using a reference implementation.,ICSE-2018-16,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180247;https://ieeexplore.ieee.org/document/8453071,10.1145/3180155.3180247,11
Automated repair of mobile friendly problems in web pages.,ICSE-2018-17,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180262;https://ieeexplore.ieee.org/document/8453072,10.1145/3180155.3180262,11
Static automated program repair for heap properties.,ICSE-2018-18,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180250;https://ieeexplore.ieee.org/document/8453073,10.1145/3180155.3180250,12
Automated reporting of GUI design violations for mobile apps.,ICSE-2018-21,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180246;https://ieeexplore.ieee.org/document/8453076,10.1145/3180155.3180246,11
Leveraging program analysis to reduce user-perceived latency in mobile applications.,ICSE-2018-22,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180249;https://ieeexplore.ieee.org/document/8453077,10.1145/3180155.3180249,11
Repairing crashes in Android apps.,ICSE-2018-23,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180243;https://ieeexplore.ieee.org/document/8453078,10.1145/3180155.3180243,12
Hybrid regression test selection.,ICSE-2018-24,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180198;https://ieeexplore.ieee.org/document/8453079,10.1145/3180155.3180198,11
Fine-grained test minimization.,ICSE-2018-25,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180203;https://ieeexplore.ieee.org/document/8453080,10.1145/3180155.3180203,12
FAST approaches to scalable similarity-based test case prioritization.,ICSE-2018-26,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180210;https://ieeexplore.ieee.org/document/8453081,10.1145/3180155.3180210,11
Towards refactoring-aware regression test selection.,ICSE-2018-27,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180254;https://ieeexplore.ieee.org/document/8453082,10.1145/3180155.3180254,12
Inheritance usage patterns in open-source systems.,ICSE-2018-28,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180168;https://ieeexplore.ieee.org/document/8453083,10.1145/3180155.3180168,11
Almost there: a study on quasi-contributors in open source software projects.,ICSE-2018-29,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180208;https://ieeexplore.ieee.org/document/8453084,10.1145/3180155.3180208,11
To distribute or not to distribute?: why licensing bugs matter.,ICSE-2018-31,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180221;https://ieeexplore.ieee.org/document/8453086,10.1145/3180155.3180221,12
Augusto: exploiting popular functionalities for the generation of semantic GUI tests with Oracles.,ICSE-2018-32,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180162;https://ieeexplore.ieee.org/document/8453087,10.1145/3180155.3180162,11
Towards optimal concolic testing.,ICSE-2018-33,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180177;https://ieeexplore.ieee.org/document/8453088,10.1145/3180155.3180177,12
DeepTest: automated testing of deep-neural-network-driven autonomous cars.,ICSE-2018-34,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180220;https://ieeexplore.ieee.org/document/8453089,10.1145/3180155.3180220,12
Precise concolic unit testing of C programs using extended units and symbolic alarm filtering.,ICSE-2018-35,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180253;https://ieeexplore.ieee.org/document/8453090,10.1145/3180155.3180253,12
Spatio-temporal context reduction: a pointer-analysis-based static approach for detecting use-after-free vulnerabilities.,ICSE-2018-36,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180178;https://ieeexplore.ieee.org/document/8453091,10.1145/3180155.3180178,11
Program splicing.,ICSE-2018-37,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180190;https://ieeexplore.ieee.org/document/8453092,10.1145/3180155.3180190,12
Chopped symbolic execution.,ICSE-2018-38,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180251;https://ieeexplore.ieee.org/document/8453093,10.1145/3180155.3180251,11
Perses: syntax-guided program reduction.,ICSE-2018-39,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180236;https://ieeexplore.ieee.org/document/8453094,10.1145/3180155.3180236,11
Secure coding practices in Java: challenges and vulnerabilities.,ICSE-2018-40,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180201;https://ieeexplore.ieee.org/document/8453095,10.1145/3180155.3180201,12
EnMobile: entity-based characterization and analysis of mobile malware.,ICSE-2018-41,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180223;https://ieeexplore.ieee.org/document/8453096,10.1145/3180155.3180223,11
Does the propagation of artifact changes across tasks reflect work dependencies?,ICSE-2018-44,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180185;https://ieeexplore.ieee.org/document/8453099,10.1145/3180155.3180185,11
Large-scale analysis of framework-specific exceptions in Android apps.,ICSE-2018-45,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180222;https://ieeexplore.ieee.org/document/8453100,10.1145/3180155.3180222,12
A large-scale empirical study on the effects of code obfuscations on Android apps and anti-malware products.,ICSE-2018-47,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180228;https://ieeexplore.ieee.org/document/8453102,10.1145/3180155.3180228,11
DeFlaker: automatically detecting flaky tests.,ICSE-2018-49,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180164;https://ieeexplore.ieee.org/document/8453104,10.1145/3180155.3180164,12
DetReduce: minimizing Android GUI test suites for regression testing.,ICSE-2018-50,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180173;https://ieeexplore.ieee.org/document/8453105,10.1145/3180155.3180173,11
Time to clean your test objectives.,ICSE-2018-51,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180191;https://ieeexplore.ieee.org/document/8453106,10.1145/3180155.3180191,12
Prioritizing browser environments for web application test execution.,ICSE-2018-52,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180244;https://ieeexplore.ieee.org/document/8453107,10.1145/3180155.3180244,12
Accurate and efficient refactoring detection in commit history.,ICSE-2018-56,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180206;https://ieeexplore.ieee.org/document/8453111,10.1145/3180155.3180206,12
How modern news aggregators help development communities shape and share knowledge.,ICSE-2018-61,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180180;https://ieeexplore.ieee.org/document/8453116,10.1145/3180155.3180180,12
Adding sparkle to social coding: an empirical study of repository badges in the npm ecosystem.,ICSE-2018-62,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180209;https://ieeexplore.ieee.org/document/8453117,10.1145/3180155.3180209,12
"Was my contribution fairly reviewed?": a framework to study the perception of fairness in modern code reviews.,ICSE-2018-63,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180217;https://ieeexplore.ieee.org/document/8453118,10.1145/3180155.3180217,12
Are mutation scores correlated with real fault detection?: a large scale empirical study on the relationship between mutants and real faults.,ICSE-2018-66,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180183;https://ieeexplore.ieee.org/document/8453121,10.1145/3180155.3180183,12
Efficient sampling of SAT solutions for testing.,ICSE-2018-67,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180248;https://ieeexplore.ieee.org/document/8453122,10.1145/3180155.3180248,11
Understanding developers' needs on deprecation as a language feature.,ICSE-2018-69,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180170;https://ieeexplore.ieee.org/document/8453124,10.1145/3180155.3180170,11
On the dichotomy of debugging behavior among programmers.,ICSE-2018-70,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180175;https://ieeexplore.ieee.org/document/8453125,10.1145/3180155.3180175,12
Dataflow tunneling: mining inter-request data dependencies for request-based applications.,ICSE-2018-73,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180171;https://ieeexplore.ieee.org/document/8453128,10.1145/3180155.3180171,12
Launch-mode-aware context-sensitive activity transition analysis.,ICSE-2018-74,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180188;https://ieeexplore.ieee.org/document/8453129,10.1145/3180155.3180188,11
UFO: predictive concurrency use-after-free detection.,ICSE-2018-75,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180225;https://ieeexplore.ieee.org/document/8453130,10.1145/3180155.3180225,11
Collective program analysis.,ICSE-2018-76,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180252;https://ieeexplore.ieee.org/document/8453131,10.1145/3180155.3180252,12
Statistical learning of API fully qualified names in code snippets of online forums.,ICSE-2018-77,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180230;https://ieeexplore.ieee.org/document/8453132,10.1145/3180155.3180230,11
When not to comment: questions and tradeoffs with API documentation for C++ projects.,ICSE-2018-78,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180176;https://ieeexplore.ieee.org/document/8453133,10.1145/3180155.3180176,11
Deuce: a lightweight user interface for structured editing.,ICSE-2018-79,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180165;https://ieeexplore.ieee.org/document/8453134,10.1145/3180155.3180165,11
From UI design image to GUI skeleton: a neural machine translator to bootstrap mobile GUI implementation.,ICSE-2018-80,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180240;https://ieeexplore.ieee.org/document/8453135,10.1145/3180155.3180240,12
When testing meets code review: why and how developers review tests.,ICSE-2018-81,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180192;https://ieeexplore.ieee.org/document/8453136,10.1145/3180155.3180192,11
Redefining prioritization: continuous prioritization for continuous integration.,ICSE-2018-82,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180213;https://ieeexplore.ieee.org/document/8453137,10.1145/3180155.3180213,11
Do programmers work at night or during the weekend?,ICSE-2018-88,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180193;https://ieeexplore.ieee.org/document/8453143,10.1145/3180155.3180193,11
Multi-granular conflict and dependency analysis in software engineering based on graph transformation.,ICSE-2018-89,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180258;https://ieeexplore.ieee.org/document/8453144,10.1145/3180155.3180258,12
Self-hiding behavior in Android apps: detection and characterization.,ICSE-2018-90,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180214;https://ieeexplore.ieee.org/document/8453145,10.1145/3180155.3180214,12
ConflictJS: finding and understanding conflicts between JavaScript libraries.,ICSE-2018-92,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180184;https://ieeexplore.ieee.org/document/8453147,10.1145/3180155.3180184,11
Debugging data flows in reactive programs.,ICSE-2018-93,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180156;https://ieeexplore.ieee.org/document/8453148,10.1145/3180155.3180156,12
Do you remember this source code?,ICSE-2018-94,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180215;https://ieeexplore.ieee.org/document/8453149,10.1145/3180155.3180215,12
Inferring hierarchical motifs from execution traces.,ICSE-2018-95,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180216;https://ieeexplore.ieee.org/document/8453150,10.1145/3180155.3180216,12
Identifying patch correctness in test-based program repair.,ICSE-2018-97,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180182;https://ieeexplore.ieee.org/document/8453152,10.1145/3180155.3180182,11
How not to structure your database-backed web applications: a study of performance bugs in the wild.,ICSE-2018-98,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180194;https://ieeexplore.ieee.org/document/8453153,10.1145/3180155.3180194,11
Speedoo: prioritizing performance optimization opportunities.,ICSE-2018-99,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180229;https://ieeexplore.ieee.org/document/8453154,10.1145/3180155.3180229,11
The evolution of requirements practices in software startups.,ICSE-2018-101,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180158;https://ieeexplore.ieee.org/document/8453156,10.1145/3180155.3180158,11
Traceability in the wild: automatically augmenting incomplete trace links.,ICSE-2018-102,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180207;https://ieeexplore.ieee.org/document/8453157,10.1145/3180155.3180207,12
A temporal permission analysis and enforcement framework for Android.,ICSE-2018-103,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180172;https://ieeexplore.ieee.org/document/8453158,10.1145/3180155.3180172,12
RFC-directed differential testing of certificate validation in SSL/TLS implementations.,ICSE-2018-105,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180226;https://ieeexplore.ieee.org/document/8453160,10.1145/3180155.3180226,12
Symbolic verification of regular properties.,ICSE-2018-106,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180227;https://ieeexplore.ieee.org/document/8453161,10.1145/3180155.3180227,11
Are code examples on an online Q&A forum reliable?: a study of API misuse on stack overflow.,ICSE-2018-111,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180260;https://ieeexplore.ieee.org/document/8453166,10.1145/3180155.3180260,11
Propagating configuration decisions with modal implication graphs.,ICSE-2018-113,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180159;https://ieeexplore.ieee.org/document/8453168,10.1145/3180155.3180159,12
A combinatorial approach for exposing off-nominal behaviors.,ICSE-2018-114,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180204;https://ieeexplore.ieee.org/document/8453169,10.1145/3180155.3180204,11
Identifying design problems in the source code: a grounded theory.,ICSE-2018-115,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180239;https://ieeexplore.ieee.org/document/8453170,10.1145/3180155.3180239,11
Deep code search.,ICSE-2018-117,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180167;https://ieeexplore.ieee.org/document/8453172,10.1145/3180155.3180167,12
FaCoY: a code-to-code search engine.,ICSE-2018-119,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180187;https://ieeexplore.ieee.org/document/8453174,10.1145/3180155.3180187,12
Generalized data structure synthesis.,ICSE-2018-120,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180211;https://ieeexplore.ieee.org/document/8453175,10.1145/3180155.3180211,11
A graph solver for the automated generation of consistent domain-specific models.,ICSE-2018-121,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180186;https://ieeexplore.ieee.org/document/8453176,10.1145/3180155.3180186,12
Automatically finding bugs in a commercial cyber-physical system development tool chain with SLforge.,ICSE-2018-122,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180231;https://ieeexplore.ieee.org/document/8453177,10.1145/3180155.3180231,12
Context-aware conversational developer assistants.,ICSE-2018-123,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180238;https://ieeexplore.ieee.org/document/8453178,10.1145/3180155.3180238,11
Open source barriers to entry, revisited: a sociotechnical perspective.,ICSE-2018-124,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180241;https://ieeexplore.ieee.org/document/8453179,10.1145/3180155.3180241,12
Testing vision-based control systems using learnable evolutionary algorithms.,ICSE-2018-125,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180160;https://ieeexplore.ieee.org/document/8453180,10.1145/3180155.3180160,11
To preserve or not to preserve invalid solutions in search-based software engineering: a case study in software product lines.,ICSE-2018-126,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180163;https://ieeexplore.ieee.org/document/8453181,10.1145/3180155.3180163,12
Nemo: multi-criteria test-suite minimization with integer nonlinear programming.,ICSE-2018-127,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180174;https://ieeexplore.ieee.org/document/8453182,10.1145/3180155.3180174,11
Is "better data" better than "better data miners"?: on the benefits of tuning SMOTE for defect prediction.,ICSE-2018-128,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180197;https://ieeexplore.ieee.org/document/8453183,10.1145/3180155.3180197,12
CCAligner: a token based large-gap clone detector.,ICSE-2018-133,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180179;https://ieeexplore.ieee.org/document/8453188,10.1145/3180155.3180179,12
HireBuild: an automatic approach to history-driven repair of build scripts.,ICSE-2018-134,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180181;https://ieeexplore.ieee.org/document/8453189,10.1145/3180155.3180181,12
The road to live programming: insights from the practice.,ICSE-2018-135,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180200;https://ieeexplore.ieee.org/document/8453190,10.1145/3180155.3180200,12
Assessing the threat of untracked changes in software evolution.,ICSE-2018-136,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180212;https://ieeexplore.ieee.org/document/8453191,10.1145/3180155.3180212,12
Programming not only by example.,ICSE-2018-137,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180189;https://ieeexplore.ieee.org/document/8453192,10.1145/3180155.3180189,11
Goal-conflict likelihood assessment based on model counting.,ICSE-2018-138,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180261;https://ieeexplore.ieee.org/document/8453193,10.1145/3180155.3180261,11
A static verification framework for message passing in Go using behavioural types.,ICSE-2018-140,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180157;https://ieeexplore.ieee.org/document/8453195,10.1145/3180155.3180157,12
Inferring and asserting distributed system invariants.,ICSE-2018-141,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180199;https://ieeexplore.ieee.org/document/8453196,10.1145/3180155.3180199,11
DroidStar: callback typestates for Android classes.,ICSE-2018-142,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180232;https://ieeexplore.ieee.org/document/8453197,10.1145/3180155.3180232,11
Debugging with intelligence via probabilistic inference.,ICSE-2018-143,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180237;https://ieeexplore.ieee.org/document/8453198,10.1145/3180155.3180237,11
Reducer-based construction of conditional verifiers.,ICSE-2018-144,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180259;https://ieeexplore.ieee.org/document/8453199,10.1145/3180155.3180259,12
Statistical errors in software engineering experiments: a preliminary literature review.,ICSE-2018-146,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180161;https://ieeexplore.ieee.org/document/8453201,10.1145/3180155.3180161,12
Synthesizing qualitative research in software engineering: a critical review.,ICSE-2018-147,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180235;https://ieeexplore.ieee.org/document/8453202,10.1145/3180155.3180235,12
Search-based test data generation for SQL queries.,ICSE-2018-149,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180202;https://ieeexplore.ieee.org/document/8453204,10.1145/3180155.3180202,11
Multi-objective integer programming approaches for solving optimal feature selection problem: a new perspective on multi-objective optimization problems in SBSE.,ICSE-2018-150,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180257;https://ieeexplore.ieee.org/document/8453205,10.1145/3180155.3180257,12
Automatically generating search heuristics for concolic testing.,ICSE-2018-152,ICSE,2018,2018,https://doi.org/10.1145/3180155.3180166;https://ieeexplore.ieee.org/document/8453207,10.1145/3180155.3180166,11
Learning to spot and refactor inconsistent method names.,ICSE-2019-0,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00019;https://dl.acm.org/citation.cfm?id=3339507,10.1109/ICSE.2019.00019,12
Harnessing evolution for multi-hunk program repair.,ICSE-2019-1,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00020;https://dl.acm.org/citation.cfm?id=3339508,10.1109/ICSE.2019.00020,12
On learning meaningful code changes via neural machine translation.,ICSE-2019-2,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00021;https://dl.acm.org/citation.cfm?id=3339509,10.1109/ICSE.2019.00021,12
Natural software revisited.,ICSE-2019-3,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00022;https://dl.acm.org/citation.cfm?id=3339511,10.1109/ICSE.2019.00022,12
Towards automating precision studies of clone detectors.,ICSE-2019-4,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00023;https://dl.acm.org/citation.cfm?id=3339512,10.1109/ICSE.2019.00023,11
Leopard: identifying vulnerable code for vulnerability assessment through program metrics.,ICSE-2019-5,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00024;https://dl.acm.org/citation.cfm?id=3339514,10.1109/ICSE.2019.00024,12
Smoke: scalable path-sensitive memory leak detection for millions of lines of code.,ICSE-2019-6,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00025;https://dl.acm.org/citation.cfm?id=3339516,10.1109/ICSE.2019.00025,11
Reasonably-most-general clients for JavaScript library analysis.,ICSE-2019-7,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00026;https://dl.acm.org/citation.cfm?id=3339517,10.1109/ICSE.2019.00026,11
Resource-aware program analysis via online abstraction coarsening.,ICSE-2019-8,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00027;https://dl.acm.org/citation.cfm?id=3339518,10.1109/ICSE.2019.00027,11
Automated reporting of anti-patterns and decay in continuous integration.,ICSE-2019-9,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00028;https://dl.acm.org/citation.cfm?id=3339520,10.1109/ICSE.2019.00028,11
A system identification based Oracle for control-CPS software fault localization.,ICSE-2019-10,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00029;https://dl.acm.org/citation.cfm?id=3339522,10.1109/ICSE.2019.00029,12
ReCDroid: automatically reproducing Android application crashes from bug reports.,ICSE-2019-11,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00030;https://dl.acm.org/citation.cfm?id=3339523,10.1109/ICSE.2019.00030,12
Mining historical test logs to predict bugs and localize faults in the test logs.,ICSE-2019-12,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00031;https://dl.acm.org/citation.cfm?id=3339525,10.1109/ICSE.2019.00031,12
Dlfinder: characterizing and detecting duplicate logging code smells.,ICSE-2019-13,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00032;https://dl.acm.org/citation.cfm?id=3339526,10.1109/ICSE.2019.00032,12
The seven sins: security smells in infrastructure as code scripts.,ICSE-2019-14,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00033;https://dl.acm.org/citation.cfm?id=3339528,10.1109/ICSE.2019.00033,12
DifFuzz: differential fuzzing for side-channel analysis.,ICSE-2019-15,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00034;https://dl.acm.org/citation.cfm?id=3339529,10.1109/ICSE.2019.00034,12
Automatically generating precise Oracles from structured natural language specifications.,ICSE-2019-16,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00035;https://dl.acm.org/citation.cfm?id=3339531,10.1109/ICSE.2019.00035,12
The product backlog.,ICSE-2019-17,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00036;https://dl.acm.org/citation.cfm?id=3339533,10.1109/ICSE.2019.00036,12
Easy modelling and verification of unpredictable and preemptive interrupt-driven systems.,ICSE-2019-18,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00037;https://dl.acm.org/citation.cfm?id=3339535,10.1109/ICSE.2019.00037,11
Towards understanding and reasoning about Android interoperations.,ICSE-2019-19,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00038;https://dl.acm.org/citation.cfm?id=3339536,10.1109/ICSE.2019.00038,11
Zero-overhead path prediction with progressive symbolic execution.,ICSE-2019-20,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00039;https://dl.acm.org/citation.cfm?id=3339537,10.1109/ICSE.2019.00039,12
Mimic: UI compatibility testing system for Android apps.,ICSE-2019-21,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00040;https://dl.acm.org/citation.cfm?id=3339539,10.1109/ICSE.2019.00040,11
IconIntent: automatic identification of sensitive UI widgets based on icon classification for Android apps.,ICSE-2019-22,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00041;https://dl.acm.org/citation.cfm?id=3339540,10.1109/ICSE.2019.00041,12
Practical GUI testing of Android applications via model abstraction and refinement.,ICSE-2019-23,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00042;https://dl.acm.org/citation.cfm?id=3339542,10.1109/ICSE.2019.00042,12
AutoTap: synthesizing and repairing trigger-action programs using LTL properties.,ICSE-2019-24,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00043;https://dl.acm.org/citation.cfm?id=3339543,10.1109/ICSE.2019.00043,11
Active inductive logic programming for code search.,ICSE-2019-25,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00044;https://dl.acm.org/citation.cfm?id=3339545,10.1109/ICSE.2019.00044,12
NL2Type: inferring JavaScript function types from natural language information.,ICSE-2019-26,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00045;https://dl.acm.org/citation.cfm?id=3339546,10.1109/ICSE.2019.00045,12
Analyzing and supporting adaptation of online code examples.,ICSE-2019-27,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00046;https://dl.acm.org/citation.cfm?id=3339547,10.1109/ICSE.2019.00046,12
DockerizeMe: automatic inference of environment dependencies for python code snippets.,ICSE-2019-28,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00047;https://dl.acm.org/citation.cfm?id=3339548,10.1109/ICSE.2019.00047,11
BugSwarm: mining and continuously growing a dataset of reproducible failures and fixes.,ICSE-2019-29,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00048;https://dl.acm.org/citation.cfm?id=3339550,10.1109/ICSE.2019.00048,11
ActionNet: vision-based workflow action recognition from programming screencasts.,ICSE-2019-30,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00049;https://dl.acm.org/citation.cfm?id=3339551,10.1109/ICSE.2019.00049,12
How C++ developers use immutability declarations: an empirical study.,ICSE-2019-31,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00050;https://dl.acm.org/citation.cfm?id=3339553,10.1109/ICSE.2019.00050,11
Latent patterns in activities: a field study of how developers manage context.,ICSE-2019-32,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00051;https://dl.acm.org/citation.cfm?id=3339554,10.1109/ICSE.2019.00051,11
Developer reading behavior while summarizing Java methods: size and context matters.,ICSE-2019-33,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00052;https://dl.acm.org/citation.cfm?id=3339555,10.1109/ICSE.2019.00052,12
Distilling neural representations of data structure manipulation using fMRI and fNIRS.,ICSE-2019-34,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00053;https://dl.acm.org/citation.cfm?id=3339556,10.1109/ICSE.2019.00053,12
FastLane: test minimization for rapidly deployed large-scale online services.,ICSE-2019-35,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00054;https://dl.acm.org/citation.cfm?id=3339558,10.1109/ICSE.2019.00054,11
Scalable approaches for test suite reduction.,ICSE-2019-36,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00055;https://dl.acm.org/citation.cfm?id=3339559,10.1109/ICSE.2019.00055,11
A framework for checking regression test selection tools.,ICSE-2019-37,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00056;https://dl.acm.org/citation.cfm?id=3339560,10.1109/ICSE.2019.00056,12
Supporting analysts by dynamic extraction and classification of requirements-related knowledge.,ICSE-2019-38,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00057;https://dl.acm.org/citation.cfm?id=3339562,10.1109/ICSE.2019.00057,12
Analysis and detection of information types of open source software issue discussions.,ICSE-2019-39,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00058;https://dl.acm.org/citation.cfm?id=3339564,10.1109/ICSE.2019.00058,11
Do developers discover new tools on the toilet?,ICSE-2019-40,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00059;https://dl.acm.org/citation.cfm?id=3339566,10.1109/ICSE.2019.00059,11
Tool choice matters: JavaScript quality assurance tools and usage outcomes in GitHub projects.,ICSE-2019-41,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00060;https://dl.acm.org/citation.cfm?id=3339567,10.1109/ICSE.2019.00060,12
Hunting for bugs in code coverage tools via randomized differential testing.,ICSE-2019-42,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00061;https://dl.acm.org/citation.cfm?id=3339569,10.1109/ICSE.2019.00061,11
Rotten green tests.,ICSE-2019-43,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00062;https://dl.acm.org/citation.cfm?id=3339570,10.1109/ICSE.2019.00062,12
VFix: value-flow-guided precise program repair for null pointer dereferences.,ICSE-2019-44,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00063;https://dl.acm.org/citation.cfm?id=3339572,10.1109/ICSE.2019.00063,12
On reliability of patch correctness assessment.,ICSE-2019-45,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00064;https://dl.acm.org/citation.cfm?id=3339573,10.1109/ICSE.2019.00064,12
How reliable is the crowdsourced knowledge of security implementation?,ICSE-2019-46,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00065;https://dl.acm.org/citation.cfm?id=3339575,10.1109/ICSE.2019.00065,12
Pattern-based mining of opinions in Q&A websites.,ICSE-2019-47,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00066;https://dl.acm.org/citation.cfm?id=3339576,10.1109/ICSE.2019.00066,12
Detection and repair of architectural inconsistencies in Java.,ICSE-2019-48,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00067;https://dl.acm.org/citation.cfm?id=3339578,10.1109/ICSE.2019.00067,12
Could I have a stack trace to examine the dependency conflict issue?,ICSE-2019-49,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00068;https://dl.acm.org/citation.cfm?id=3339579,10.1109/ICSE.2019.00068,12
Investigating the impact of multiple dependency structures on software defects.,ICSE-2019-50,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00069;https://dl.acm.org/citation.cfm?id=3339580,10.1109/ICSE.2019.00069,12
StoryDroid: automated generation of storyboard for Android apps.,ICSE-2019-51,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00070;https://dl.acm.org/citation.cfm?id=3339582,10.1109/ICSE.2019.00070,12
Statistical algorithmic profiling for randomized approximate programs.,ICSE-2019-52,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00071;https://dl.acm.org/citation.cfm?id=3339584,10.1109/ICSE.2019.00071,11
Safe automated refactoring for intelligent parallelization of Java 8 streams.,ICSE-2019-53,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00072;https://dl.acm.org/citation.cfm?id=3339586,10.1109/ICSE.2019.00072,12
Detecting atomicity violations for event-driven Node.js applications.,ICSE-2019-54,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00073;https://dl.acm.org/citation.cfm?id=3339587,10.1109/ICSE.2019.00073,12
Parallel refinement for multi-threaded program verification.,ICSE-2019-55,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00074;https://dl.acm.org/citation.cfm?id=3339588,10.1109/ICSE.2019.00074,11
Mining software defects: should we consider affected releases?,ICSE-2019-56,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00075;https://dl.acm.org/citation.cfm?id=3339590,10.1109/ICSE.2019.00075,12
Class imbalance evolution and verification latency in just-in-time software defect prediction.,ICSE-2019-57,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00076;https://dl.acm.org/citation.cfm?id=3339591,10.1109/ICSE.2019.00076,11
FLOSS participants' perceptions about gender and inclusiveness: a survey.,ICSE-2019-58,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00077;https://dl.acm.org/citation.cfm?id=3339593,10.1109/ICSE.2019.00077,11
Going farther together: the impact of social capital on sustained participation in open source.,ICSE-2019-59,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00078;https://dl.acm.org/citation.cfm?id=3339594,10.1109/ICSE.2019.00078,12
Investigating the effects of gender bias on GitHub.,ICSE-2019-60,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00079;https://dl.acm.org/citation.cfm?id=3339595,10.1109/ICSE.2019.00079,12
SLF: fuzzing without valid seed inputs.,ICSE-2019-61,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00080;https://dl.acm.org/citation.cfm?id=3339597,10.1109/ICSE.2019.00080,12
Superion: grammar-aware greybox fuzzing.,ICSE-2019-62,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00081;https://dl.acm.org/citation.cfm?id=3339598,10.1109/ICSE.2019.00081,12
Grey-box concolic testing on binary code.,ICSE-2019-63,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00082;https://dl.acm.org/citation.cfm?id=3339599,10.1109/ICSE.2019.00082,12
RESTler: stateful REST API fuzzing.,ICSE-2019-64,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00083;https://dl.acm.org/citation.cfm?id=3339600,10.1109/ICSE.2019.00083,11
Training binary classifiers as data structure invariants.,ICSE-2019-65,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00084;https://dl.acm.org/citation.cfm?id=3339602,10.1109/ICSE.2019.00084,12
Graph embedding based familial analysis of Android malware using unsupervised learning.,ICSE-2019-66,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00085;https://dl.acm.org/citation.cfm?id=3339603,10.1109/ICSE.2019.00085,12
A novel neural source code representation based on abstract syntax tree.,ICSE-2019-67,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00086;https://dl.acm.org/citation.cfm?id=3339604,10.1109/ICSE.2019.00086,12
A neural model for generating natural language summaries of program subroutines.,ICSE-2019-68,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00087;https://dl.acm.org/citation.cfm?id=3339605,10.1109/ICSE.2019.00087,12
The list is the process: reliable pre-integration tracking of commits on mailing lists.,ICSE-2019-69,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00088;https://dl.acm.org/citation.cfm?id=3339607,10.1109/ICSE.2019.00088,12
Graph-based mining of in-the-wild, fine-grained, semantic code change patterns.,ICSE-2019-70,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00089;https://dl.acm.org/citation.cfm?id=3339608,10.1109/ICSE.2019.00089,12
Intention-based integration of software variants.,ICSE-2019-71,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00090;https://dl.acm.org/citation.cfm?id=3339610,10.1109/ICSE.2019.00090,12
Supporting the statistical analysis of variability models.,ICSE-2019-72,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00091;https://dl.acm.org/citation.cfm?id=3339611,10.1109/ICSE.2019.00091,11
Multifaceted automated analyses for variability-intensive embedded systems.,ICSE-2019-73,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00092;https://dl.acm.org/citation.cfm?id=3339612,10.1109/ICSE.2019.00092,12
Exposing library API misuses via mutation analysis.,ICSE-2019-74,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00093;https://dl.acm.org/citation.cfm?id=3339614,10.1109/ICSE.2019.00093,12
Pivot: learning API-device correlations to facilitate Android compatibility issue detection.,ICSE-2019-75,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00094;https://dl.acm.org/citation.cfm?id=3339615,10.1109/ICSE.2019.00094,11
SafeCheck: safety enhancement of Java unsafe API.,ICSE-2019-76,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00095;https://dl.acm.org/citation.cfm?id=3339616,10.1109/ICSE.2019.00095,11
CTRAS: crowdsourced test report aggregation and summarization.,ICSE-2019-77,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00096;https://dl.acm.org/citation.cfm?id=3339618,10.1109/ICSE.2019.00096,11
iSENSE: completion-aware crowdtesting management.,ICSE-2019-78,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00097;https://dl.acm.org/citation.cfm?id=3339619,10.1109/ICSE.2019.00097,12
How practitioners perceive coding proficiency.,ICSE-2019-79,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00098;https://dl.acm.org/citation.cfm?id=3339621,10.1109/ICSE.2019.00098,12
Socio-technical work-rate increase associates with changes in work patterns in online projects.,ICSE-2019-80,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00099;https://dl.acm.org/citation.cfm?id=3339622,10.1109/ICSE.2019.00099,12
Why do episodic volunteers stay in FLOSS communities?,ICSE-2019-81,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00100;https://dl.acm.org/citation.cfm?id=3339623,10.1109/ICSE.2019.00100,7
When code completion fails: a case study on real-world completions.,ICSE-2019-82,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00101;https://dl.acm.org/citation.cfm?id=3339625,10.1109/ICSE.2019.00101,11
Interactive production performance feedback in the IDE.,ICSE-2019-83,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00102;https://dl.acm.org/citation.cfm?id=3339626,10.1109/ICSE.2019.00102,11
Redundant loads: a software inefficiency indicator.,ICSE-2019-84,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00103;https://dl.acm.org/citation.cfm?id=3339628,10.1109/ICSE.2019.00103,12
View-centric performance optimization for database-backed web applications.,ICSE-2019-85,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00104;https://dl.acm.org/citation.cfm?id=3339629,10.1109/ICSE.2019.00104,11
Adjust: runtime mitigation of resource abusing third-party online ads.,ICSE-2019-86,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00105;https://dl.acm.org/citation.cfm?id=3339630,10.1109/ICSE.2019.00105,11
Symbolic repairs for GR(1) specifications.,ICSE-2019-87,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00106;https://dl.acm.org/citation.cfm?id=3339632,10.1109/ICSE.2019.00106,11
CRADLE: cross-backend validation to detect and localize bugs in deep learning libraries.,ICSE-2019-88,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00107;https://dl.acm.org/citation.cfm?id=3339633,10.1109/ICSE.2019.00107,12
Guiding deep learning system testing using surprise adequacy.,ICSE-2019-89,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00108;https://dl.acm.org/citation.cfm?id=3339634,10.1109/ICSE.2019.00108,11
FOCUS: a recommender system for mining API function calls and usage patterns.,ICSE-2019-90,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00109;https://dl.acm.org/citation.cfm?id=3339636,10.1109/ICSE.2019.00109,11
Test-driven code review: an empirical study.,ICSE-2019-91,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00110;https://dl.acm.org/citation.cfm?id=3339638,10.1109/ICSE.2019.00110,12
Why does code review work for open source software communities?,ICSE-2019-92,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00111;https://dl.acm.org/citation.cfm?id=3339639,10.1109/ICSE.2019.00111,11
Distance-based sampling of software configuration spaces.,ICSE-2019-93,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00112;https://dl.acm.org/citation.cfm?id=3339641,10.1109/ICSE.2019.00112,11
DeepPerf: performance prediction for configurable software with deep sparse neural network.,ICSE-2019-94,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00113;https://dl.acm.org/citation.cfm?id=3339642,10.1109/ICSE.2019.00113,12
GreenBundle: an empirical study on the energy impact of bundled processing.,ICSE-2019-95,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00114;https://dl.acm.org/citation.cfm?id=3339644,10.1109/ICSE.2019.00114,12
Search-based energy testing of Android.,ICSE-2019-96,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00115;https://dl.acm.org/citation.cfm?id=3339645,10.1109/ICSE.2019.00115,12
Global optimization of numerical programs via prioritized stochastic algebraic transformations.,ICSE-2019-97,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00116;https://dl.acm.org/citation.cfm?id=3339647,10.1109/ICSE.2019.00116,11
Type migration in ultra-large-scale codebases.,ICSE-2019-98,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00117;https://dl.acm.org/citation.cfm?id=3339648,10.1109/ICSE.2019.00117,12
Dynamic slicing for Android.,ICSE-2019-99,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00118;https://dl.acm.org/citation.cfm?id=3339649,10.1109/ICSE.2019.00118,11
Recovering variable names for minified code with usage contexts.,ICSE-2019-100,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00119;https://dl.acm.org/citation.cfm?id=3339651,10.1109/ICSE.2019.00119,11
Gigahorse: thorough, declarative decompilation of smart contracts.,ICSE-2019-101,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00120;https://dl.acm.org/citation.cfm?id=3339652,10.1109/ICSE.2019.00120,11
Probabilistic disassembly.,ICSE-2019-102,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00121;https://dl.acm.org/citation.cfm?id=3339653,10.1109/ICSE.2019.00121,12
Software documentation issues unveiled.,ICSE-2019-103,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00122;https://dl.acm.org/citation.cfm?id=3339655,10.1109/ICSE.2019.00122,12
9.6 million links in source code comments: purpose, evolution, and decay.,ICSE-2019-104,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00123;https://dl.acm.org/citation.cfm?id=3339656,10.1109/ICSE.2019.00123,11
Leveraging artifact trees to evolve and reuse safety cases.,ICSE-2019-105,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00124;https://dl.acm.org/citation.cfm?id=3339658,10.1109/ICSE.2019.00124,12
Detecting incorrect build rules.,ICSE-2019-106,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00125;https://dl.acm.org/citation.cfm?id=3339660,10.1109/ICSE.2019.00125,11
Adversarial sample detection for deep neural network through model mutation testing.,ICSE-2019-107,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00126;https://dl.acm.org/citation.cfm?id=3339661,10.1109/ICSE.2019.00126,12
Deep differential testing of JVM implementations.,ICSE-2019-108,ICSE,2019,2019,https://doi.org/10.1109/ICSE.2019.00127;https://dl.acm.org/citation.cfm?id=3339662,10.1109/ICSE.2019.00127,12
Learning-to-rank vs ranking-to-learn: strategies for regression testing in continuous integration.,ICSE-2020-0,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380369;https://ieeexplore.ieee.org/document/9283979,10.1145/3377811.3380369,12
A cost-efficient approach to building in continuous integration.,ICSE-2020-1,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380437;https://ieeexplore.ieee.org/document/9284054,10.1145/3377811.3380437,13
Practical fault detection in puppet programs.,ICSE-2020-2,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380384;https://ieeexplore.ieee.org/document/9284083,10.1145/3377811.3380384,12
Learning from, understanding, and supporting DevOps artifacts for docker.,ICSE-2020-3,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380406,10.1145/3377811.3380406,12
Adapting requirements models to varying environments.,ICSE-2020-4,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380927,10.1145/3377811.3380927,12
Comparing formal tools for system design: a judgment study.,ICSE-2020-5,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380373;https://ieeexplore.ieee.org/document/9284073,10.1145/3377811.3380373,13
Debugging inputs.,ICSE-2020-6,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380329,10.1145/3377811.3380329,12
Causal testing: understanding defects' root causes.,ICSE-2020-7,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380377;https://ieeexplore.ieee.org/document/9284101,10.1145/3377811.3380377,13
Impact analysis of cross-project bugs on software ecosystems.,ICSE-2020-8,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380442;https://ieeexplore.ieee.org/document/9284011,10.1145/3377811.3380442,12
Taming behavioral backward incompatibilities via cross-project testing and analysis.,ICSE-2020-9,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380436;https://ieeexplore.ieee.org/document/9283994,10.1145/3377811.3380436,13
Watchman: monitoring dependency conflicts for Python library ecosystem.,ICSE-2020-10,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380426,10.1145/3377811.3380426,11
One size does not fit all: a grounded theory and online survey study of developer preferences for security warning types.,ICSE-2020-11,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380387;https://ieeexplore.ieee.org/document/9284069,10.1145/3377811.3380387,13
Schrödinger's security: opening the box on app developers' security rationale.,ICSE-2020-12,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380394;https://ieeexplore.ieee.org/document/9283987,10.1145/3377811.3380394,12
How software practitioners use informal local meetups to share software engineering knowledge.,ICSE-2020-13,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380333;https://ieeexplore.ieee.org/document/9283934,10.1145/3377811.3380333,13
Predicting developers' negative feelings about code review.,ICSE-2020-14,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380414;https://ieeexplore.ieee.org/document/9283927,10.1145/3377811.3380414,12
Near-duplicate detection in web app model inference.,ICSE-2020-15,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380416;https://ieeexplore.ieee.org/document/9284089,10.1145/3377811.3380416,12
Extracting taint specifications for JavaScript libraries.,ICSE-2020-16,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380390;https://ieeexplore.ieee.org/document/9284099,10.1145/3377811.3380390,12
SLACC: simion-based language agnostic code clones.,ICSE-2020-17,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380407;https://ieeexplore.ieee.org/document/9283951,10.1145/3377811.3380407,12
Finding client-side business flow tampering vulnerabilities.,ICSE-2020-18,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380355;https://ieeexplore.ieee.org/document/9284014,10.1145/3377811.3380355,12
Securing unsafe rust programs with XRust.,ICSE-2020-19,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380325;https://ieeexplore.ieee.org/document/9283982,10.1145/3377811.3380325,12
Is rust used safely by software developers?,ICSE-2020-20,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380413;https://ieeexplore.ieee.org/document/9283950,10.1145/3377811.3380413,12
Burn after reading: a shadow stack with microsecond-level runtime rerandomization for protecting return addresses.,ICSE-2020-21,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380439;https://ieeexplore.ieee.org/document/9283966,10.1145/3377811.3380439,13
SAVER: scalable, precise, and safe memory-error repair.,ICSE-2020-22,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380323,10.1145/3377811.3380323,13
Revealing injection vulnerabilities by leveraging existing tests.,ICSE-2020-23,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380326;https://ieeexplore.ieee.org/document/9284056,10.1145/3377811.3380326,13
RoScript: a visual script driven truly non-intrusive robotic testing system for touch screen applications.,ICSE-2020-24,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380431;https://ieeexplore.ieee.org/document/9283959,10.1145/3377811.3380431,12
Translating video recordings of mobile app usages into replayable scenarios.,ICSE-2020-25,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380328;https://ieeexplore.ieee.org/document/9283997,10.1145/3377811.3380328,13
Unblind your apps: predicting natural-language labels for mobile GUI components by deep learning.,ICSE-2020-26,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380327;https://ieeexplore.ieee.org/document/9284063,10.1145/3377811.3380327,13
SLEMI: equivalence modulo input (EMI) based mutation of CPS models for finding compiler bugs in Simulink.,ICSE-2020-27,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380381;https://ieeexplore.ieee.org/document/9283988,10.1145/3377811.3380381,12
DeepBillboard: systematic physical-world testing of autonomous driving systems.,ICSE-2020-28,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380422;https://ieeexplore.ieee.org/document/9283977,10.1145/3377811.3380422,12
Misbehaviour prediction for autonomous driving systems.,ICSE-2020-29,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380353;https://ieeexplore.ieee.org/document/9284027,10.1145/3377811.3380353,13
Approximation-refinement testing of compute-intensive cyber-physical models: an approach based on system identification.,ICSE-2020-30,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380370;https://ieeexplore.ieee.org/document/9283957,10.1145/3377811.3380370,13
A comprehensive study of autonomous vehicle bugs.,ICSE-2020-31,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380397;https://ieeexplore.ieee.org/document/9284001,10.1145/3377811.3380397,12
Studying the use of Java logging utilities in the wild.,ICSE-2020-32,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380408,10.1145/3377811.3380408,12
A study on the prevalence of human values in software engineering publications, 2015 - 2018.,ICSE-2020-33,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380393,10.1145/3377811.3380393,12
Explaining pair programming session dynamics from knowledge gaps.,ICSE-2020-34,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380925;https://ieeexplore.ieee.org/document/9284068,10.1145/3377811.3380925,12
Engineering gender-inclusivity into software: ten teams' tales from the trenches.,ICSE-2020-35,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380371;https://ieeexplore.ieee.org/document/9283992,10.1145/3377811.3380371,12
How has forking changed in the last 20 years?: a study of hard forks on GitHub.,ICSE-2020-36,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380412;https://ieeexplore.ieee.org/document/9284038,10.1145/3377811.3380412,12
Multiple-entry testing of Android applications by constructing activity launching contexts.,ICSE-2020-37,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380347;https://ieeexplore.ieee.org/document/9284007,10.1145/3377811.3380347,12
ComboDroid: generating high-quality test inputs for Android apps via use case combinations.,ICSE-2020-38,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380382;https://ieeexplore.ieee.org/document/9283926,10.1145/3377811.3380382,12
Time-travel testing of Android apps.,ICSE-2020-39,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380402;https://ieeexplore.ieee.org/document/9284058,10.1145/3377811.3380402,12
HeteroRefactor: refactoring for heterogeneous computing with FPGA.,ICSE-2020-40,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380340;https://ieeexplore.ieee.org/document/9283938,10.1145/3377811.3380340,13
HARP: holistic analysis for refactoring Python-based analytics programs.,ICSE-2020-41,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380434;https://ieeexplore.ieee.org/document/9284016,10.1145/3377811.3380434,12
CC2Vec: distributed representations of code changes.,ICSE-2020-42,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380361;https://ieeexplore.ieee.org/document/9284081,10.1145/3377811.3380361,12
Empirical review of automated analysis tools on 47, 587 Ethereum smart contracts.,ICSE-2020-43,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380364;https://ieeexplore.ieee.org/document/9284023,10.1145/3377811.3380364,12
Gap between theory and practice: an empirical study of security patches in solidity.,ICSE-2020-44,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380424;https://ieeexplore.ieee.org/document/9283944,10.1145/3377811.3380424,12
An investigation of cross-project learning in online just-in-time software defect prediction.,ICSE-2020-45,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380403;https://ieeexplore.ieee.org/document/9283981,10.1145/3377811.3380403,12
Understanding the automated parameter optimization on transfer learning for cross-project defect prediction: an empirical study.,ICSE-2020-46,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380360,10.1145/3377811.3380360,12
Software visualization and deep transfer learning for effective software defect prediction.,ICSE-2020-47,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380389;https://ieeexplore.ieee.org/document/9284026,10.1145/3377811.3380389,12
Software documentation: the practitioners' perspective.,ICSE-2020-48,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380405;https://ieeexplore.ieee.org/document/9284065,10.1145/3377811.3380405,12
DLFix: context-based code transformation learning for automated program repair.,ICSE-2020-49,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380345;https://ieeexplore.ieee.org/document/9284100,10.1145/3377811.3380345,13
On the efficiency of test suite based program repair: A Systematic Assessment of 16 Automated Repair Systems for Java Programs.,ICSE-2020-50,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380338;https://ieeexplore.ieee.org/document/9283931,10.1145/3377811.3380338,13
Caspar: extracting and synthesizing user stories of problems from app reviews.,ICSE-2020-51,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380924;https://ieeexplore.ieee.org/document/9283933,10.1145/3377811.3380924,13
Detection of hidden feature requests from massive chat messages via deep siamese network.,ICSE-2020-52,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380356;https://ieeexplore.ieee.org/document/9283914,10.1145/3377811.3380356,13
A tale from the trenches: cognitive biases and software development.,ICSE-2020-53,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380330;https://ieeexplore.ieee.org/document/9283965,10.1145/3377811.3380330,12
Recognizing developers' emotions while programming.,ICSE-2020-54,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380374;https://ieeexplore.ieee.org/document/9284015,10.1145/3377811.3380374,12
Neurological divide: an fMRI study of prose and code writing.,ICSE-2020-55,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380348;https://ieeexplore.ieee.org/document/9284060,10.1145/3377811.3380348,13
Here we go again: why is it difficult for developers to learn another programming language?,ICSE-2020-56,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380352;https://ieeexplore.ieee.org/document/9284077,10.1145/3377811.3380352,11
Importance-driven deep learning system testing.,ICSE-2020-57,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380391;https://ieeexplore.ieee.org/document/9283940,10.1145/3377811.3380391,12
ReluDiff: differential verification of deep neural networks.,ICSE-2020-58,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380337;https://ieeexplore.ieee.org/document/9283939,10.1145/3377811.3380337,13
Dissector: input validation for deep learning applications by crossing-layer dissection.,ICSE-2020-59,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380379;https://ieeexplore.ieee.org/document/9283929,10.1145/3377811.3380379,12
Towards characterizing adversarial defects of deep learning software from the lens of uncertainty.,ICSE-2020-60,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380368,10.1145/3377811.3380368,13
Gang of eight: a defect taxonomy for infrastructure as code scripts.,ICSE-2020-61,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380409,10.1145/3377811.3380409,13
MemLock: memory usage guided fuzzing.,ICSE-2020-62,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380396,10.1145/3377811.3380396,13
sFuzz: an efficient adaptive fuzzer for solidity smart contracts.,ICSE-2020-63,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380334;https://ieeexplore.ieee.org/document/9284013,10.1145/3377811.3380334,11
Targeted greybox fuzzing with static lookahead analysis.,ICSE-2020-64,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380388;https://ieeexplore.ieee.org/document/9284040,10.1145/3377811.3380388,12
Planning for untangling: predicting the difficulty of merge conflicts.,ICSE-2020-65,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380344;https://ieeexplore.ieee.org/document/9284005,10.1145/3377811.3380344,11
Conquering the extensional scalability problem for value-flow analysis frameworks.,ICSE-2020-66,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380346;https://ieeexplore.ieee.org/document/9283935,10.1145/3377811.3380346,12
Tailoring programs for static analysis via program transformation.,ICSE-2020-67,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380343;https://ieeexplore.ieee.org/document/9284082,10.1145/3377811.3380343,11
Pipelining bottom-up data flow analysis.,ICSE-2020-68,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380425;https://ieeexplore.ieee.org/document/9283921,10.1145/3377811.3380425,13
A novel approach to tracing safety requirements and state-based design models.,ICSE-2020-69,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380332;https://ieeexplore.ieee.org/document/9284105,10.1145/3377811.3380332,13
Establishing multilevel test-to-code traceability links.,ICSE-2020-70,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380921;https://ieeexplore.ieee.org/document/9283989,10.1145/3377811.3380921,12
Improving the effectiveness of traceability link recovery using hierarchical bayesian networks.,ICSE-2020-71,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380418;https://ieeexplore.ieee.org/document/9284034,10.1145/3377811.3380418,13
How Android developers handle evolution-induced API compatibility issues: a large-scale study.,ICSE-2020-72,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380357;https://ieeexplore.ieee.org/document/9284041,10.1145/3377811.3380357,13
An empirical study on API parameter rules.,ICSE-2020-73,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380922;https://ieeexplore.ieee.org/document/9283984,10.1145/3377811.3380922,13
When APIs are intentionally bypassed: an exploratory study of API workarounds.,ICSE-2020-74,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380433;https://ieeexplore.ieee.org/document/9283953,10.1145/3377811.3380433,13
Demystify official API usage directives with crowdsourced API misuse scenarios, erroneous code examples and patches.,ICSE-2020-75,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380430;https://ieeexplore.ieee.org/document/9283947,10.1145/3377811.3380430,12
Simulee: detecting CUDA synchronization bugs via memory-access modeling.,ICSE-2020-76,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380358,10.1145/3377811.3380358,12
White-box fairness testing through adversarial sampling.,ICSE-2020-77,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380331;https://ieeexplore.ieee.org/document/9283952,10.1145/3377811.3380331,12
Structure-invariant testing for machine translation.,ICSE-2020-78,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380339;https://ieeexplore.ieee.org/document/9284002,10.1145/3377811.3380339,13
Automatic testing and improvement of machine translation.,ICSE-2020-79,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380420;https://ieeexplore.ieee.org/document/9284046,10.1145/3377811.3380420,12
TRADER: trace divergence analysis and embedding regulation for debugging recurrent neural networks.,ICSE-2020-80,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380423;https://ieeexplore.ieee.org/document/9284017,10.1145/3377811.3380423,13
Typestate-guided fuzzer for discovering use-after-free vulnerabilities.,ICSE-2020-81,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380386;https://ieeexplore.ieee.org/document/9283945,10.1145/3377811.3380386,12
JVM fuzzing for JIT-induced side-channel detection.,ICSE-2020-82,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380432;https://ieeexplore.ieee.org/document/9284028,10.1145/3377811.3380432,13
Ankou: guiding grey-box fuzzing towards combinatorial difference.,ICSE-2020-83,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380421;https://ieeexplore.ieee.org/document/9283954,10.1145/3377811.3380421,13
BCFA: bespoke control flow analysis for CFA at scale.,ICSE-2020-84,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380435;https://ieeexplore.ieee.org/document/9284024,10.1145/3377811.3380435,12
On the recall of static call graph construction in practice.,ICSE-2020-85,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380441;https://ieeexplore.ieee.org/document/9283958,10.1145/3377811.3380441,12
Heaps'n leaks: how heap snapshots improve Android taint analysis.,ICSE-2020-86,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380438;https://ieeexplore.ieee.org/document/9284080,10.1145/3377811.3380438,12
Big code != big vocabulary: open-vocabulary models for source code.,ICSE-2020-87,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380342;https://ieeexplore.ieee.org/document/9284032,10.1145/3377811.3380342,13
Improving data scientist efficiency with provenance.,ICSE-2020-88,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380366;https://ieeexplore.ieee.org/document/9284103,10.1145/3377811.3380366,12
Managing data constraints in database-backed web applications.,ICSE-2020-89,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380375;https://ieeexplore.ieee.org/document/9284009,10.1145/3377811.3380375,12
Taxonomy of real faults in deep learning systems.,ICSE-2020-90,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380395,10.1145/3377811.3380395,12
Testing DNN image classifiers for confusion & bias errors.,ICSE-2020-91,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380400;https://ieeexplore.ieee.org/document/9284045,10.1145/3377811.3380400,13
Repairing deep neural networks: fix patterns and challenges.,ICSE-2020-92,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380378;https://ieeexplore.ieee.org/document/9284050,10.1145/3377811.3380378,12
Fuzz testing based data augmentation to improve robustness of deep neural networks.,ICSE-2020-93,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380415;https://ieeexplore.ieee.org/document/9283925,10.1145/3377811.3380415,12
An empirical study on program failures of deep learning jobs.,ICSE-2020-94,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380362,10.1145/3377811.3380362,12
Primers or reminders?: the effects of existing review comments on code review.,ICSE-2020-95,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380385;https://ieeexplore.ieee.org/document/9284010,10.1145/3377811.3380385,12
Mitigating turnover with code review recommendation: balancing expertise, workload, and knowledge distribution.,ICSE-2020-96,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380335,10.1145/3377811.3380335,13
How do companies collaborate in open source ecosystems?: an empirical study of OpenStack.,ICSE-2020-97,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380376,10.1145/3377811.3380376,13
How to not get rich: an empirical study of donations in open source.,ICSE-2020-98,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380410;https://ieeexplore.ieee.org/document/9283983,10.1145/3377811.3380410,13
Scaling open source communities: an empirical study of the Linux kernel.,ICSE-2020-99,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380920;https://ieeexplore.ieee.org/document/9284035,10.1145/3377811.3380920,13
SpecuSym: speculative symbolic execution for cache timing leak detection.,ICSE-2020-100,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380428,10.1145/3377811.3380428,13
Symbolic verification of message passing interface programs.,ICSE-2020-101,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380419;https://ieeexplore.ieee.org/document/9283955,10.1145/3377811.3380419,13
Efficient generation of error-inducing floating-point inputs via symbolic execution.,ICSE-2020-102,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380359;https://ieeexplore.ieee.org/document/9283956,10.1145/3377811.3380359,12
HyDiff: hybrid differential software analysis.,ICSE-2020-103,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380363;https://ieeexplore.ieee.org/document/9284021,10.1145/3377811.3380363,13
Seenomaly: vision-based linting of GUI animation effects against design-don't guidelines.,ICSE-2020-104,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380411;https://ieeexplore.ieee.org/document/9284093,10.1145/3377811.3380411,12
Low-overhead deadlock prediction.,ICSE-2020-105,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380367,10.1145/3377811.3380367,12
An empirical assessment of security risks of global Android banking apps.,ICSE-2020-106,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380417;https://ieeexplore.ieee.org/document/9283969,10.1145/3377811.3380417,13
Accessibility issues in Android apps: state of affairs, sentiments, and ways forward.,ICSE-2020-107,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380392;https://ieeexplore.ieee.org/document/9284030,10.1145/3377811.3380392,12
Collaborative bug finding for Android apps.,ICSE-2020-108,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380349,10.1145/3377811.3380349,13
POSIT: simultaneously tagging natural and programming languages.,ICSE-2020-109,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380440;https://ieeexplore.ieee.org/document/9284084,10.1145/3377811.3380440,11
CPC: automatically classifying and propagating natural language comments via program analysis.,ICSE-2020-110,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380427;https://ieeexplore.ieee.org/document/9284079,10.1145/3377811.3380427,13
Suggesting natural method names to check name consistencies.,ICSE-2020-111,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380926;https://ieeexplore.ieee.org/document/9284075,10.1145/3377811.3380926,13
Retrieval-based neural source code summarization.,ICSE-2020-112,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380383;https://ieeexplore.ieee.org/document/9284039,10.1145/3377811.3380383,13
On learning meaningful assert statements for unit test cases.,ICSE-2020-113,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380429;https://ieeexplore.ieee.org/document/9283916,10.1145/3377811.3380429,12
Quickly generating diverse valid test inputs with reinforcement learning.,ICSE-2020-114,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380399;https://ieeexplore.ieee.org/document/9284117,10.1145/3377811.3380399,12
An evidence-based inquiry into the use of grey literature in software engineering.,ICSE-2020-115,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380336;https://ieeexplore.ieee.org/document/9283930,10.1145/3377811.3380336,13
Towards the use of the readily available tests from the release pipeline as performance tests: are we there yet?,ICSE-2020-116,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380351;https://ieeexplore.ieee.org/document/9284085,10.1145/3377811.3380351,12
Verifying object construction.,ICSE-2020-117,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380341;https://ieeexplore.ieee.org/document/9284018,10.1145/3377811.3380341,12
Automatically testing string solvers.,ICSE-2020-118,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380398;https://ieeexplore.ieee.org/document/9284042,10.1145/3377811.3380398,12
A study on the lifecycle of flaky tests.,ICSE-2020-119,ICSE,2020,2020,https://doi.org/10.1145/3377811.3381749,10.1145/3377811.3381749,12
Testing file system implementations on layered models.,ICSE-2020-120,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380350;https://ieeexplore.ieee.org/document/9283972,10.1145/3377811.3380350,13
Co-evolving code with evolving metamodels.,ICSE-2020-121,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380324;https://ieeexplore.ieee.org/document/9283913,10.1145/3377811.3380324,13
Lazy product discovery in huge configuration spaces.,ICSE-2020-122,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380372;https://ieeexplore.ieee.org/document/9283998,10.1145/3377811.3380372,13
Reducing run-time adaptation space via analysis of possible utility bounds.,ICSE-2020-123,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380365;https://ieeexplore.ieee.org/document/9283948,10.1145/3377811.3380365,13
Context-aware in-process crowdworker recommendation.,ICSE-2020-124,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380380;https://ieeexplore.ieee.org/document/9283975,10.1145/3377811.3380380,12
A large-scale empirical study on vulnerability distribution within projects and the lessons learned.,ICSE-2020-125,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380923;https://ieeexplore.ieee.org/document/9283967,10.1145/3377811.3380923,13
Unsuccessful story about few shot malware family classification and siamese network to the rescue.,ICSE-2020-126,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380354;https://ieeexplore.ieee.org/document/9283961,10.1145/3377811.3380354,12
How does misconfiguration of analytic services compromise mobile privacy?,ICSE-2020-127,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380401;https://ieeexplore.ieee.org/document/9284006,10.1145/3377811.3380401,12
Interpreting cloud computer vision pain-points: a mining study of stack overflow.,ICSE-2020-128,ICSE,2020,2020,https://doi.org/10.1145/3377811.3380404,10.1145/3377811.3380404,13
Playing Planning Poker in Crowds: Human Computation of Software Effort Estimates.,ICSE-2021-0,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00014,10.1109/ICSE43902.2021.00014,12
JEST: N+1 -version Differential Testing of Both JavaScript Engines and Specification.,ICSE-2021-1,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00015,10.1109/ICSE43902.2021.00015,12
Unrealizable Cores for Reactive Systems Specifications.,ICSE-2021-2,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00016,10.1109/ICSE43902.2021.00016,12
Verifying Determinism in Sequential Programs.,ICSE-2021-3,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00017,10.1109/ICSE43902.2021.00017,13
Domain-Specific Fixes for Flaky Tests with Wrong Assumptions on Underdetermined Specifications.,ICSE-2021-4,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00018,10.1109/ICSE43902.2021.00018,12
Studying Test Annotation Maintenance in the Wild.,ICSE-2021-5,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00019,10.1109/ICSE43902.2021.00019,12
Semantic Patches for Adaptation of JavaScript Programs to Evolving Libraries.,ICSE-2021-6,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00020,10.1109/ICSE43902.2021.00020,12
DepOwl: Detecting Dependency Bugs to Prevent Compatibility Failures.,ICSE-2021-7,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00021,10.1109/ICSE43902.2021.00021,13
HERO: On the Chaos When PATH Meets Modules.,ICSE-2021-8,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00022,10.1109/ICSE43902.2021.00022,13
SOAR: A Synthesis Approach for Data Science API Refactoring.,ICSE-2021-9,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00023,10.1109/ICSE43902.2021.00023,13
Are Machine Learning Cloud APIs Used Correctly?,ICSE-2021-10,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00024,10.1109/ICSE43902.2021.00024,13
Siri, Write the Next Method.,ICSE-2021-11,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00025,10.1109/ICSE43902.2021.00025,12
Code Prediction by Feeding Trees to Transformers.,ICSE-2021-12,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00026,10.1109/ICSE43902.2021.00026,13
Towards Automating Code Review Activities.,ICSE-2021-13,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00027,10.1109/ICSE43902.2021.00027,12
Resource-Guided Configuration Space Reduction for Deep Learning Models.,ICSE-2021-14,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00028,10.1109/ICSE43902.2021.00028,13
An Evolutionary Study of Configuration Design and Implementation in Cloud Systems.,ICSE-2021-15,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00029,10.1109/ICSE43902.2021.00029,13
AutoCCAG: An Automated Approach to Constrained Covering Array Generation.,ICSE-2021-16,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00030,10.1109/ICSE43902.2021.00030,12
What helped, and what did not? An Evaluation of the Strategies to Improve Continuous Integration.,ICSE-2021-17,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00031,10.1109/ICSE43902.2021.00031,13
Distribution-Aware Testing of Neural Networks Using Generative Models.,ICSE-2021-18,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00032,10.1109/ICSE43902.2021.00032,12
An Empirical Study of Refactorings and Technical Debt in Machine Learning Systems.,ICSE-2021-19,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00033,10.1109/ICSE43902.2021.00033,13
DeepLocalize: Fault Localization for Deep Neural Networks.,ICSE-2021-20,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00034,10.1109/ICSE43902.2021.00034,12
DeepPayload: Black-box Backdoor Attack on Deep Learning Models through Neural Payload Injection.,ICSE-2021-21,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00035,10.1109/ICSE43902.2021.00035,12
Reducing DNN Properties to Enable Falsification with Adversarial Attacks.,ICSE-2021-22,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00036,10.1109/ICSE43902.2021.00036,13
Graph-based Fuzz Testing for Deep Learning Inference Engines.,ICSE-2021-23,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00037,10.1109/ICSE43902.2021.00037,12
RobOT: Robustness-Oriented Testing for Deep Learning Systems.,ICSE-2021-24,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00038,10.1109/ICSE43902.2021.00038,12
Scalable Quantitative Verification For Deep Neural Networks.,ICSE-2021-25,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00039,10.1109/ICSE43902.2021.00039,12
Traceability Transformed: Generating more Accurate Links with Pre-Trained BERT Models.,ICSE-2021-26,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00040,10.1109/ICSE43902.2021.00040,12
Studying the Usage of Text-To-Text Transfer Transformer to Support Code-Related Tasks.,ICSE-2021-27,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00041,10.1109/ICSE43902.2021.00041,12
Operation is the hardest teacher: estimating DNN accuracy looking for mispredictions.,ICSE-2021-28,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00042,10.1109/ICSE43902.2021.00042,11
AUTOTRAINER: An Automatic DNN Training Problem Detection and Repair System.,ICSE-2021-29,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00043,10.1109/ICSE43902.2021.00043,13
Self-Checking Deep Neural Networks in Deployment.,ICSE-2021-30,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00044,10.1109/ICSE43902.2021.00044,13
Measuring Discrimination to Boost Comparative Testing for Multiple Deep Learning Models.,ICSE-2021-31,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00045,10.1109/ICSE43902.2021.00045,12
Prioritizing Test Inputs for Deep Neural Networks via Mutation Analysis.,ICSE-2021-32,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00046,10.1109/ICSE43902.2021.00046,13
Testing Machine Translation via Referential Transparency.,ICSE-2021-33,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00047,10.1109/ICSE43902.2021.00047,13
Automatic Web Testing Using Curiosity-Driven Reinforcement Learning.,ICSE-2021-34,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00048,10.1109/ICSE43902.2021.00048,13
Evaluating SZZ Implementations Through a Developer-informed Oracle.,ICSE-2021-35,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00049,10.1109/ICSE43902.2021.00049,12
Early Life Cycle Software Defect Prediction. Why? How?,ICSE-2021-36,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00050,10.1109/ICSE43902.2021.00050,12
IoT Bugs and Development Challenges.,ICSE-2021-37,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00051,10.1109/ICSE43902.2021.00051,13
How Developers Optimize Virtual Reality Applications: A Study of Optimization Commits in Open Source Unity Projects.,ICSE-2021-38,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00052,10.1109/ICSE43902.2021.00052,13
"Do this! Do that!, And nothing will happen" Do specifications lead to securely stored passwords?,ICSE-2021-39,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00053,10.1109/ICSE43902.2021.00053,13
Why Don't Developers Detect Improper Input Validation? '; DROP TABLE Papers; -.,ICSE-2021-40,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00054,10.1109/ICSE43902.2021.00054,13
The Mind Is a Powerful Place: How Showing Code Comprehensibility Metrics Influences Code Understanding.,ICSE-2021-41,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00055,10.1109/ICSE43902.2021.00055,12
Program Comprehension and Code Complexity Metrics: An fMRI Study.,ICSE-2021-42,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00056,10.1109/ICSE43902.2021.00056,13
Do you really code? Designing and Evaluating Screening Questions for Online Surveys with Programmers.,ICSE-2021-43,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00057,10.1109/ICSE43902.2021.00057,12
How Gamification Affects Software Developers: Cautionary Evidence from a Natural Experiment on GitHub.,ICSE-2021-44,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00058,10.1109/ICSE43902.2021.00058,13
IdBench: Evaluating Semantic Representations of Identifier Names in Source Code.,ICSE-2021-45,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00059,10.1109/ICSE43902.2021.00059,12
A Context-based Automated Approach for Method Name Consistency Checking and Suggestion.,ICSE-2021-46,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00060,10.1109/ICSE43902.2021.00060,13
On the Naming of Methods: A Survey of Professional Developers.,ICSE-2021-47,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00061,10.1109/ICSE43902.2021.00061,13
Relating Reading, Visualization, and Coding for New Programmers: A Neuroimaging Study.,ICSE-2021-48,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00062,10.1109/ICSE43902.2021.00062,13
A Case Study of Onboarding in Software Teams: Tasks and Strategies.,ICSE-2021-49,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00063,10.1109/ICSE43902.2021.00063,11
"How Was Your Weekend?" Software Development Teams Working From Home During COVID-19.,ICSE-2021-50,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00064,10.1109/ICSE43902.2021.00064,13
FLACK: Counterexample-Guided Fault Localization for Alloy Models.,ICSE-2021-51,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00065,10.1109/ICSE43902.2021.00065,12
Improving Fault Localization by Integrating Value and Predicate Based Causal Inference Techniques.,ICSE-2021-52,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00066,10.1109/ICSE43902.2021.00066,12
Fault Localization with Code Coverage Representation Learning.,ICSE-2021-53,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00067,10.1109/ICSE43902.2021.00067,13
An Empirical Study on Deployment Faults of Deep Learning Based Mobile Applications.,ICSE-2021-54,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00068,10.1109/ICSE43902.2021.00068,12
Extracting Concise Bug-Fixing Patches from Human-Written Patches in Version Control Systems.,ICSE-2021-55,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00069,10.1109/ICSE43902.2021.00069,13
Input Algebras.,ICSE-2021-56,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00070,10.1109/ICSE43902.2021.00070,12
Fuzzing Symbolic Expressions.,ICSE-2021-57,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00071,10.1109/ICSE43902.2021.00071,12
Growing A Test Corpus with Bonsai Fuzzing.,ICSE-2021-58,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00072,10.1109/ICSE43902.2021.00072,13
We'll Fix It in Post: What Do Bug Fixes in Video Game Update Notes Tell Us?,ICSE-2021-59,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00073,10.1109/ICSE43902.2021.00073,12
GUIGAN: Learning to Generate GUI Designs Using Generative Adversarial Networks.,ICSE-2021-60,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00074,10.1109/ICSE43902.2021.00074,13
Don't Do That! Hunting Down Visual Design Smells in Complex UIs against Design Guidelines.,ICSE-2021-61,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00075,10.1109/ICSE43902.2021.00075,12
Same File, Different Changes: The Potential of Meta-Maintenance on GitHub.,ICSE-2021-62,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00076,10.1109/ICSE43902.2021.00076,12
Can Program Synthesis be Used to Learn Merge Conflict Resolutions? An Empirical Analysis.,ICSE-2021-63,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00077,10.1109/ICSE43902.2021.00077,12
Abacus: Precise Side-Channel Analysis.,ICSE-2021-64,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00078,10.1109/ICSE43902.2021.00078,13
Data-Driven Synthesis of Provably Sound Side Channel Analyses.,ICSE-2021-65,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00079,10.1109/ICSE43902.2021.00079,13
IMGDroid: Detecting Image Loading Defects in Android Applications.,ICSE-2021-66,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00080,10.1109/ICSE43902.2021.00080,12
Fast Parametric Model Checking through Model Fragmentation.,ICSE-2021-67,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00081,10.1109/ICSE43902.2021.00081,12
Trace-Checking CPS Properties: Bridging the Cyber-Physical Gap.,ICSE-2021-68,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00082,10.1109/ICSE43902.2021.00082,13
Centris: A Precise and Scalable Approach for Identifying Modified Open-Source Software Reuse.,ICSE-2021-69,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00083,10.1109/ICSE43902.2021.00083,13
Interpretation-enabled Software Reuse Detection Based on a Multi-Level Birthmark Model.,ICSE-2021-70,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00084,10.1109/ICSE43902.2021.00084,12
Fast Outage Analysis of Large-scale Production Clouds with Service Correlation Mining.,ICSE-2021-71,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00085,10.1109/ICSE43902.2021.00085,12
MuDelta: Delta-Oriented Mutation Testing at Commit Time.,ICSE-2021-72,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00086,10.1109/ICSE43902.2021.00086,13
Does mutation testing improve testing practices?,ICSE-2021-73,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00087,10.1109/ICSE43902.2021.00087,12
Identifying Key Features from App User Reviews.,ICSE-2021-74,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00088,10.1109/ICSE43902.2021.00088,11
CHAMP: Characterizing Undesired App Behaviors from User Comments based on Market Policies.,ICSE-2021-75,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00089,10.1109/ICSE43902.2021.00089,13
Prioritize Crowdsourced Test Reports via Deep Screenshot Understanding.,ICSE-2021-76,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00090,10.1109/ICSE43902.2021.00090,11
It Takes Two to TANGO: Combining Visual and Textual Information for Detecting Duplicate Video-Based Bug Reports.,ICSE-2021-77,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00091,10.1109/ICSE43902.2021.00091,13
Automatically Matching Bug Reports With Related App Reviews.,ICSE-2021-78,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00092,10.1109/ICSE43902.2021.00092,12
What Makes a Great Maintainer of Open Source Projects?,ICSE-2021-79,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00093,10.1109/ICSE43902.2021.00093,13
Representation of Developer Expertise in Open Source Software.,ICSE-2021-80,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00094,10.1109/ICSE43902.2021.00094,13
Extracting Rationale for Open Source Software Development Decisions - A Study of Python Email Archives.,ICSE-2021-81,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00095,10.1109/ICSE43902.2021.00095,12
Leaving My Fingerprints: Motivations and Challenges of Contributing to OSS for Social Good.,ICSE-2021-82,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00096,10.1109/ICSE43902.2021.00096,13
Onboarding vs. Diversity, Productivity, and Quality - Empirical Study of the OpenStack Ecosystem.,ICSE-2021-83,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00097,10.1109/ICSE43902.2021.00097,13
The Shifting Sands of Motivation: Revisiting What Drives Contributors in Open Source.,ICSE-2021-84,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00098,10.1109/ICSE43902.2021.00098,13
White-Box Performance-Influence Models: A Profiling and Learning Approach.,ICSE-2021-85,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00099,10.1109/ICSE43902.2021.00099,13
White-Box Analysis over Machine Learning: Modeling Performance of Configurable Systems.,ICSE-2021-86,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00100,10.1109/ICSE43902.2021.00100,13
An Empirical Assessment of Global COVID-19 Contact Tracing Applications.,ICSE-2021-87,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00101,10.1109/ICSE43902.2021.00101,13
Sustainable Solving: Reducing The Memory Footprint of IFDS-Based Data Flow Analyses Using Intelligent Garbage Collection.,ICSE-2021-88,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00102,10.1109/ICSE43902.2021.00102,13
Synthesizing Object State Transformers for Dynamic Software Updates.,ICSE-2021-89,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00103,10.1109/ICSE43902.2021.00103,12
Fast and Precise On-the-fly Patch Validation for All.,ICSE-2021-90,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00104,10.1109/ICSE43902.2021.00104,12
Bounded Exhaustive Search of Alloy Specification Repairs.,ICSE-2021-91,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00105,10.1109/ICSE43902.2021.00105,13
Shipwright: A Human-in-the-Loop System for Dockerfile Repair.,ICSE-2021-92,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00106,10.1109/ICSE43902.2021.00106,13
CURE: Code-Aware Neural Machine Translation for Automatic Program Repair.,ICSE-2021-93,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00107,10.1109/ICSE43902.2021.00107,13
A Differential Testing Approach for Evaluating Abstract Syntax Tree Mapping Algorithms.,ICSE-2021-94,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00108,10.1109/ICSE43902.2021.00108,12
InferCode: Self-Supervised Learning of Code Representations by Predicting Subtrees.,ICSE-2021-95,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00109,10.1109/ICSE43902.2021.00109,12
Efficient Compiler Autotuning via Bayesian Optimization.,ICSE-2021-96,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00110,10.1109/ICSE43902.2021.00110,12
TRANSREGEX: Multi-modal Regular Expression Synthesis by Generate-and-Repair.,ICSE-2021-97,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00111,10.1109/ICSE43902.2021.00111,13
EvoSpex: An Evolutionary Algorithm for Learning Postconditions.,ICSE-2021-98,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00112,10.1109/ICSE43902.2021.00112,13
Interface Compliance of Inline Assembly: Automatically Check, Patch and Refine.,ICSE-2021-99,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00113,10.1109/ICSE43902.2021.00113,12
Enabling Software Resilience in GPGPU Applications via Partial Thread Protection.,ICSE-2021-100,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00114,10.1109/ICSE43902.2021.00114,12
Automatic Extraction of Opinion-based Q&A from Online Developer Chats.,ICSE-2021-101,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00115,10.1109/ICSE43902.2021.00115,13
Automated Query Reformulation for Efficient Search based on Query Logs From Stack Overflow.,ICSE-2021-102,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00116,10.1109/ICSE43902.2021.00116,13
Automatic Solution Summarization for Crash Bugs.,ICSE-2021-103,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00117,10.1109/ICSE43902.2021.00117,12
Supporting Quality Assurance with Automated Process-Centric Quality Constraints Checking.,ICSE-2021-104,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00118,10.1109/ICSE43902.2021.00118,13
Understanding Bounding Functions in Safety-Critical UAV Software.,ICSE-2021-105,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00119,10.1109/ICSE43902.2021.00119,12
Enhancing Genetic Improvement of Software with Regression Test Selection.,ICSE-2021-106,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00120,10.1109/ICSE43902.2021.00120,11
Containing Malicious Package Updates in npm with a Lightweight Permission System.,ICSE-2021-107,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00121,10.1109/ICSE43902.2021.00121,13
Too Quiet in the Library: An Empirical Study of Security Updates in Android Apps' Native Code.,ICSE-2021-108,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00122,10.1109/ICSE43902.2021.00122,13
If It's Not Secure, It Should Not Compile: Preventing DOM-Based XSS in Large-Scale Web Development with API Hardening.,ICSE-2021-109,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00123,10.1109/ICSE43902.2021.00123,13
Why Security Defects Go Unnoticed during Code Reviews? A Case-Control Study of the Chromium OS Project.,ICSE-2021-110,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00124,10.1109/ICSE43902.2021.00124,13
Technical Leverage in a Software Ecosystem: Development Opportunities and Security Risks.,ICSE-2021-111,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00125,10.1109/ICSE43902.2021.00125,12
RAICC: Revealing Atypical Inter-Component Communication in Android Apps.,ICSE-2021-112,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00126,10.1109/ICSE43902.2021.00126,12
Smart Contract Security: a Practitioners' Perspective.,ICSE-2021-113,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00127,10.1109/ICSE43902.2021.00127,13
AID: An automated detector for gender-inclusivity bugs in OSS project pages.,ICSE-2021-114,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00128,10.1109/ICSE43902.2021.00128,13
"Ignorance and Prejudice" in Software Fairness.,ICSE-2021-115,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00129,10.1109/ICSE43902.2021.00129,12
Semi-supervised Log-based Anomaly Detection via Probabilistic Label Estimation.,ICSE-2021-116,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00130,10.1109/ICSE43902.2021.00130,13
DeepLV: Suggesting Log Levels Using Ordinal Based Neural Networks.,ICSE-2021-117,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00131,10.1109/ICSE43902.2021.00131,12
How to Identify Boundary Conditions with Contrasty Metric?,ICSE-2021-118,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00132,10.1109/ICSE43902.2021.00132,12
Using Domain-specific Corpora for Improved Handling of Ambiguity in Requirements.,ICSE-2021-119,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00133,10.1109/ICSE43902.2021.00133,13
On Indirectly Dependent Documentation in the Context of Code Evolution: A Study.,ICSE-2021-120,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00134,10.1109/ICSE43902.2021.00134,12
CodeShovel: Constructing Method-Level Source Code Histories.,ICSE-2021-121,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00135,10.1109/ICSE43902.2021.00135,13
Evaluating Unit Testing Practices in R Packages.,ICSE-2021-122,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00136,10.1109/ICSE43902.2021.00136,12
Data-Oriented Differential Testing of Object-Relational Mapping Systems.,ICSE-2021-123,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00137,10.1109/ICSE43902.2021.00137,13
Automatic Unit Test Generation for Machine Learning Libraries: How Far Are We?,ICSE-2021-124,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00138,10.1109/ICSE43902.2021.00138,13
Layout and Image Recognition Driving Cross-Platform Automated Mobile Testing.,ICSE-2021-125,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00139,10.1109/ICSE43902.2021.00139,11
FlakeFlagger: Predicting Flakiness Without Rerunning Tests.,ICSE-2021-126,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00140,10.1109/ICSE43902.2021.00140,13
An Empirical Analysis of UI-based Flaky Tests.,ICSE-2021-127,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00141,10.1109/ICSE43902.2021.00141,13
GenTree: Using Decision Trees to Learn Interactions for Configurable Software.,ICSE-2021-128,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00142,10.1109/ICSE43902.2021.00142,12
Semantic Web Accessibility Testing via Hierarchical Visual Analysis.,ICSE-2021-129,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00143,10.1109/ICSE43902.2021.00143,12
Restoring Execution Environments of Jupyter Notebooks.,ICSE-2021-130,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00144,10.1109/ICSE43902.2021.00144,12
PyART: Python API Recommendation in Real-Time.,ICSE-2021-131,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00145,10.1109/ICSE43902.2021.00145,12
PyCG: Practical Call Graph Generation in Python.,ICSE-2021-132,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00146,10.1109/ICSE43902.2021.00146,12
Seamless Variability Management With the Virtual Platform.,ICSE-2021-133,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00147,10.1109/ICSE43902.2021.00147,13
Fine with "1234"? An Analysis of SMS One-Time Password Randomness in Android Apps.,ICSE-2021-134,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00148,10.1109/ICSE43902.2021.00148,12
App's Auto-Login Function Security Testing via Android OS-Level Virtualization.,ICSE-2021-135,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00149,10.1109/ICSE43902.2021.00149,12
ATVHUNTER: Reliable Version Detection of Third-Party Libraries for Vulnerability Identification in Android Applications.,ICSE-2021-136,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00150,10.1109/ICSE43902.2021.00150,13
JUSTGen: Effective Test Generation for Unspecified JNI Behaviors on JVMs.,ICSE-2021-137,ICSE,2021,2021,https://doi.org/10.1109/ICSE43902.2021.00151,10.1109/ICSE43902.2021.00151,11
Diversity-Driven Automated Formal Verification.,ICSE-2022-2,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510138,10.1145/3510003.3510138,13
$\mu AFL$: Non-intrusive Feedback-driven Fuzzing for Microcontroller Firmware.,ICSE-2022-3,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510208,10.1145/3510003.3510208,12
SPT-Code: Sequence-to-Sequence Pre-Training for Learning Source Code Representations.,ICSE-2022-4,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510096,10.1145/3510003.3510096,13
A Grounded Theory Based Approach to Characterize Software Attack Surfaces.,ICSE-2022-5,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510210,10.1145/3510003.3510210,12
A Grounded Theory of Coordination in Remote-First and Hybrid Software Teams.,ICSE-2022-6,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510105,10.1145/3510003.3510105,11
A Scalable t-wise Coverage Estimator.,ICSE-2022-7,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510218,10.1145/3510003.3510218,12
A Universal Data Augmentation Approach for Fault Localization.,ICSE-2022-8,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510136,10.1145/3510003.3510136,13
Adaptive Performance Anomaly Detection for Online Service Systems via Pattern Sketching.,ICSE-2022-9,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510085,10.1145/3510003.3510085,12
Adaptive Test Selection for Deep Neural Networks.,ICSE-2022-10,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510232;https://ieeexplore.ieee.org/document/9793868,10.1145/3510003.3510232,13
An Exploratory Study of Deep learning Supply Chain.,ICSE-2022-11,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510199;https://ieeexplore.ieee.org/document/9793893,10.1145/3510003.3510199,13
An Exploratory Study of Productivity Perceptions in Software Teams.,ICSE-2022-12,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510081;https://ieeexplore.ieee.org/document/9793555,10.1145/3510003.3510081,13
Analyzing User Perspectives on Mobile App Privacy at Scale.,ICSE-2022-13,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510079,10.1145/3510003.3510079,13
APER: Evolution-Aware Runtime Permission Misuse Detection for Android Apps.,ICSE-2022-14,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510074,10.1145/3510003.3510074,13
ARCLIN: Automated API Mention Resolution for Unformatted Texts.,ICSE-2022-15,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510158;https://ieeexplore.ieee.org/document/9793898,10.1145/3510003.3510158,12
AST-Trans: Code Summarization with Efficient Tree-Structured Attention.,ICSE-2022-16,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510224,10.1145/3510003.3510224,13
Automated Assertion Generation via Information Retrieval and Its Integration with Deep learning.,ICSE-2022-17,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510149;https://ieeexplore.ieee.org/document/9793891,10.1145/3510003.3510149,12
Automated Detection of Password Leakage from Public GitHub Repositories.,ICSE-2022-18,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510150,10.1145/3510003.3510150,12
Automated Handling of Anaphoric Ambiguity in Requirements: A Multi-solution Study.,ICSE-2022-19,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510157,10.1145/3510003.3510157,13
Automated Patching for Unreproducible Builds.,ICSE-2022-20,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510102;https://ieeexplore.ieee.org/document/9793866,10.1145/3510003.3510102,12
Automated Testing of Software that Uses Machine Learning APIs.,ICSE-2022-21,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510068,10.1145/3510003.3510068,13
Automatic Detection of Performance Bugs in Database Systems using Equivalent Queries.,ICSE-2022-22,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510093,10.1145/3510003.3510093,12
AutoTransform: Automated Code Transformation to Support Modern Code Review Process.,ICSE-2022-23,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510067,10.1145/3510003.3510067,12
BEDIVFUZZ: Integrating Behavioral Diversity into Generator-based Fuzzing.,ICSE-2022-24,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510182,10.1145/3510003.3510182,13
Big Data = Big Insights? Operationalising Brooks' Law in a Massive GitHub Data Set.,ICSE-2022-25,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510619,10.1145/3510003.3510619,12
Bots for Pull Requests: The Good, the Bad, and the Promising.,ICSE-2022-26,ICSE,2022,2022,https://doi.org/10.1145/3510003.3512765;https://ieeexplore.ieee.org/document/9793907,10.1145/3510003.3512765,13
Bridging Pre-trained Models and Downstream Tasks for Source Code Understanding.,ICSE-2022-27,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510062,10.1145/3510003.3510062,12
BugListener: Identifying and Synthesizing Bug Reports from Collaborative Live Chats.,ICSE-2022-28,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510108;https://ieeexplore.ieee.org/document/9793897,10.1145/3510003.3510108,13
Buildsheriff: Change-Aware Test Failure Triage for Continuous Integration Builds.,ICSE-2022-29,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510132;https://ieeexplore.ieee.org/document/9793896,10.1145/3510003.3510132,13
Causality in Configurable Software Systems.,ICSE-2022-30,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510200,10.1145/3510003.3510200,13
Causality-Based Neural Network Repair.,ICSE-2022-31,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510080,10.1145/3510003.3510080,12
Change Is the Only Constant: Dynamic Updates for Workflows.,ICSE-2022-32,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510065;https://ieeexplore.ieee.org/document/9793884,10.1145/3510003.3510065,13
Characterizing and Detecting Bugs in WeChat Mini-Programs.,ICSE-2022-33,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510114,10.1145/3510003.3510114,13
CLEAR: Contrastive Learning for API Recommendation.,ICSE-2022-34,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510159,10.1145/3510003.3510159,12
Code Search based on Context-aware Code Translation.,ICSE-2022-35,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510140,10.1145/3510003.3510140,13
CodeFill: Multi-token Code Completion by Jointly learning from Structure and Naming Sequences.,ICSE-2022-36,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510172,10.1145/3510003.3510172,12
Collaboration Challenges in Building ML-Enabled Systems: Communication, Documentation, Engineering, and Process.,ICSE-2022-37,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510209,10.1145/3510003.3510209,13
Combinatorial Testing of RESTful APIs.,ICSE-2022-38,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510151,10.1145/3510003.3510151,12
CONFETTI: Amplifying Concolic Guidance for Fuzzers.,ICSE-2022-39,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510628,10.1145/3510003.3510628,13
Conflict-aware Inference of Python Compatible Runtime Environments with Domain Knowledge Graph.,ICSE-2022-40,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510078,10.1145/3510003.3510078,11
Control Parameters Considered Harmful: Detecting Range Specification Bugs in Drone Configuration Modules via Learning-Guided Search.,ICSE-2022-41,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510084,10.1145/3510003.3510084,12
Controlled Concurrency Testing via Periodical Scheduling.,ICSE-2022-42,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510178;https://ieeexplore.ieee.org/document/9793865,10.1145/3510003.3510178,13
Cross-Domain Deep Code Search with Meta Learning.,ICSE-2022-43,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510125,10.1145/3510003.3510125,12
Data-Driven Loop Bound Learning for Termination Analysis.,ICSE-2022-44,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510220,10.1145/3510003.3510220,12
DEAR: A Novel Deep Learning-based Approach for Automated Program Repair.,ICSE-2022-45,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510177;https://ieeexplore.ieee.org/document/9793900,10.1145/3510003.3510177,13
Decomposing Convolutional Neural Networks into Reusable and Replaceable Modules.,ICSE-2022-46,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510051;https://ieeexplore.ieee.org/document/9793875,10.1145/3510003.3510051,12
Decomposing Software Verification into Off-the-Shelf Components: An Application to CEGAR.,ICSE-2022-47,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510064;https://ieeexplore.ieee.org/document/9793863,10.1145/3510003.3510064,13
DeepAnalyze: Learning to Localize Crashes at Scale.,ICSE-2022-48,ICSE,2022,2022,https://doi.org/10.1145/3510003.3512759,10.1145/3510003.3512759,12
DeepDiagnosis: Automatically Diagnosing Faults and Recommending Actionable Fixes in Deep Learning Programs.,ICSE-2022-49,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510071,10.1145/3510003.3510071,12
DeepFD: Automated Fault Diagnosis and Localization for Deep Learning Programs.,ICSE-2022-50,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510099,10.1145/3510003.3510099,13
DeepStability: A Study of Unstable Numerical Methods and Their Solutions in Deep Learning.,ICSE-2022-51,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510095,10.1145/3510003.3510095,12
DeepState: Selecting Test Suites to Enhance the Robustness of Recurrent Neural Networks.,ICSE-2022-52,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510231,10.1145/3510003.3510231,12
DeepSTL - From English Requirements to Signal Temporal Logic.,ICSE-2022-53,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510171,10.1145/3510003.3510171,13
DeepTraLog: Trace-Log Combined Microservice Anomaly Detection through Graph-based Deep Learning.,ICSE-2022-54,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510180,10.1145/3510003.3510180,12
Default: Mutual Information-based Crash Triage for Massive Crashes.,ICSE-2022-55,ICSE,2022,2022,https://doi.org/10.1145/3510003.3512760,10.1145/3510003.3512760,12
Demystifying Android Non-SDK APls: Measurement and Understanding.,ICSE-2022-56,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510045,10.1145/3510003.3510045,12
Demystifying the Dependency Challenge in Kernel Fuzzing.,ICSE-2022-57,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510126,10.1145/3510003.3510126,13
Demystifying the Vulnerability Propagation and Its Evolution via Dependency Trees in the NPM Ecosystem.,ICSE-2022-58,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510142,10.1145/3510003.3510142,13
DescribeCtx: Context-Aware Description Synthesis for Sensitive Behaviors in Mobile Apps.,ICSE-2022-59,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510058,10.1145/3510003.3510058,13
Detecting False Alarms from Automatic Static Analysis Tools: How Far are We?,ICSE-2022-60,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510214;https://ieeexplore.ieee.org/document/9793908,10.1145/3510003.3510214,12
"Did You Miss My Comment or What?" Understanding Toxicity in Open Source Discussions.,ICSE-2022-61,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510111,10.1145/3510003.3510111,13
Difuzer: Uncovering Suspicious Hidden Sensitive Operations in Android Apps.,ICSE-2022-62,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510135;https://ieeexplore.ieee.org/document/9793902,10.1145/3510003.3510135,13
Discovering Repetitive Code Changes in Python ML Systems.,ICSE-2022-63,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510225,10.1145/3510003.3510225,13
Domain-Specific Analysis of Mobile App Reviews Using Keyword-Assisted Topic Models.,ICSE-2022-64,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510201,10.1145/3510003.3510201,12
DrAsync: Identifying and Visualizing Anti-Patterns in Asynchronous JavaScript.,ICSE-2022-65,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510097,10.1145/3510003.3510097,12
Dynamic Update for Synthesized GR(1) Controllers.,ICSE-2022-66,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510054,10.1145/3510003.3510054,12
EAGLE: Creating Equivalent Graphs to Test Deep Learning Libraries.,ICSE-2022-67,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510165,10.1145/3510003.3510165,13
Efficient Online Testing for DNN-Enabled Systems using Surrogate-Assisted and Many-Objective Optimization.,ICSE-2022-68,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510188,10.1145/3510003.3510188,12
Eflect: Porting Energy-Aware Applications to Shared Environments.,ICSE-2022-69,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510145;https://ieeexplore.ieee.org/document/9793873,10.1145/3510003.3510145,12
EREBA: Black-box Energy Testing of Adaptive Neural Networks.,ICSE-2022-70,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510088,10.1145/3510003.3510088,12
Evaluating and Improving Neural Program-Smoothing-based Fuzzing.,ICSE-2022-71,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510089,10.1145/3510003.3510089,12
ExAIS: Executable AI Semantics.,ICSE-2022-72,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510112,10.1145/3510003.3510112,12
Explanation-Guided Fairness Testing through Genetic Algorithm.,ICSE-2022-73,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510137,10.1145/3510003.3510137,12
Exploiting Input Sanitization for Regex Denial of Service.,ICSE-2022-74,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510047,10.1145/3510003.3510047,13
FADATest: Fast and Adaptive Performance Regression Testing of Dynamic Binary Translation Systems.,ICSE-2022-75,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510169,10.1145/3510003.3510169,13
Fairness-aware Configuration of Machine Learning Libraries.,ICSE-2022-76,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510202,10.1145/3510003.3510202,12
Fairneuron: Improving Deep Neural Network Fairness with Adversary Games on Selective Neurons.,ICSE-2022-77,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510087,10.1145/3510003.3510087,13
Fast and Precise Application Code Analysis using a Partial Library.,ICSE-2022-78,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510046,10.1145/3510003.3510046,12
Fast Changeset-based Bug Localization with BERT.,ICSE-2022-79,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510042,10.1145/3510003.3510042,12
Fault Localization via Efficient Probabilistic Modeling of Program Semantics.,ICSE-2022-80,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510073;https://ieeexplore.ieee.org/document/9793888,10.1145/3510003.3510073,12
FIRA: Fine-Grained Graph-Based Code Change Representation for Automated Commit Message Generation.,ICSE-2022-81,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510069;https://ieeexplore.ieee.org/document/9793882,10.1145/3510003.3510069,12
FlakiMe: Laboratory-Controlled Test Flakiness Impact Assessment.,ICSE-2022-82,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510194,10.1145/3510003.3510194,13
Free Lunch for Testing: Fuzzing Deep-Learning Libraries from Open Source.,ICSE-2022-83,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510041,10.1145/3510003.3510041,13
Fuzzing Class Specifications.,ICSE-2022-84,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510120,10.1145/3510003.3510120,13
Garbage Collection Makes Rust Easier to Use: A Randomized Controlled Trial of the Bronze Garbage Collector.,ICSE-2022-85,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510107;https://ieeexplore.ieee.org/document/9793872,10.1145/3510003.3510107,12
Generating and Visualizing Trace Link Explanations.,ICSE-2022-86,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510129,10.1145/3510003.3510129,12
GIFdroid: Automated Replay of Visual Bug Reports for Android Apps.,ICSE-2022-87,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510048,10.1145/3510003.3510048,13
GitHub Sponsors: Exploring a New Way to Contribute to Open Source.,ICSE-2022-88,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510116,10.1145/3510003.3510116,12
GraphFuzz: Library API Fuzzing with Lifetime-aware Dataflow Graphs.,ICSE-2022-89,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510228;https://ieeexplore.ieee.org/document/9793910,10.1145/3510003.3510228,12
Green AI: Do Deep Learning Frameworks Have Different Costs?,ICSE-2022-90,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510221,10.1145/3510003.3510221,13
Guidelines for Assessing the Accuracy of Log Message Template Identification Techniques.,ICSE-2022-91,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510101,10.1145/3510003.3510101,12
Hashing It Out: A Survey of Programmers' Cannabis Usage, Perception, and Motivation.,ICSE-2022-92,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510156,10.1145/3510003.3510156,13
Hiding Critical Program Components via Ambiguous Translation.,ICSE-2022-93,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510139,10.1145/3510003.3510139,13
History-Driven Test Program Synthesis for JVM Testing.,ICSE-2022-94,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510059,10.1145/3510003.3510059,12
If a Human Can See It, So Should Your System: Reliability Requirements for Machine Vision Components.,ICSE-2022-95,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510109,10.1145/3510003.3510109,12
Imperative versus Declarative Collection Processing: An RCT on the Understandability of Traditional Loops versus the Stream API in Java.,ICSE-2022-96,ICSE,2022,2022,https://doi.org/10.1145/3510003.3519016,10.1145/3510003.3519016,12
Improving Fault Localization and Program Repair with Deep Semantic Features and Transferred Knowledge.,ICSE-2022-97,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510147,10.1145/3510003.3510147,12
Improving Machine Translation Systems via Isotopic Replacement.,ICSE-2022-98,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510206;https://ieeexplore.ieee.org/document/9793859,10.1145/3510003.3510206,12
Inference and Test Generation Using Program Invariants in Chemical Reaction Networks.,ICSE-2022-99,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510176,10.1145/3510003.3510176,13
Inferring and Applying Type Changes.,ICSE-2022-100,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510115,10.1145/3510003.3510115,13
Jigsaw: Large Language Models meet Program Synthesis.,ICSE-2022-101,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510203,10.1145/3510003.3510203,13
JuCify: A Step Towards Android Code Unification for Enhanced Static Analysis.,ICSE-2022-102,ICSE,2022,2022,https://doi.org/10.1145/3510003.3512766,10.1145/3510003.3512766,13
Knowledge-Based Environment Dependency Inference for Python Programs.,ICSE-2022-103,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510127,10.1145/3510003.3510127,12
Large-scale Security Measurements on the Android Firmware Ecosystem.,ICSE-2022-104,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510072,10.1145/3510003.3510072,12
Learning and Programming Challenges of Rust: A Mixed-Methods Study.,ICSE-2022-105,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510164,10.1145/3510003.3510164,13
Learning Probabilistic Models for Static Analysis Alarms.,ICSE-2022-106,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510098,10.1145/3510003.3510098,12
Learning to Recommend Method Names with Global Context.,ICSE-2022-107,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510154,10.1145/3510003.3510154,13
Learning to Reduce False Positives in Analytic Bug Detectors.,ICSE-2022-108,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510153,10.1145/3510003.3510153,10
Less is More: Supporting Developers in Vulnerability Detection during Code Review.,ICSE-2022-109,ICSE,2022,2022,https://doi.org/10.1145/3510003.3511560,10.1145/3510003.3511560,13
Lessons from Eight Years of Operational Data from a Continuous Integration Service: An Exploratory Case Study of CircleCI.,ICSE-2022-110,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510211,10.1145/3510003.3510211,13
Linear-time Temporal Logic guided Greybox Fuzzing.,ICSE-2022-111,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510082,10.1145/3510003.3510082,13
Log-based Anomaly Detection with Deep Learning: How Far Are We?,ICSE-2022-112,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510155,10.1145/3510003.3510155,12
Manas: Mining Software Repositories to Assist AutoML.,ICSE-2022-113,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510052,10.1145/3510003.3510052,13
Modeling Review History for Reviewer Recommendation: A Hypergraph Approach.,ICSE-2022-114,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510213;https://ieeexplore.ieee.org/document/9793876,10.1145/3510003.3510213,12
ModX: Binary Level Partially Imported Third-Party Library Detection via Program Modularization and Semantic Matching.,ICSE-2022-115,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510627;https://ieeexplore.ieee.org/document/9793894,10.1145/3510003.3510627,13
Morest: Model-based RESTful API Testing with Execution Feedback.,ICSE-2022-116,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510133,10.1145/3510003.3510133,12
Muffin: Testing Deep Learning Libraries via Neural Architecture Fuzzing.,ICSE-2022-117,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510092,10.1145/3510003.3510092,13
Multi-Intention-Aware Configuration Selection for Performance Tuning.,ICSE-2022-118,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510094,10.1145/3510003.3510094,12
Multilingual training for Software Engineering.,ICSE-2022-119,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510049,10.1145/3510003.3510049,13
MVD: Memory-Related Vulnerability Detection Based on Flow-Sensitive Graph Neural Networks.,ICSE-2022-120,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510219,10.1145/3510003.3510219,13
Nalin: learning from Runtime Behavior to Find Name-Value Inconsistencies in Jupyter Notebooks.,ICSE-2022-121,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510144,10.1145/3510003.3510144,13
Natural Attack for Pre-trained Models of Code.,ICSE-2022-122,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510146,10.1145/3510003.3510146,12
Nessie: Automatically Testing JavaScript APIs with Asynchronous Callbacks.,ICSE-2022-123,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510106;https://ieeexplore.ieee.org/document/9793885,10.1145/3510003.3510106,12
Neural Program Repair with Execution-based Backpropagation.,ICSE-2022-124,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510222;https://ieeexplore.ieee.org/document/9793856,10.1145/3510003.3510222,13
NeuronFair: Interpretable White-Box Fairness Testing through Biased Neuron Identification.,ICSE-2022-125,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510123,10.1145/3510003.3510123,13
NPEX: Repairing Java Null Pointer Exceptions without Tests.,ICSE-2022-126,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510186,10.1145/3510003.3510186,13
Nufix: Escape From NuGet Dependency Maze.,ICSE-2022-127,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510118;https://ieeexplore.ieee.org/document/9793877,10.1145/3510003.3510118,13
OJXPERF: Featherlight Object Replica Detection for Java Programs.,ICSE-2022-128,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510083,10.1145/3510003.3510083,13
On Debugging the Performance of Configurable Software Systems: Developer Needs and Tailored Tool Support.,ICSE-2022-129,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510043,10.1145/3510003.3510043,13
On the Benefits and Limits of Incremental Build of Software Configurations: An Exploratory Study.,ICSE-2022-130,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510190;https://doi.org/10.1145/3510457.3513035,10.1145/3510457.3513035,13
On the Evaluation of Neural Code Summarization.,ICSE-2022-131,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510060,10.1145/3510003.3510060,12
On the Importance of Building High-quality Training Datasets for Neural Code Search.,ICSE-2022-132,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510160,10.1145/3510003.3510160,12
On the Reliability of Coverage-Based Fuzzer Benchmarking.,ICSE-2022-133,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510230,10.1145/3510003.3510230,13
One Fuzzing Strategy to Rule Them All.,ICSE-2022-134,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510174,10.1145/3510003.3510174,12
Online Summarizing Alerts through Semantic and Behavior Information.,ICSE-2022-135,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510055;https://ieeexplore.ieee.org/document/9793860,10.1145/3510003.3510055,12
Path Transitions Tell More: Optimizing Fuzzing Schedules via Runtime Program States.,ICSE-2022-136,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510063,10.1145/3510003.3510063,11
PerfSig: Extracting Performance Bug Signatures via Multi-modality Causal Analysis.,ICSE-2022-137,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510110;https://ieeexplore.ieee.org/document/9793858,10.1145/3510003.3510110,12
Practical Automated Detection of Malicious npm Packages.,ICSE-2022-138,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510104;https://ieeexplore.ieee.org/document/9793552,10.1145/3510003.3510104,12
Practitioners' Expectations on Automated Code Comment Generation.,ICSE-2022-139,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510152,10.1145/3510003.3510152,13
PREACH: A Heuristic for Probabilistic Reachability to Identify Hard to Reach Statements.,ICSE-2022-140,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510227,10.1145/3510003.3510227,12
Precise Divide-By-Zero Detection with Affirmative Evidence.,ICSE-2022-141,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510066,10.1145/3510003.3510066,12
Preempting Flaky Tests via Non-Idempotent-Outcome Tests.,ICSE-2022-142,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510170;https://ieeexplore.ieee.org/document/9793904,10.1145/3510003.3510170,13
Prioritizing Mutants to Guide Mutation Testing.,ICSE-2022-143,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510187,10.1145/3510003.3510187,12
PROMAL: Precise Window Transition Graphs for Android via Synergy of Program Analysis and Machine Learning.,ICSE-2022-144,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510037,10.1145/3510003.3510037,13
PROPR: Property-Based Automatic Program Repair.,ICSE-2022-145,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510620,10.1145/3510003.3510620,13
PUS: A Fast and Highly Efficient Solver for Inclusion-based Pointer Analysis.,ICSE-2022-146,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510075,10.1145/3510003.3510075,12
Push-Button Synthesis of Watch Companions for Android Apps.,ICSE-2022-147,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510056,10.1145/3510003.3510056,12
Quantifying Permissiveness of Access Control Policies.,ICSE-2022-148,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510233,10.1145/3510003.3510233,13
R2Z2: Detecting Rendering Regressions in Web Browsers through Differential Fuzz Testing.,ICSE-2022-149,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510044,10.1145/3510003.3510044,12
Recommending Good First Issues in GitHub OSS Projects.,ICSE-2022-150,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510196,10.1145/3510003.3510196,13
REFTY: Refinement Types for Valid Deep Learning Models.,ICSE-2022-151,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510077,10.1145/3510003.3510077,13
ReMoS: Reducing Defect Inheritance in Transfer Learning via Relevant Model Slicing.,ICSE-2022-152,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510191;https://ieeexplore.ieee.org/document/9793881,10.1145/3510003.3510191,13
Repairing Brain-Computer Interfaces with Fault-Based Data Acquisition.,ICSE-2022-153,ICSE,2022,2022,https://doi.org/10.1145/3510003.3512764,10.1145/3510003.3512764,12
Repairing Order-Dependent Flaky Tests via Test Generation.,ICSE-2022-154,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510173,10.1145/3510003.3510173,12
Retrieving Data Constraint Implementations Using Fine-Grained Code Patterns.,ICSE-2022-155,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510167,10.1145/3510003.3510167,13
RoPGen: Towards Robust Code Authorship Attribution via Automatic Coding Style Transformation.,ICSE-2022-156,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510181,10.1145/3510003.3510181,13
Rotten Apples Spoil the Bunch: An Anatomy of Google Play Malware.,ICSE-2022-157,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510161,10.1145/3510003.3510161,13
SAPIENTML: Synthesizing Machine Learning Pipelines by Learning from Human-Written Solutions.,ICSE-2022-158,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510226,10.1145/3510003.3510226,13
Search-based Diverse Sampling from Real-world Software Product Lines.,ICSE-2022-159,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510053,10.1145/3510003.3510053,13
Semantic Image Fuzzing of AI Perception Systems.,ICSE-2022-160,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510212,10.1145/3510003.3510212,12
ShellFusion: Answer Generation for Shell Programming Tasks via Knowledge Fusion.,ICSE-2022-161,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510131,10.1145/3510003.3510131,12
SnR: Constraint-Based Type Inference for Incomplete Java Code Snippets.,ICSE-2022-162,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510061,10.1145/3510003.3510061,12
Social Science Theories in Software Engineering Research.,ICSE-2022-163,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510076,10.1145/3510003.3510076,12
Static Inference Meets Deep learning: A Hybrid Type Inference Approach for Python.,ICSE-2022-164,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510038,10.1145/3510003.3510038,12
Static Stack-Preserving Intra-Procedural Slicing of WebAssembly Binaries.,ICSE-2022-165,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510070,10.1145/3510003.3510070,12
Striking a Balance: Pruning False-Positives from Static Call Graphs.,ICSE-2022-166,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510166,10.1145/3510003.3510166,13
SugarC: Scalable Desugaring of Real-World Preprocessor Usage into Pure C.,ICSE-2022-167,ICSE,2022,2022,https://doi.org/10.1145/3510003.3512763,10.1145/3510003.3512763,12
SYMTUNER: Maximizing the Power of Symbolic Execution by Adaptively Tuning External Parameters.,ICSE-2022-168,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510185,10.1145/3510003.3510185,12
Testing Time Limits in Screener Questions for Online Surveys with Programmers.,ICSE-2022-169,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510223,10.1145/3510003.3510223,11
The Art and Practice of Data Science Pipelines: A Comprehensive Study of Data Science Pipelines In Theory, In-The-Small, and In-The-Large.,ICSE-2022-170,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510057;https://ieeexplore.ieee.org/document/9793883,10.1145/3510003.3510057,13
The Extent of Orphan Vulnerabilities from Code Reuse in Open Source Software.,ICSE-2022-171,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510216,10.1145/3510003.3510216,12
"This Is Damn Slick!" Estimating the Impact of Tweets on Open Source Project Popularity and New Contributors.,ICSE-2022-172,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510121,10.1145/3510003.3510121,14
TOGA: A Neural Method for Test Oracle Generation.,ICSE-2022-173,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510141,10.1145/3510003.3510141,12
Towards Automatically Repairing Compatibility Issues in Published Android Apps.,ICSE-2022-174,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510128,10.1145/3510003.3510128,12
Towards Bidirectional Live Programming for Incomplete Programs.,ICSE-2022-175,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510195,10.1145/3510003.3510195,11
Towards Boosting Patch Execution On-the-Fly.,ICSE-2022-176,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510117,10.1145/3510003.3510117,12
Towards language-independent Brown Build Detection.,ICSE-2022-177,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510122,10.1145/3510003.3510122,12
Towards Practical Robustness Analysis for DNNs based on PAC-Model Learning.,ICSE-2022-178,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510143,10.1145/3510003.3510143,13
Towards Training Reproducible Deep Learning Models.,ICSE-2022-179,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510163,10.1145/3510003.3510163,13
Training Data Debugging for the Fairness of Machine Learning Software.,ICSE-2022-180,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510091,10.1145/3510003.3510091,13
Trust Enhancement Issues in Program Repair.,ICSE-2022-181,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510040,10.1145/3510003.3510040,13
Type4Py: Practical Deep Similarity Learning-Based Type Inference for Python.,ICSE-2022-182,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510124,10.1145/3510003.3510124,12
Unleashing the Power of Compiler Intermediate Representation to Enhance Neural Program Embeddings.,ICSE-2022-183,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510217,10.1145/3510003.3510217,13
Use of Test Doubles in Android Testing: An In-Depth Investigation.,ICSE-2022-184,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510175,10.1145/3510003.3510175,13
Using Deep Learning to Generate Complete Log Statements.,ICSE-2022-185,ICSE,2022,2022,https://doi.org/10.1145/3510003.3511561,10.1145/3510003.3511561,12
Using Pre-Trained Models to Boost Code Review Automation.,ICSE-2022-186,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510621,10.1145/3510003.3510621,12
Using Reinforcement Learning for Load Testing of Video Games.,ICSE-2022-187,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510625,10.1145/3510003.3510625,12
Utilizing Parallelism in Smart Contracts on Decentralized Blockchains by Taming Application-Inherent Conflicts.,ICSE-2022-188,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510086;https://ieeexplore.ieee.org/document/9793889,10.1145/3510003.3510086,12
VarCLR: Variable Semantic Representation Pre-training via Contrastive Learning.,ICSE-2022-189,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510162,10.1145/3510003.3510162,13
Verification of ORM-based Controllers by Summary Inference.,ICSE-2022-190,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510148,10.1145/3510003.3510148,12
V-SZZ: Automatic Identification of Version Ranges Affected by CVE Vulnerabilities.,ICSE-2022-191,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510113,10.1145/3510003.3510113,13
VulCNN: An Image-inspired Scalable Vulnerability Detection System.,ICSE-2022-192,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510229;https://ieeexplore.ieee.org/document/9793871,10.1145/3510003.3510229,12
What Do They Capture? - A Structural Analysis of Pre-Trained Language Models for Source Code.,ICSE-2022-193,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510050,10.1145/3510003.3510050,12
What Makes a Good Commit Message?,ICSE-2022-194,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510205,10.1145/3510003.3510205,13
What Makes Effective Leadership in Agile Software Development Teams?,ICSE-2022-195,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510100,10.1145/3510003.3510100,13
What the Fork? Finding Hidden Code Clones in npm.,ICSE-2022-196,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510168,10.1145/3510003.3510168,12
Where is Your App Frustrating Users?,ICSE-2022-197,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510189;https://ieeexplore.ieee.org/document/9793551,10.1145/3510003.3510189,13
Windranger: A Directed Greybox Fuzzer driven by Deviation Basic Blocks.,ICSE-2022-198,ICSE,2022,2022,https://doi.org/10.1145/3510003.3510197,10.1145/3510003.3510197,12
Systematically testing background services of mobile apps.,ASE-2017-3,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115613;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115613;http://dl.acm.org/citation.cfm?id=3155568,10.1109/ASE.2017.8115613,12
Crowd intelligence enhances automated mobile testing.,ASE-2017-4,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115614;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115614;http://dl.acm.org/citation.cfm?id=3155569,10.1109/ASE.2017.8115614,11
EHBDroid: beyond GUI testing for Android applications.,ASE-2017-5,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115615;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115615;http://dl.acm.org/citation.cfm?id=3155570,10.1109/ASE.2017.8115615,11
Sketch-guided GUI test generation for mobile applications.,ASE-2017-6,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115616;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115616;http://dl.acm.org/citation.cfm?id=3155571,10.1109/ASE.2017.8115616,6
Saying 'hi!' is not enough: mining inputs for effective test generation.,ASE-2017-7,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115617;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115617;http://dl.acm.org/citation.cfm?id=3155572,10.1109/ASE.2017.8115617,6
Learn&Fuzz: machine learning for input fuzzing.,ASE-2017-8,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115618;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115618;http://dl.acm.org/citation.cfm?id=3155573,10.1109/ASE.2017.8115618,10
The impact of continuous integration on other software development practices: a large-scale empirical study.,ASE-2017-9,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115619;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115619;http://dl.acm.org/citation.cfm?id=3155575,10.1109/ASE.2017.8115619,12
Perceived language complexity in GitHub issue discussions and their effect on issue resolution.,ASE-2017-10,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115620;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115620;http://dl.acm.org/citation.cfm?id=3155576,10.1109/ASE.2017.8115620,12
Can automated pull requests encourage software developers to upgrade out-of-date dependencies?,ASE-2017-11,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115621;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115621;http://dl.acm.org/citation.cfm?id=3155577,10.1109/ASE.2017.8115621,11
Are developers aware of the architectural impact of their changes?,ASE-2017-12,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115622;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115622;http://dl.acm.org/citation.cfm?id=3155578,10.1109/ASE.2017.8115622,11
SentiCR: a customized sentiment analysis tool for code review interactions.,ASE-2017-13,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115623;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115623;http://dl.acm.org/citation.cfm?id=3155579,10.1109/ASE.2017.8115623,6
Detecting fragile comments.,ASE-2017-14,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115624;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115624;http://dl.acm.org/citation.cfm?id=3155581,10.1109/ASE.2017.8115624,11
Improving software text retrieval using conceptual knowledge in source code.,ASE-2017-15,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115625;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115625;http://dl.acm.org/citation.cfm?id=3155582,10.1109/ASE.2017.8115625,12
Automatically generating commit messages from diffs using neural machine translation.,ASE-2017-16,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115626;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115626;http://dl.acm.org/citation.cfm?id=3155583,10.1109/ASE.2017.8115626,12
Improving missing issue-commit link recovery using positive and unlabeled data.,ASE-2017-17,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115627;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115627;http://dl.acm.org/citation.cfm?id=3155584,10.1109/ASE.2017.8115627,6
APIBot: question answering bot for API documentation.,ASE-2017-18,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115628;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115628;http://dl.acm.org/citation.cfm?id=3155585,10.1109/ASE.2017.8115628,6
Automatic summarization of API reviews.,ASE-2017-19,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115629;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115629;http://dl.acm.org/citation.cfm?id=3155586,10.1109/ASE.2017.8115629,12
iCoq: regression proof selection for large-scale verification projects.,ASE-2017-20,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115630;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115630;http://dl.acm.org/citation.cfm?id=3155588,10.1109/ASE.2017.8115630,12
More effective interpolations in software model checking.,ASE-2017-21,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115631;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115631;http://dl.acm.org/citation.cfm?id=3155589,10.1109/ASE.2017.8115631,11
Proof-based coverage metrics for formal verification.,ASE-2017-22,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115632;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115632;http://dl.acm.org/citation.cfm?id=3155590,10.1109/ASE.2017.8115632,6
Model checker execution reports.,ASE-2017-23,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115633;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115633;http://dl.acm.org/citation.cfm?id=3155591,10.1109/ASE.2017.8115633,6
Modular verification of interrupt-driven software.,ASE-2017-24,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115634;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115634;http://dl.acm.org/citation.cfm?id=3155592,10.1109/ASE.2017.8115634,11
BProVe: a formal verification framework for business process models.,ASE-2017-25,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115635;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115635;http://dl.acm.org/citation.cfm?id=3155593,10.1109/ASE.2017.8115635,12
Static detection of asymptotic resource side-channel vulnerabilities in web applications.,ASE-2017-26,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115636;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115636;http://dl.acm.org/citation.cfm?id=3155595,10.1109/ASE.2017.8115636,11
PAD: programming third-party web advertisement censorship.,ASE-2017-27,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115637;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115637;http://dl.acm.org/citation.cfm?id=3155596,10.1109/ASE.2017.8115637,12
All about activity injection: threats, semantics, and detection.,ASE-2017-28,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115638;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115638;http://dl.acm.org/citation.cfm?id=3155597,10.1109/ASE.2017.8115638,11
Detecting information flow by mutating input data.,ASE-2017-29,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115639;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115639;http://dl.acm.org/citation.cfm?id=3155598,10.1109/ASE.2017.8115639,11
Automatically assessing crashes from heap overflows.,ASE-2017-30,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115640;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115640;http://dl.acm.org/citation.cfm?id=3155599,10.1109/ASE.2017.8115640,6
Learning to share: engineering adaptive decision-support for online social networks.,ASE-2017-31,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115641;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115641;http://dl.acm.org/citation.cfm?id=3155600,10.1109/ASE.2017.8115641,6
UI driven Android application reduction.,ASE-2017-32,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115642;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115642;http://dl.acm.org/citation.cfm?id=3155602,10.1109/ASE.2017.8115642,11
SimplyDroid: efficient event sequence simplification for Android application.,ASE-2017-33,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115643;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115643;http://dl.acm.org/citation.cfm?id=3155603,10.1109/ASE.2017.8115643,11
Automated cross-platform inconsistency detection for mobile apps.,ASE-2017-34,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115644;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115644;http://dl.acm.org/citation.cfm?id=3155604,10.1109/ASE.2017.8115644,11
In-memory fuzzing for binary code similarity analysis.,ASE-2017-35,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115645;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115645;http://dl.acm.org/citation.cfm?id=3155606,10.1109/ASE.2017.8115645,12
DSIbin: identifying dynamic data structures in C/C++ binaries.,ASE-2017-36,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115646;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115646;http://dl.acm.org/citation.cfm?id=3155607,10.1109/ASE.2017.8115646,11
Towards robust instruction-level trace alignment of binary code.,ASE-2017-37,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115647;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115647;http://dl.acm.org/citation.cfm?id=3155608,10.1109/ASE.2017.8115647,11
Testing intermediate representations for binary analysis.,ASE-2017-38,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115648;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115648;http://dl.acm.org/citation.cfm?id=3155609,10.1109/ASE.2017.8115648,12
Comprehensive failure characterization.,ASE-2017-39,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115649;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115649;http://dl.acm.org/citation.cfm?id=3155611,10.1109/ASE.2017.8115649,12
TrEKer: tracing error propagation in operating system kernels.,ASE-2017-40,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115650;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115650;http://dl.acm.org/citation.cfm?id=3155612,10.1109/ASE.2017.8115650,11
RuntimeSearch: Ctrl+F for a running program.,ASE-2017-41,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115651;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115651;http://dl.acm.org/citation.cfm?id=3155613,10.1109/ASE.2017.8115651,6
Mining implicit design templates for actionable code reuse.,ASE-2017-42,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115652;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115652;http://dl.acm.org/citation.cfm?id=3155615,10.1109/ASE.2017.8115652,11
Exploring regular expression comprehension.,ASE-2017-43,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115653;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115653;http://dl.acm.org/citation.cfm?id=3155616,10.1109/ASE.2017.8115653,12
Automatically assessing code understandability: how far are we?,ASE-2017-44,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115654;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115654;http://dl.acm.org/citation.cfm?id=3155617,10.1109/ASE.2017.8115654,11
Improved query reformulation for concept location using CodeRank and document structures.,ASE-2017-45,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115655;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115655;http://dl.acm.org/citation.cfm?id=3155618,10.1109/ASE.2017.8115655,12
Understanding feature requests by leveraging fuzzy method and linguistic analysis.,ASE-2017-46,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115656;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115656;http://dl.acm.org/citation.cfm?id=3155619,10.1109/ASE.2017.8115656,11
O2O service composition with social collaboration.,ASE-2017-47,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115657;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115657;http://dl.acm.org/citation.cfm?id=3155621,10.1109/ASE.2017.8115657,11
Gremlin-ATL: a scalable model transformation framework.,ASE-2017-48,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115658;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115658;http://dl.acm.org/citation.cfm?id=3155622,10.1109/ASE.2017.8115658,11
Diagnosing assumption problems in safety-critical products.,ASE-2017-49,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115659;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115659;http://dl.acm.org/citation.cfm?id=3155623,10.1109/ASE.2017.8115659,12
Software performance self-adaptation through efficient model predictive control.,ASE-2017-50,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115660;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115660;http://dl.acm.org/citation.cfm?id=3155624,10.1109/ASE.2017.8115660,12
Transfer learning for performance modeling of configurable systems: an exploratory analysis.,ASE-2017-51,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115661;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115661;http://dl.acm.org/citation.cfm?id=3155625,10.1109/ASE.2017.8115661,12
A comprehensive study of real-world numerical bug characteristics.,ASE-2017-52,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115662;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115662;http://dl.acm.org/citation.cfm?id=3155627,10.1109/ASE.2017.8115662,11
A comprehensive study on real world concurrency bugs in Node.js.,ASE-2017-53,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115663;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115663;http://dl.acm.org/citation.cfm?id=3155628,10.1109/ASE.2017.8115663,12
Generating simpler AST edit scripts by considering copy-and-paste.,ASE-2017-54,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115664;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115664;http://dl.acm.org/citation.cfm?id=3155630,10.1109/ASE.2017.8115664,11
Renaming and shifted code in structured merging: looking ahead for precision and performance.,ASE-2017-55,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115665;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115665;http://dl.acm.org/citation.cfm?id=3155631,10.1109/ASE.2017.8115665,11
Semantics-assisted code review: an efficient toolchain and a user study.,ASE-2017-56,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115666;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115666;http://dl.acm.org/citation.cfm?id=3155632,10.1109/ASE.2017.8115666,12
Detecting unknown inconsistencies in web applications.,ASE-2017-57,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115667;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115667;http://dl.acm.org/citation.cfm?id=3155633,10.1109/ASE.2017.8115667,12
Why and how JavaScript developers use linters.,ASE-2017-58,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115668;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115668;http://dl.acm.org/citation.cfm?id=3155634,10.1109/ASE.2017.8115668,12
Automatic testing of symbolic execution engines via program generation and differential testing.,ASE-2017-59,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115669;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115669;http://dl.acm.org/citation.cfm?id=3155636,10.1109/ASE.2017.8115669,11
Floating-point symbolic execution: a case study in n-version programming.,ASE-2017-60,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115670;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115670;http://dl.acm.org/citation.cfm?id=3155637,10.1109/ASE.2017.8115670,12
Rethinking pointer reasoning in symbolic execution.,ASE-2017-61,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115671;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115671;http://dl.acm.org/citation.cfm?id=3155638,10.1109/ASE.2017.8115671,6
Leveraging abstract interpretation for efficient dynamic symbolic execution.,ASE-2017-62,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115672;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115672;http://dl.acm.org/citation.cfm?id=3155639,10.1109/ASE.2017.8115672,6
Tortoise: interactive system configuration repair.,ASE-2017-63,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115673;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115673;http://dl.acm.org/citation.cfm?id=3155641,10.1109/ASE.2017.8115673,12
Contract-based program repair without the contracts.,ASE-2017-64,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115674;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115674;http://dl.acm.org/citation.cfm?id=3155642,10.1109/ASE.2017.8115674,11
ELIXIR: effective object oriented program repair.,ASE-2017-65,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115675;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115675;http://dl.acm.org/citation.cfm?id=3155643,10.1109/ASE.2017.8115675,12
Leveraging syntax-related code for automated program repair.,ASE-2017-66,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115676;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115676;http://dl.acm.org/citation.cfm?id=3155644,10.1109/ASE.2017.8115676,11
Boosting complete-code tool for partial program.,ASE-2017-67,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115677;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115677;http://dl.acm.org/citation.cfm?id=3155646,10.1109/ASE.2017.8115677,11
A language model for statements of software code.,ASE-2017-68,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115678;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115678;http://dl.acm.org/citation.cfm?id=3155647,10.1109/ASE.2017.8115678,6
Context-aware integrated development environment command recommender systems.,ASE-2017-69,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115679;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115679;http://dl.acm.org/citation.cfm?id=3155648,10.1109/ASE.2017.8115679,6
Predicting relevance of change recommendations.,ASE-2017-70,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115680;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115680;http://dl.acm.org/citation.cfm?id=3155649,10.1109/ASE.2017.8115680,12
AnswerBot: automated generation of answer summary to developersź technical questions.,ASE-2017-71,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115681;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115681;http://dl.acm.org/citation.cfm?id=3155650,10.1109/ASE.2017.8115681,11
Recommending crowdsourced software developers in consideration of skill improvement.,ASE-2017-72,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115682;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115682;http://dl.acm.org/citation.cfm?id=3155651,10.1109/ASE.2017.8115682,6
The rise of the (modelling) bots: towards assisted modelling via social networks.,ASE-2017-73,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115683;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115683;http://dl.acm.org/citation.cfm?id=3155652,10.1109/ASE.2017.8115683,6
UNDEAD: detecting and preventing deadlocks in production software.,ASE-2017-74,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115684;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115684;http://dl.acm.org/citation.cfm?id=3155654,10.1109/ASE.2017.8115684,12
Promoting secondary orders of event pairs in randomized scheduling using a randomized stride.,ASE-2017-75,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115685;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115685;http://dl.acm.org/citation.cfm?id=3155655,10.1109/ASE.2017.8115685,12
Parallel bug-finding in concurrent programs via reduced interleaving instances.,ASE-2017-76,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115686;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115686;http://dl.acm.org/citation.cfm?id=3155656,10.1109/ASE.2017.8115686,12
Understanding and overcoming parallelism bottlenecks in ForkJoin applications.,ASE-2017-77,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115687;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115687;http://dl.acm.org/citation.cfm?id=3155657,10.1109/ASE.2017.8115687,11
Quick verification of concurrent programs by iteratively relaxed scheduling.,ASE-2017-78,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115688;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115688;http://dl.acm.org/citation.cfm?id=3155658,10.1109/ASE.2017.8115688,6
Automatic loop-invariant generation and refinement through selective sampling.,ASE-2017-79,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115689;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115689;http://dl.acm.org/citation.cfm?id=3155660,10.1109/ASE.2017.8115689,11
FiB: squeezing loop invariants by interpolation between Forward/Backward predicate transformers.,ASE-2017-80,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115690;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115690;http://dl.acm.org/citation.cfm?id=3155661,10.1109/ASE.2017.8115690,11
SymInfer: inferring program invariants using symbolic states.,ASE-2017-81,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115691;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115691;http://dl.acm.org/citation.cfm?id=3155662,10.1109/ASE.2017.8115691,11
Parsimony: an IDE for example-guided synthesis of lexers and parsers.,ASE-2017-82,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115692;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115692;http://dl.acm.org/citation.cfm?id=3155663,10.1109/ASE.2017.8115692,11
Mining constraints for event-based monitoring in systems of systems.,ASE-2017-83,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115693;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115693;http://dl.acm.org/citation.cfm?id=3155664,10.1109/ASE.2017.8115693,6
Programming bots by synthesizing natural language expressions into API invocations.,ASE-2017-84,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115694;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115694;http://dl.acm.org/citation.cfm?id=3155665,10.1109/ASE.2017.8115694,6
Test suite parallelization in open-source projects: a study on its usage and impact.,ASE-2017-85,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115695;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115695;http://dl.acm.org/citation.cfm?id=3155667,10.1109/ASE.2017.8115695,11
Systematic reduction of GUI test sequences.,ASE-2017-86,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115696;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115696;http://dl.acm.org/citation.cfm?id=3155668,10.1109/ASE.2017.8115696,12
Automatically reducing tree-structured test inputs.,ASE-2017-87,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115697;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115697;http://dl.acm.org/citation.cfm?id=3155669,10.1109/ASE.2017.8115697,11
Synthetic data generation for statistical testing.,ASE-2017-88,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115698;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115698;http://dl.acm.org/citation.cfm?id=3155670,10.1109/ASE.2017.8115698,11
SEALANT: a detection and visualization tool for inter-app security vulnerabilities in Android.,ASE-2017-89,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115699;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115699;http://dl.acm.org/citation.cfm?id=3155672,10.1109/ASE.2017.8115699,6
Visualization support for requirements monitoring in systems of systems.,ASE-2017-90,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115700;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115700;http://dl.acm.org/citation.cfm?id=3155673,10.1109/ASE.2017.8115700,6
A demonstration of simultaneous execution and editing in a development environment.,ASE-2017-91,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115701;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115701;http://dl.acm.org/citation.cfm?id=3155674,10.1109/ASE.2017.8115701,6
TREM: a tool for mining timed regular specifications from system traces.,ASE-2017-92,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115702;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115702;http://dl.acm.org/citation.cfm?id=3155675,10.1109/ASE.2017.8115702,6
ModelWriter: text and model-synchronized document engineering platform.,ASE-2017-93,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115703;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115703;http://dl.acm.org/citation.cfm?id=3155676,10.1109/ASE.2017.8115703,6
Incrementally slicing editable submodels.,ASE-2017-94,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115704;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115704;http://dl.acm.org/citation.cfm?id=3155677,10.1109/ASE.2017.8115704,6
DSSynth: an automated digital controller synthesis tool for physical plants.,ASE-2017-95,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115705;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115705;http://dl.acm.org/citation.cfm?id=3155678,10.1109/ASE.2017.8115705,6
A static analysis tool with optimizations for reachability determination.,ASE-2017-96,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115706;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115706;http://dl.acm.org/citation.cfm?id=3155680,10.1109/ASE.2017.8115706,6
CogniCrypt: supporting developers in using cryptography.,ASE-2017-97,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115707;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115707;http://dl.acm.org/citation.cfm?id=3155681,10.1109/ASE.2017.8115707,6
BProVe: tool support for business process verification.,ASE-2017-98,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115708;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115708;http://dl.acm.org/citation.cfm?id=3155682,10.1109/ASE.2017.8115708,6
taco: a tool to generate tensor algebra kernels.,ASE-2017-99,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115709;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115709;http://dl.acm.org/citation.cfm?id=3155683,10.1109/ASE.2017.8115709,6
STARTS: STAtic regression test selection.,ASE-2017-100,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115710;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115710;http://dl.acm.org/citation.cfm?id=3155684,10.1109/ASE.2017.8115710,6
EventFlowSlicer: a tool for generating realistic goal-driven GUI tests.,ASE-2017-101,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115711;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115711;http://dl.acm.org/citation.cfm?id=3155685,10.1109/ASE.2017.8115711,6
ANDROFLEET: testing WiFi peer-to-peer mobile apps in the large.,ASE-2017-102,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115712;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115712;http://dl.acm.org/citation.cfm?id=3155686,10.1109/ASE.2017.8115712,6
FEMIR: a tool for recommending framework extension examples.,ASE-2017-103,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115713;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115713;http://dl.acm.org/citation.cfm?id=3155688,10.1109/ASE.2017.8115713,6
Opiner: an opinion search and summarization engine for APIs.,ASE-2017-105,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115715;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115715;http://dl.acm.org/citation.cfm?id=3155690,10.1109/ASE.2017.8115715,6
Defaultification refactoring: a tool for automatically converting Java methods to default.,ASE-2017-106,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115716;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115716;http://dl.acm.org/citation.cfm?id=3155691,10.1109/ASE.2017.8115716,6
Kobold: web usability as a service.,ASE-2017-107,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115717;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115717;http://dl.acm.org/citation.cfm?id=3155692,10.1109/ASE.2017.8115717,6
IntPTI: automatic integer error repair with proper-type inference.,ASE-2017-108,ASE,2017,2017,https://doi.org/10.1109/ASE.2017.8115718;https://doi.ieeecomputersociety.org/10.1109/ASE.2017.8115718;http://dl.acm.org/citation.cfm?id=3155693,10.1109/ASE.2017.8115718,6
On adopting linters to deal with performance concerns in Android apps.,ASE-2018-4,ASE,2018,2018,https://doi.org/10.1145/3238147.3238197,10.1145/3238147.3238197,11
PerfLearner: learning from bug reports to understand and generate performance test frames.,ASE-2018-5,ASE,2018,2018,https://doi.org/10.1145/3238147.3238204,10.1145/3238147.3238204,12
AutoConfig: automatic configuration tuning for distributed message systems.,ASE-2018-6,ASE,2018,2018,https://doi.org/10.1145/3238147.3238175,10.1145/3238147.3238175,12
Is this class thread-safe? inferring documentation using graph-based learning.,ASE-2018-7,ASE,2018,2018,https://doi.org/10.1145/3238147.3238212,10.1145/3238147.3238212,12
A large-scale study of test coverage evolution.,ASE-2018-8,ASE,2018,2018,https://doi.org/10.1145/3238147.3238183,10.1145/3238147.3238183,11
Effectiveness and challenges in generating concurrent tests for thread-safe classes.,ASE-2018-9,ASE,2018,2018,https://doi.org/10.1145/3238147.3238224,10.1145/3238147.3238224,12
Scalable incremental building with dynamic task dependencies.,ASE-2018-10,ASE,2018,2018,https://doi.org/10.1145/3238147.3238196,10.1145/3238147.3238196,11
Noise and heterogeneity in historical build data: an empirical study of Travis CI.,ASE-2018-11,ASE,2018,2018,https://doi.org/10.1145/3238147.3238171,10.1145/3238147.3238171,11
Automated directed fairness testing.,ASE-2018-12,ASE,2018,2018,https://doi.org/10.1145/3238147.3238165,10.1145/3238147.3238165,11
Concolic testing for deep neural networks.,ASE-2018-13,ASE,2018,2018,https://doi.org/10.1145/3238147.3238172,10.1145/3238147.3238172,11
DeepGauge: multi-granularity testing criteria for deep learning systems.,ASE-2018-14,ASE,2018,2018,https://doi.org/10.1145/3238147.3238202,10.1145/3238147.3238202,12
DeepRoad: GAN-based metamorphic testing and input validation framework for autonomous driving systems.,ASE-2018-15,ASE,2018,2018,https://doi.org/10.1145/3238147.3238187,10.1145/3238147.3238187,11
Testing autonomous cars for feature interaction failures using many-objective search.,ASE-2018-16,ASE,2018,2018,https://doi.org/10.1145/3238147.3238192,10.1145/3238147.3238192,12
Tackling combinatorial explosion: a study of industrial needs and practices for analyzing highly configurable systems.,ASE-2018-17,ASE,2018,2018,https://doi.org/10.1145/3238147.3238201,10.1145/3238147.3238201,12
Understanding and detecting evolution-induced compatibility issues in Android apps.,ASE-2018-18,ASE,2018,2018,https://doi.org/10.1145/3238147.3238185,10.1145/3238147.3238185,11
Characterizing the natural language descriptions in software logging statements.,ASE-2018-19,ASE,2018,2018,https://doi.org/10.1145/3238147.3238193,10.1145/3238147.3238193,12
Assessing the type annotation burden.,ASE-2018-20,ASE,2018,2018,https://doi.org/10.1145/3238147.3238173,10.1145/3238147.3238173,12
Mining file histories: should we consider branches?,ASE-2018-21,ASE,2018,2018,https://doi.org/10.1145/3238147.3238169,10.1145/3238147.3238169,12
Tell them apart: distilling technology differences from crowd-scale comparison discussions.,ASE-2018-22,ASE,2018,2018,https://doi.org/10.1145/3238147.3238208,10.1145/3238147.3238208,11
ReScue: crafting regular expression DoS attacks.,ASE-2018-23,ASE,2018,2018,https://doi.org/10.1145/3238147.3238159,10.1145/3238147.3238159,11
TDroid: exposing app switching attacks in Android with control flow specialization.,ASE-2018-24,ASE,2018,2018,https://doi.org/10.1145/3238147.3238188,10.1145/3238147.3238188,12
Model-driven run-time enforcement of complex role-based access control policies.,ASE-2018-25,ASE,2018,2018,https://doi.org/10.1145/3238147.3238167,10.1145/3238147.3238167,11
ContractFuzzer: fuzzing smart contracts for vulnerability detection.,ASE-2018-26,ASE,2018,2018,https://doi.org/10.1145/3238147.3238177,10.1145/3238147.3238177,11
SEEDE: simultaneous execution and editing in a development environment.,ASE-2018-27,ASE,2018,2018,https://doi.org/10.1145/3238147.3238182,10.1145/3238147.3238182,12
Effective API recommendation without historical software repositories.,ASE-2018-28,ASE,2018,2018,https://doi.org/10.1145/3238147.3238216,10.1145/3238147.3238216,11
API method recommendation without worrying about the task-API knowledge gap.,ASE-2018-29,ASE,2018,2018,https://doi.org/10.1145/3238147.3238191,10.1145/3238147.3238191,12
An automated approach to estimating code coverage measures via execution logs.,ASE-2018-30,ASE,2018,2018,https://doi.org/10.1145/3238147.3238214,10.1145/3238147.3238214,12
How many of all bugs do we find? a study of static bug detectors.,ASE-2018-31,ASE,2018,2018,https://doi.org/10.1145/3238147.3238213,10.1145/3238147.3238213,12
TRIMMER: application specialization for code debloating.,ASE-2018-32,ASE,2018,2018,https://doi.org/10.1145/3238147.3238160,10.1145/3238147.3238160,11
A unified lattice model and framework for purity analyses.,ASE-2018-33,ASE,2018,2018,https://doi.org/10.1145/3238147.3238226,10.1145/3238147.3238226,11
Control flow-guided SMT solving for program verification.,ASE-2018-34,ASE,2018,2018,https://doi.org/10.1145/3238147.3238218,10.1145/3238147.3238218,11
PaMpeR: proof method recommendation system for Isabelle/HOL.,ASE-2018-35,ASE,2018,2018,https://doi.org/10.1145/3238147.3238210,10.1145/3238147.3238210,11
Neural-machine-translation-based commit message generation: how far are we?,ASE-2018-36,ASE,2018,2018,https://doi.org/10.1145/3238147.3238190,10.1145/3238147.3238190,12
Deep learning based feature envy detection.,ASE-2018-37,ASE,2018,2018,https://doi.org/10.1145/3238147.3238166,10.1145/3238147.3238166,12
Improving automatic source code summarization via deep reinforcement learning.,ASE-2018-38,ASE,2018,2018,https://doi.org/10.1145/3238147.3238206,10.1145/3238147.3238206,11
Template-guided concolic testing via online learning.,ASE-2018-39,ASE,2018,2018,https://doi.org/10.1145/3238147.3238227,10.1145/3238147.3238227,11
Android testing via synthetic symbolic execution.,ASE-2018-40,ASE,2018,2018,https://doi.org/10.1145/3238147.3238225,10.1145/3238147.3238225,11
PARTI: a multi-interval theory solver for symbolic execution.,ASE-2018-41,ASE,2018,2018,https://doi.org/10.1145/3238147.3238179,10.1145/3238147.3238179,11
Client-specific equivalence checking.,ASE-2018-42,ASE,2018,2018,https://doi.org/10.1145/3238147.3238178,10.1145/3238147.3238178,11
Replay without recording of production bugs for service oriented applications.,ASE-2018-43,ASE,2018,2018,https://doi.org/10.1145/3238147.3238186,10.1145/3238147.3238186,12
Reducing interactive refactoring effort via clustering-based multi-objective search.,ASE-2018-44,ASE,2018,2018,https://doi.org/10.1145/3238147.3238217,10.1145/3238147.3238217,11
FairFuzz: a targeted mutation strategy for increasing greybox fuzz testing coverage.,ASE-2018-45,ASE,2018,2018,https://doi.org/10.1145/3238147.3238176,10.1145/3238147.3238176,11
Efficiently manifesting asynchronous programming errors in Android apps.,ASE-2018-46,ASE,2018,2018,https://doi.org/10.1145/3238147.3238170,10.1145/3238147.3238170,12
Expandable group identification in spreadsheets.,ASE-2018-47,ASE,2018,2018,https://doi.org/10.1145/3238147.3238222,10.1145/3238147.3238222,11
Break the dead end of dynamic slicing: localizing data and control omission bug.,ASE-2018-48,ASE,2018,2018,https://doi.org/10.1145/3238147.3238163,10.1145/3238147.3238163,11
A genetic algorithm for goal-conflict identification.,ASE-2018-49,ASE,2018,2018,https://doi.org/10.1145/3238147.3238220,10.1145/3238147.3238220,12
Understanding and detecting callback compatibility issues for Android applications.,ASE-2018-50,ASE,2018,2018,https://doi.org/10.1145/3238147.3238181,10.1145/3238147.3238181,11
Detecting and summarizing GUI changes in evolving mobile apps.,ASE-2018-51,ASE,2018,2018,https://doi.org/10.1145/3238147.3238203,10.1145/3238147.3238203,11
Empirically assessing opportunities for prefetching and caching in mobile apps.,ASE-2018-52,ASE,2018,2018,https://doi.org/10.1145/3238147.3238215,10.1145/3238147.3238215,11
Safe stream-based programming with refinement types.,ASE-2018-53,ASE,2018,2018,https://doi.org/10.1145/3238147.3238174,10.1145/3238147.3238174,12
Automated model repair for Alloy.,ASE-2018-54,ASE,2018,2018,https://doi.org/10.1145/3238147.3238162,10.1145/3238147.3238162,12
PFix: fixing concurrency bugs based on memory access patterns.,ASE-2018-55,ASE,2018,2018,https://doi.org/10.1145/3238147.3238198,10.1145/3238147.3238198,12
Generating reusable web components from mockups.,ASE-2018-56,ASE,2018,2018,https://doi.org/10.1145/3238147.3238194,10.1145/3238147.3238194,11
Semantic crash bucketing.,ASE-2018-57,ASE,2018,2018,https://doi.org/10.1145/3238147.3238200,10.1145/3238147.3238200,11
A symbolic model checking approach to the analysis of string and length constraints.,ASE-2018-58,ASE,2018,2018,https://doi.org/10.1145/3238147.3238189,10.1145/3238147.3238189,11
Domain-independent multi-threaded software model checking.,ASE-2018-59,ASE,2018,2018,https://doi.org/10.1145/3238147.3238195,10.1145/3238147.3238195,11
Scheduling constraint based abstraction refinement for weak memory models.,ASE-2018-60,ASE,2018,2018,https://doi.org/10.1145/3238147.3238223,10.1145/3238147.3238223,11
Datalog-based scalable semantic diffing of concurrent programs.,ASE-2018-61,ASE,2018,2018,https://doi.org/10.1145/3238147.3238211,10.1145/3238147.3238211,11
αDiff: cross-version binary code similarity detection with DNN.,ASE-2018-62,ASE,2018,2018,https://doi.org/10.1145/3238147.3238199,10.1145/3238147.3238199,12
ClDiff: generating concise linked code differences.,ASE-2018-63,ASE,2018,2018,https://doi.org/10.1145/3238147.3238219,10.1145/3238147.3238219,12
Characterizing and identifying misexposed activities in Android applications.,ASE-2018-64,ASE,2018,2018,https://doi.org/10.1145/3238147.3238164,10.1145/3238147.3238164,11
A tale of two cities: how WebView induces bugs to Android applications.,ASE-2018-65,ASE,2018,2018,https://doi.org/10.1145/3238147.3238180,10.1145/3238147.3238180,12
Dual-force: understanding WebView malware via cross-language forced execution.,ASE-2018-66,ASE,2018,2018,https://doi.org/10.1145/3238147.3238221,10.1145/3238147.3238221,12
Self-protection of Android systems from inter-component communication attacks.,ASE-2018-67,ASE,2018,2018,https://doi.org/10.1145/3238147.3238207,10.1145/3238147.3238207,12
An empirical study of Android test generation tools in industrial cases.,ASE-2018-68,ASE,2018,2018,https://doi.org/10.1145/3238147.3240465,10.1145/3238147.3240465,11
Achieving test automation with testers without coding skills: an industrial report.,ASE-2018-69,ASE,2018,2018,https://doi.org/10.1145/3238147.3240463,10.1145/3238147.3240463,8
Navigating the maze: the impact of configurability in bioinformatics software.,ASE-2018-70,ASE,2018,2018,https://doi.org/10.1145/3238147.3240466,10.1145/3238147.3240466,11
Automatically testing implementations of numerical abstract domains.,ASE-2018-71,ASE,2018,2018,https://doi.org/10.1145/3238147.3240464,10.1145/3238147.3240464,11
Experiences applying automated architecture analysis tool suites.,ASE-2018-72,ASE,2018,2018,https://doi.org/10.1145/3238147.3240467,10.1145/3238147.3240467,11
Continuous code quality: are we (really) doing that?,ASE-2018-73,ASE,2018,2018,https://doi.org/10.1145/3238147.3240729,10.1145/3238147.3240729,6
RUDSEA: recommending updates of Dockerfiles via software environment analysis.,ASE-2018-74,ASE,2018,2018,https://doi.org/10.1145/3238147.3240470,10.1145/3238147.3240470,6
Delta debugging microservice systems.,ASE-2018-75,ASE,2018,2018,https://doi.org/10.1145/3238147.3240730,10.1145/3238147.3240730,6
Personalized teammate recommendation for crowdsourced software developers.,ASE-2018-76,ASE,2018,2018,https://doi.org/10.1145/3238147.3240472,10.1145/3238147.3240472,6
S-gram: towards semantic-aware security auditing for Ethereum smart contracts.,ASE-2018-77,ASE,2018,2018,https://doi.org/10.1145/3238147.3240728,10.1145/3238147.3240728,6
An evolutionary approach for analyzing Alloy specifications.,ASE-2018-78,ASE,2018,2018,https://doi.org/10.1145/3238147.3240468,10.1145/3238147.3240468,6
A neural framework for retrieval and summarization of source code.,ASE-2018-79,ASE,2018,2018,https://doi.org/10.1145/3238147.3240471,10.1145/3238147.3240471,6
An empirical investigation into learning bug-fixing patches in the wild via neural machine translation.,ASE-2018-80,ASE,2018,2018,https://doi.org/10.1145/3238147.3240732,10.1145/3238147.3240732,6
Loop path reduction by state pruning.,ASE-2018-81,ASE,2018,2018,https://doi.org/10.1145/3238147.3240731,10.1145/3238147.3240731,6
node2defect: using network embedding to improve software defect prediction.,ASE-2018-82,ASE,2018,2018,https://doi.org/10.1145/3238147.3240469,10.1145/3238147.3240469,6
Towards automating disambiguation of regulations: using the wisdom of crowds.,ASE-2018-83,ASE,2018,2018,https://doi.org/10.1145/3238147.3240727,10.1145/3238147.3240727,6
Assessing the Generalizability of Code2vec Token Embeddings.,ASE-2019-0,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00011,10.1109/ASE.2019.00011,12
Multi-modal Attention Network Learning for Semantic Source Code Retrieval.,ASE-2019-1,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00012,10.1109/ASE.2019.00012,13
Experience Paper: Search-Based Testing in Automated Driving Control Applications.,ASE-2019-2,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00013,10.1109/ASE.2019.00013,12
Test Transfer Across Mobile Apps Through Semantic Mapping.,ASE-2019-4,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00015,10.1109/ASE.2019.00015,12
Test Migration Between Mobile Apps with Similar Functionality.,ASE-2019-5,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00016,10.1109/ASE.2019.00016,12
DaPanda: Detecting Aggressive Push Notifications in Android Apps.,ASE-2019-6,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00017,10.1109/ASE.2019.00017,13
Automatic Self-Validation for Code Coverage Profilers.,ASE-2019-7,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00018,10.1109/ASE.2019.00018,12
Efficient Test Generation Guided by Field Coverage Criteria.,ASE-2019-8,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00019,10.1109/ASE.2019.00019,11
A Qualitative Analysis of Android Taint-Analysis Results.,ASE-2019-9,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00020,10.1109/ASE.2019.00020,13
Goal-Driven Exploration for Android Applications.,ASE-2019-10,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00021,10.1109/ASE.2019.00021,13
RANDR: Record and Replay for Android Applications via Targeted Runtime Instrumentation.,ASE-2019-11,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00022,10.1109/ASE.2019.00022,11
MalScan: Fast Market-Wide Mobile Malware Scanning by Social-Network Centrality Analysis.,ASE-2019-12,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00023,10.1109/ASE.2019.00023,12
Discovering, Explaining and Summarizing Controversial Discussions in Community Q&A Sites.,ASE-2019-13,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00024,10.1109/ASE.2019.00024,12
Automating App Review Response Generation.,ASE-2019-14,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00025,10.1109/ASE.2019.00025,13
Automatic Generation of Pull Request Descriptions.,ASE-2019-15,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00026,10.1109/ASE.2019.00026,13
Systematically Covering Input Structure.,ASE-2019-16,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00027,10.1109/ASE.2019.00027,11
SEGATE: Unveiling Semantic Inconsistencies between Code and Specification of String Inputs.,ASE-2019-17,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00028,10.1109/ASE.2019.00028,13
Detecting Error-Handling Bugs without Error Specification Input.,ASE-2019-18,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00029,10.1109/ASE.2019.00029,13
Emotions Extracted from Text vs. True Emotions-An Empirical Evaluation in SE Context.,ASE-2019-20,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00031,10.1109/ASE.2019.00031,13
Learning from Examples to Find Fully Qualified Names of API Elements in Code Snippets.,ASE-2019-21,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00032,10.1109/ASE.2019.00032,12
Inferring Program Transformations From Singular Examples via Big Code.,ASE-2019-22,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00033,10.1109/ASE.2019.00033,12
Performance-Boosting Sparsification of the IFDS Algorithm with Applications to Taint Analysis.,ASE-2019-23,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00034,10.1109/ASE.2019.00034,13
Characterizing Android App Signing Issues.,ASE-2019-24,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00035,10.1109/ASE.2019.00035,13
OAUTHLINT: An Empirical Study on OAuth Bugs in Android Applications.,ASE-2019-25,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00036,10.1109/ASE.2019.00036,12
History-Guided Configuration Diversification for Compiler Test-Program Generation.,ASE-2019-26,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00037,10.1109/ASE.2019.00037,12
ReduKtor: How We Stopped Worrying About Bugs in Kotlin Compiler.,ASE-2019-27,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00038,10.1109/ASE.2019.00038,10
Targeted Example Generation for Compilation Errors.,ASE-2019-28,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00039,10.1109/ASE.2019.00039,12
Understanding Exception-Related Bugs in Large-Scale Cloud Systems.,ASE-2019-29,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00040,10.1109/ASE.2019.00040,13
iFeedback: Exploiting User Feedback for Real-Time Issue Detection in Large-Scale Online Service Systems.,ASE-2019-30,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00041,10.1109/ASE.2019.00041,12
Continuous Incident Triage for Large-Scale Online Service Systems.,ASE-2019-31,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00042,10.1109/ASE.2019.00042,12
Apricot: A Weight-Adaptation Approach to Fixing Deep Learning Models.,ASE-2019-32,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00043,10.1109/ASE.2019.00043,12
Re-Factoring Based Program Repair Applied to Programming Assignments.,ASE-2019-33,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00044,10.1109/ASE.2019.00044,11
InFix: Automatically Repairing Novice Program Inputs.,ASE-2019-34,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00045,10.1109/ASE.2019.00045,12
Regexes are Hard: Decision-Making, Difficulties, and Risks in Programming Regular Expressions.,ASE-2019-36,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00047,10.1109/ASE.2019.00047,12
Testing Regex Generalizability And Its Implications: A Large-Scale Many-Language Measurement Study.,ASE-2019-37,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00048,10.1109/ASE.2019.00048,13
Accurate String Constraints Solution Counting with Weighted Automata.,ASE-2019-38,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00049,10.1109/ASE.2019.00049,13
Subformula Caching for Model Counting and Quantitative Program Analysis.,ASE-2019-39,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00050,10.1109/ASE.2019.00050,12
ACTGAN: Automatic Configuration Tuning for Software Systems with Generative Adversarial Networks.,ASE-2019-40,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00051,10.1109/ASE.2019.00051,12
V2: Fast Detection of Configuration Drift in Python.,ASE-2019-41,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00052,10.1109/ASE.2019.00052,12
Feature-Interaction Aware Configuration Prioritization for Configurable Code.,ASE-2019-42,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00053,10.1109/ASE.2019.00053,13
Combining Spectrum-Based Fault Localization and Statistical Debugging: An Empirical Study.,ASE-2019-43,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00054,10.1109/ASE.2019.00054,13
SCMiner: Localizing System-Level Concurrency Faults from Large System Call Traces.,ASE-2019-44,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00055,10.1109/ASE.2019.00055,12
Root Cause Localization for Unreproducible Builds via Causality Analysis Over System Call Tracing.,ASE-2019-45,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00056,10.1109/ASE.2019.00056,12
Mutation Analysis for Coq.,ASE-2019-46,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00057,10.1109/ASE.2019.00057,13
Verifying Arithmetic in Cryptographic C Programs.,ASE-2019-47,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00058,10.1109/ASE.2019.00058,13
Model Checking Embedded Control Software using OS-in-the-Loop CEGAR.,ASE-2019-48,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00059,10.1109/ASE.2019.00059,12
Get Rid of Inline Assembly through Verification-Oriented Lifting.,ASE-2019-49,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00060,10.1109/ASE.2019.00060,13
CodeKernel: A Graph Kernel Based Approach to the Selection of API Usage Examples.,ASE-2019-50,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00061,10.1109/ASE.2019.00061,12
Machine Learning Based Recommendation of Method Names: How Far are We.,ASE-2019-51,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00062,10.1109/ASE.2019.00062,13
MARBLE: Mining for Boilerplate Code to Identify API Usability Problems.,ASE-2019-52,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00063,10.1109/ASE.2019.00063,13
DIRE: A Neural Approach to Decompiled Identifier Naming.,ASE-2019-53,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00064,10.1109/ASE.2019.00064,12
Accurate Modeling of Performance Histories for Evolving Software Systems.,ASE-2019-54,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00065,10.1109/ASE.2019.00065,13
An Industrial Experience Report on Performance-Aware Refactoring on a Database-Centric Web Application.,ASE-2019-55,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00066,10.1109/ASE.2019.00066,12
An Experience Report of Generating Load Tests Using Log-Recovered Workloads at Varying Granularities of User Behaviour.,ASE-2019-57,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00068,10.1109/ASE.2019.00068,13
Predicting Licenses for Changed Source Code.,ASE-2019-59,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00070,10.1109/ASE.2019.00070,12
Empirical Evaluation of the Impact of Class Overlap on Software Defect Prediction.,ASE-2019-60,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00071,10.1109/ASE.2019.00071,12
Combining Program Analysis and Statistical Language Model for Code Statement Completion.,ASE-2019-61,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00072,10.1109/ASE.2019.00072,12
MAP-Coverage: A Novel Coverage Criterion for Testing Thread-Safe Classes.,ASE-2019-62,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00073,10.1109/ASE.2019.00073,13
Automating Non-Blocking Synchronization In Concurrent Data Abstractions.,ASE-2019-63,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00074,10.1109/ASE.2019.00074,13
Automating CUDA Synchronization via Program Transformation.,ASE-2019-64,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00075,10.1109/ASE.2019.00075,12
Efficient Transaction-Based Deterministic Replay for Multi-threaded Programs.,ASE-2019-65,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00076,10.1109/ASE.2019.00076,12
Wuji: Automatic Online Combat Game Testing Using Evolutionary Deep Reinforcement Learning.,ASE-2019-66,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00077,10.1109/ASE.2019.00077,13
A Study of Oracle Approximations in Testing Deep Learning Libraries.,ASE-2019-67,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00078,10.1109/ASE.2019.00078,12
Property Inference for Deep Neural Networks.,ASE-2019-68,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00079,10.1109/ASE.2019.00079,13
An Empirical Study Towards Characterizing Deep Learning Development and Deployment Across Different Frameworks and Platforms.,ASE-2019-69,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00080,10.1109/ASE.2019.00080,13
RefBot: Intelligent Software Refactoring Bot.,ASE-2019-70,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00081,10.1109/ASE.2019.00081,12
Automated Refactoring to Reactive Programming.,ASE-2019-71,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00082,10.1109/ASE.2019.00082,12
Statistical Log Differencing.,ASE-2019-73,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00084,10.1109/ASE.2019.00084,12
Logzip: Extracting Hidden Structures via Iterative Clustering for Log Compression.,ASE-2019-74,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00085,10.1109/ASE.2019.00085,11
Code-First Model-Driven Engineering: On the Agile Adoption of MDE Tooling.,ASE-2019-75,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00086,10.1109/ASE.2019.00086,13
Size and Accuracy in Model Inference.,ASE-2019-76,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00087,10.1109/ASE.2019.00087,12
Debreach: Mitigating Compression Side Channels via Static Analysis and Transformation.,ASE-2019-77,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00088,10.1109/ASE.2019.00088,13
Fine-Grain Memory Object Representation in Symbolic Execution.,ASE-2019-78,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00089,10.1109/ASE.2019.00089,12
RENN: Efficient Reverse Execution with Neural-Network-Assisted Alias Analysis.,ASE-2019-79,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00090,10.1109/ASE.2019.00090,12
Batch Alias Analysis.,ASE-2019-80,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00091,10.1109/ASE.2019.00091,13
Improving the Decision-Making Process of Self-Adaptive Systems by Accounting for Tactic Volatility.,ASE-2019-81,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00092,10.1109/ASE.2019.00092,13
Learning-Guided Network Fuzzing for Testing Cyber-Physical System Defences.,ASE-2019-82,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00093,10.1109/ASE.2019.00093,12
Cautious Adaptation of Defiant Components.,ASE-2019-83,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00094,10.1109/ASE.2019.00094,12
Active Hotspot: An Issue-Oriented Model to Monitor Software Evolution and Degradation.,ASE-2019-84,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00095,10.1109/ASE.2019.00095,12
The Impact of Structure on Software Merging: Semistructured Versus Structured Merge.,ASE-2019-86,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00097,10.1109/ASE.2019.00097,12
Semistructured Merge in JavaScript Systems.,ASE-2019-87,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00098,10.1109/ASE.2019.00098,12
CLCDSA: Cross Language Code Clone Detection using Syntactical Features and API Documentation.,ASE-2019-88,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00099,10.1109/ASE.2019.00099,12
B2SFinder: Detecting Open-Source Software Reuse in COTS Software.,ASE-2019-89,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00100,10.1109/ASE.2019.00100,12
CoRA: Decomposing and Describing Tangled Code Changes for Reviewer.,ASE-2019-90,ASE,2019,2019,https://doi.org/10.1109/ASE.2019.00101,10.1109/ASE.2019.00101,12
Accelerating All-SAT Computation with Short Blocking Clauses.,ASE-2020-2,ASE,2020,2020,https://doi.org/10.1145/3324884.3416569;https://ieeexplore.ieee.org/document/9286096,10.1145/3324884.3416569,12
A Predictive Analysis for Detecting Deadlock in MPI Programs.,ASE-2020-3,ASE,2020,2020,https://doi.org/10.1145/3324884.3416588;https://ieeexplore.ieee.org/document/9286122,10.1145/3324884.3416588,11
Learning to Handle Exceptions.,ASE-2020-4,ASE,2020,2020,https://doi.org/10.1145/3324884.3416568;https://ieeexplore.ieee.org/document/9286106,10.1145/3324884.3416568,13
BUILDFAST: History-Aware Build Outcome Prediction for Fast Feedback and Reduced Cost in Continuous Integration.,ASE-2020-5,ASE,2020,2020,https://doi.org/10.1145/3324884.3416616;https://ieeexplore.ieee.org/document/9286064,10.1145/3324884.3416616,12
LEGION: Best-First Concolic Testing.,ASE-2020-6,ASE,2020,2020,https://doi.org/10.1145/3324884.3416629;https://ieeexplore.ieee.org/document/9286123,10.1145/3324884.3416629,12
Plug the Database & Play With Automatic Testing: Improving System Testing by Exploiting Persistent Data.,ASE-2020-7,ASE,2020,2020,https://doi.org/10.1145/3324884.3416561;https://ieeexplore.ieee.org/document/9286121,10.1145/3324884.3416561,12
Enhanced Compiler Bug Isolation via Memoized Search.,ASE-2020-8,ASE,2020,2020,https://doi.org/10.1145/3324884.3416570;https://ieeexplore.ieee.org/document/9286013,10.1145/3324884.3416570,12
M3: Semantic API Migrations.,ASE-2020-9,ASE,2020,2020,https://doi.org/10.1145/3324884.3416618;https://ieeexplore.ieee.org/document/9286032,10.1145/3324884.3416618,13
The Impact of Generic Data Structures: Decoding the Role of Lists in the Linux Kernel.,ASE-2020-10,ASE,2020,2020,https://doi.org/10.1145/3324884.3416635;https://ieeexplore.ieee.org/document/9285995,10.1145/3324884.3416635,12
Pending Constraints in Symbolic Execution for Better Exploration and Seeding.,ASE-2020-11,ASE,2020,2020,https://doi.org/10.1145/3324884.3416589;https://ieeexplore.ieee.org/document/9286054,10.1145/3324884.3416589,12
Broadening Horizons of Multilingual Static Analysis: Semantic Summary Extraction from C Code for JNI Program Analysis.,ASE-2020-12,ASE,2020,2020,https://doi.org/10.1145/3324884.3416558;https://ieeexplore.ieee.org/document/9286029,10.1145/3324884.3416558,11
Assessing and Restoring Reproducibility of Jupyter Notebooks.,ASE-2020-13,ASE,2020,2020,https://doi.org/10.1145/3324884.3416585;https://ieeexplore.ieee.org/document/9286024,10.1145/3324884.3416585,12
Verified from Scratch: Program Analysis for Learners' Programs.,ASE-2020-14,ASE,2020,2020,https://doi.org/10.1145/3324884.3416554;https://ieeexplore.ieee.org/document/9286012,10.1145/3324884.3416554,13
Interval Change-Point Detection for Runtime Probabilistic Model Checking.,ASE-2020-15,ASE,2020,2020,https://doi.org/10.1145/3324884.3416565;https://ieeexplore.ieee.org/document/9286014,10.1145/3324884.3416565,12
UNCHARTIT: An Interactive Framework for Program Recovery from Charts.,ASE-2020-16,ASE,2020,2020,https://doi.org/10.1145/3324884.3416613;https://ieeexplore.ieee.org/document/9286067,10.1145/3324884.3416613,12
Demystifying Diehard Android Apps.,ASE-2020-17,ASE,2020,2020,https://doi.org/10.1145/3324884.3416637;https://ieeexplore.ieee.org/document/9286061,10.1145/3324884.3416637,12
UI Obfuscation and Its Effects on Automated UI Analysis for Android Apps.,ASE-2020-18,ASE,2020,2020,https://doi.org/10.1145/3324884.3416642;https://ieeexplore.ieee.org/document/9286129,10.1145/3324884.3416642,12
Good Things Come In Threes: Improving Search-based Crash Reproduction With Helper Objectives.,ASE-2020-19,ASE,2020,2020,https://doi.org/10.1145/3324884.3416643;https://ieeexplore.ieee.org/document/9285999,10.1145/3324884.3416643,13
Subdomain-Based Generality-Aware Debloating.,ASE-2020-20,ASE,2020,2020,https://doi.org/10.1145/3324884.3416644;https://ieeexplore.ieee.org/document/9286124,10.1145/3324884.3416644,13
Revisiting the Relationship Between Fault Detection, Test Adequacy Criteria, and Test Set Size.,ASE-2020-21,ASE,2020,2020,https://doi.org/10.1145/3324884.3416667;https://ieeexplore.ieee.org/document/9286102,10.1145/3324884.3416667,13
Synthesis of Infinite-State Systems with Random Behavior.,ASE-2020-22,ASE,2020,2020,https://doi.org/10.1145/3324884.3416586;https://ieeexplore.ieee.org/document/9286002,10.1145/3324884.3416586,12
Demystifying Loops in Smart Contracts.,ASE-2020-23,ASE,2020,2020,https://doi.org/10.1145/3324884.3416626;https://ieeexplore.ieee.org/document/9286008,10.1145/3324884.3416626,13
Patching as Translation: the Data and the Metaphor.,ASE-2020-24,ASE,2020,2020,https://doi.org/10.1145/3324884.3416587;https://ieeexplore.ieee.org/document/9286060,10.1145/3324884.3416587,12
DeepTC-Enhancer: Improving the Readability of Automatically Generated Tests.,ASE-2020-25,ASE,2020,2020,https://doi.org/10.1145/3324884.3416622;https://ieeexplore.ieee.org/document/9285992,10.1145/3324884.3416622,12
Hybrid Deep Neural Networks to Infer State Models of Black-Box Systems.,ASE-2020-26,ASE,2020,2020,https://doi.org/10.1145/3324884.3416559;https://ieeexplore.ieee.org/document/9286087,10.1145/3324884.3416559,13
Representing and Reasoning about Dynamic Code.,ASE-2020-27,ASE,2020,2020,https://doi.org/10.1145/3324884.3416542;https://ieeexplore.ieee.org/document/9286100,10.1145/3324884.3416542,12
ER Catcher: A Static Analysis Framework for Accurate and Scalable Event-Race Detection in Android.,ASE-2020-28,ASE,2020,2020,https://doi.org/10.1145/3324884.3416639;https://ieeexplore.ieee.org/document/9286059,10.1145/3324884.3416639,12
A Deep Multitask Learning Approach for Requirements Discovery and Annotation from Open Forum.,ASE-2020-29,ASE,2020,2020,https://doi.org/10.1145/3324884.3416627;https://ieeexplore.ieee.org/document/9286055,10.1145/3324884.3416627,13
Retrieve and Refine: Exemplar-based Neural Comment Generation.,ASE-2020-30,ASE,2020,2020,https://doi.org/10.1145/3324884.3416578;https://ieeexplore.ieee.org/document/9286005,10.1145/3324884.3416578,12
Where Shall We Log? Studying and Suggesting Logging Locations in Code Blocks.,ASE-2020-31,ASE,2020,2020,https://doi.org/10.1145/3324884.3416636;https://ieeexplore.ieee.org/document/9286119,10.1145/3324884.3416636,12
How Incidental are the Incidents? Characterizing and Prioritizing Incidents for Large-Scale Online Service Systems.,ASE-2020-32,ASE,2020,2020,https://doi.org/10.1145/3324884.3416624;https://ieeexplore.ieee.org/document/9286075,10.1145/3324884.3416624,12
Stay Professional and Efficient: Automatically Generate Titles for Your Bug Reports.,ASE-2020-33,ASE,2020,2020,https://doi.org/10.1145/3324884.3416538;https://ieeexplore.ieee.org/document/9285994,10.1145/3324884.3416538,13
Owl Eyes: Spotting UI Display Issues via Visual Understanding.,ASE-2020-34,ASE,2020,2020,https://doi.org/10.1145/3324884.3416547;https://ieeexplore.ieee.org/document/9286056,10.1145/3324884.3416547,12
Multiple-Boundary Clustering and Prioritization to Promote Neural Network Retraining.,ASE-2020-35,ASE,2020,2020,https://doi.org/10.1145/3324884.3416621;https://ieeexplore.ieee.org/document/9286133,10.1145/3324884.3416621,13
Marble: Model-based Robustness Analysis of Stateful Deep Learning Systems.,ASE-2020-36,ASE,2020,2020,https://doi.org/10.1145/3324884.3416564;https://ieeexplore.ieee.org/document/9286028,10.1145/3324884.3416564,13
MockSniffer: Characterizing and Recommending Mocking Decisions for Unit Tests.,ASE-2020-37,ASE,2020,2020,https://doi.org/10.1145/3324884.3416539;https://ieeexplore.ieee.org/document/9286134,10.1145/3324884.3416539,12
Defect Prediction Guided Search-Based Software Testing.,ASE-2020-38,ASE,2020,2020,https://doi.org/10.1145/3324884.3416612;https://ieeexplore.ieee.org/document/9286104,10.1145/3324884.3416612,13
API-Misuse Detection Driven by Fine-Grained API-Constraint Knowledge Graph.,ASE-2020-39,ASE,2020,2020,https://doi.org/10.1145/3324884.3416551;https://ieeexplore.ieee.org/document/9286105,10.1145/3324884.3416551,12
Multi-task Learning based Pre-trained Language Model for Code Completion.,ASE-2020-40,ASE,2020,2020,https://doi.org/10.1145/3324884.3416591;https://ieeexplore.ieee.org/document/9285991,10.1145/3324884.3416591,13
Audee: Automated Testing for Deep Learning Frameworks.,ASE-2020-41,ASE,2020,2020,https://doi.org/10.1145/3324884.3416571;https://ieeexplore.ieee.org/document/9286000,10.1145/3324884.3416571,13
Towards Interpreting Recurrent Neural Networks through Probabilistic Abstraction.,ASE-2020-42,ASE,2020,2020,https://doi.org/10.1145/3324884.3416592;https://ieeexplore.ieee.org/document/9286076,10.1145/3324884.3416592,12
Continuous Compliance.,ASE-2020-43,ASE,2020,2020,https://doi.org/10.1145/3324884.3416593;https://ieeexplore.ieee.org/document/9286069,10.1145/3324884.3416593,13
SADT: Syntax-Aware Differential Testing of Certificate Validation in SSL/TLS Implementations.,ASE-2020-44,ASE,2020,2020,https://doi.org/10.1145/3324884.3416552;https://ieeexplore.ieee.org/document/9286011,10.1145/3324884.3416552,12
CoFI: Consistency-Guided Fault Injection for Cloud Systems.,ASE-2020-45,ASE,2020,2020,https://doi.org/10.1145/3324884.3416548;https://ieeexplore.ieee.org/document/9286039,10.1145/3324884.3416548,12
ChemTest: An Automated Software Testing Framework for an Emerging Paradigm.,ASE-2020-46,ASE,2020,2020,https://doi.org/10.1145/3324884.3416638;https://ieeexplore.ieee.org/document/9286071,10.1145/3324884.3416638,13
Automatic Extraction of Cause-Effect-Relations from Requirements Artifacts.,ASE-2020-47,ASE,2020,2020,https://doi.org/10.1145/3324884.3416549;https://ieeexplore.ieee.org/document/9286079,10.1145/3324884.3416549,12
BiLO-CPDP: Bi-Level Programming for Automated Model Discovery in Cross-Project Defect Prediction.,ASE-2020-48,ASE,2020,2020,https://doi.org/10.1145/3324884.3416617;https://ieeexplore.ieee.org/document/9285660,10.1145/3324884.3416617,12
Automating Just-In-Time Comment Updating.,ASE-2020-49,ASE,2020,2020,https://doi.org/10.1145/3324884.3416581;https://ieeexplore.ieee.org/document/9286136,10.1145/3324884.3416581,13
Automated Implementation of Windows-related Security-Configuration Guides.,ASE-2020-50,ASE,2020,2020,https://doi.org/10.1145/3324884.3416540;https://ieeexplore.ieee.org/document/9285655,10.1145/3324884.3416540,13
Identifying Software Performance Changes Across Variants and Versions.,ASE-2020-51,ASE,2020,2020,https://doi.org/10.1145/3324884.3416573;https://ieeexplore.ieee.org/document/9285664,10.1145/3324884.3416573,12
CP-Detector: Using Configuration-related Performance Properties to Expose Performance Bugs.,ASE-2020-52,ASE,2020,2020,https://doi.org/10.1145/3324884.3416531;https://ieeexplore.ieee.org/document/9286052,10.1145/3324884.3416531,12
Just-In-Time Reactive Synthesis.,ASE-2020-53,ASE,2020,2020,https://doi.org/10.1145/3324884.3416557;https://ieeexplore.ieee.org/document/9286093,10.1145/3324884.3416557,12
JISET: JavaScript IR-based Semantics Extraction Toolchain.,ASE-2020-54,ASE,2020,2020,https://doi.org/10.1145/3324884.3416632;https://ieeexplore.ieee.org/document/9286074,10.1145/3324884.3416632,12
FlashRegex: Deducing Anti-ReDoS Regexes from Examples.,ASE-2020-55,ASE,2020,2020,https://doi.org/10.1145/3324884.3416556;https://ieeexplore.ieee.org/document/9286092,10.1145/3324884.3416556,13
Inferring and Applying Def-Use Like Configuration Couplings in Deployment Descriptors.,ASE-2020-56,ASE,2020,2020,https://doi.org/10.1145/3324884.3416577;https://ieeexplore.ieee.org/document/9286031,10.1145/3324884.3416577,12
Mastering Uncertainty in Performance Estimations of Configurable Software Systems.,ASE-2020-57,ASE,2020,2020,https://doi.org/10.1145/3324884.3416620;https://ieeexplore.ieee.org/document/9286072,10.1145/3324884.3416620,13
Team Discussions and Dynamics During DevOps Tool Adoptions in OSS Projects.,ASE-2020-58,ASE,2020,2020,https://doi.org/10.1145/3324884.3416640;https://ieeexplore.ieee.org/document/9285652,10.1145/3324884.3416640,12
TestMC: Testing Model Counters using Differential and Metamorphic Testing.,ASE-2020-59,ASE,2020,2020,https://doi.org/10.1145/3324884.3416563;https://ieeexplore.ieee.org/document/9286130,10.1145/3324884.3416563,13
BigFuzz: Efficient Fuzz Testing for Data Analytics Using Framework Abstraction.,ASE-2020-60,ASE,2020,2020,https://doi.org/10.1145/3324884.3416641;https://ieeexplore.ieee.org/document/9286115,10.1145/3324884.3416641,12
Scaling Client-Specific Equivalence Checking via Impact Boundary Search.,ASE-2020-61,ASE,2020,2020,https://doi.org/10.1145/3324884.3416634;https://ieeexplore.ieee.org/document/9285657,10.1145/3324884.3416634,12
Code to Comment "Translation": Data, Metrics, Baselining & Evaluation.,ASE-2020-62,ASE,2020,2020,https://doi.org/10.1145/3324884.3416546;https://ieeexplore.ieee.org/document/9286030,10.1145/3324884.3416546,12
Exploring the Architectural Impact of Possible Dependencies in Python Software.,ASE-2020-63,ASE,2020,2020,https://doi.org/10.1145/3324884.3416619;https://ieeexplore.ieee.org/document/9286085,10.1145/3324884.3416619,13
Problems and Opportunities in Training Deep Learning Software Systems: An Analysis of Variance.,ASE-2020-64,ASE,2020,2020,https://doi.org/10.1145/3324884.3416545;https://ieeexplore.ieee.org/document/9286042,10.1145/3324884.3416545,13
NEURODIFF: Scalable Differential Verification of Neural Networks using Fine-Grained Approximation.,ASE-2020-65,ASE,2020,2020,https://doi.org/10.1145/3324884.3416560;https://ieeexplore.ieee.org/document/9286034,10.1145/3324884.3416560,13
Identifying and Describing Information Seeking Tasks.,ASE-2020-66,ASE,2020,2020,https://doi.org/10.1145/3324884.3416537;https://ieeexplore.ieee.org/document/9286003,10.1145/3324884.3416537,12
Predicting Code Context Models for Software Development Tasks.,ASE-2020-67,ASE,2020,2020,https://doi.org/10.1145/3324884.3416544;https://ieeexplore.ieee.org/document/9286107,10.1145/3324884.3416544,12
SCDetector: Software Functional Clone Detection Based on Semantic Tokens Analysis.,ASE-2020-68,ASE,2020,2020,https://doi.org/10.1145/3324884.3416562;https://ieeexplore.ieee.org/document/9285662,10.1145/3324884.3416562,13
Generating Concept based API Element Comparison Using a Knowledge Graph.,ASE-2020-69,ASE,2020,2020,https://doi.org/10.1145/3324884.3416628;https://ieeexplore.ieee.org/document/9286015,10.1145/3324884.3416628,12
Multiplex Symbolic Execution: Exploring Multiple Paths by Solving Once.,ASE-2020-70,ASE,2020,2020,https://doi.org/10.1145/3324884.3416645;https://ieeexplore.ieee.org/document/9286103,10.1145/3324884.3416645,12
Zeror: Speed Up Fuzzing with Coverage-sensitive Tracing and Scheduling.,ASE-2020-71,ASE,2020,2020,https://doi.org/10.1145/3324884.3416572;https://ieeexplore.ieee.org/document/9286017,10.1145/3324884.3416572,13
Detecting and Explaining Self-Admitted Technical Debts with Attention-based Neural Networks.,ASE-2020-72,ASE,2020,2020,https://doi.org/10.1145/3324884.3416583;https://ieeexplore.ieee.org/document/9286078,10.1145/3324884.3416583,12
OCoR: An Overlapping-Aware Code Retriever.,ASE-2020-73,ASE,2020,2020,https://doi.org/10.1145/3324884.3416530;https://ieeexplore.ieee.org/document/9285661,10.1145/3324884.3416530,12
Understanding Performance Concerns in the API Documentation of Data Science Libraries.,ASE-2020-74,ASE,2020,2020,https://doi.org/10.1145/3324884.3416543;https://ieeexplore.ieee.org/document/9286046,10.1145/3324884.3416543,12
On the Effectiveness of Unified Debugging: An Extensive Study on 16 Program Repair Systems.,ASE-2020-75,ASE,2020,2020,https://doi.org/10.1145/3324884.3416566;https://ieeexplore.ieee.org/document/9285663,10.1145/3324884.3416566,12
Automated Third-Party Library Detection for Android Applications: Are We There Yet?,ASE-2020-76,ASE,2020,2020,https://doi.org/10.1145/3324884.3416582;https://ieeexplore.ieee.org/document/9286020,10.1145/3324884.3416582,12
CCGraph: a PDG-based code clone detector with approximate graph matching.,ASE-2020-77,ASE,2020,2020,https://doi.org/10.1145/3324884.3416541;https://ieeexplore.ieee.org/document/9286111,10.1145/3324884.3416541,12
Towards Generating Thread-Safe Classes Automatically.,ASE-2020-78,ASE,2020,2020,https://doi.org/10.1145/3324884.3416625;https://ieeexplore.ieee.org/document/9286044,10.1145/3324884.3416625,13
No Strings Attached: An Empirical Study of String-related Software Bugs.,ASE-2020-79,ASE,2020,2020,https://doi.org/10.1145/3324884.3416576;https://ieeexplore.ieee.org/document/9286132,10.1145/3324884.3416576,12
Automated Patch Correctness Assessment: How Far are We?,ASE-2020-80,ASE,2020,2020,https://doi.org/10.1145/3324884.3416590;https://ieeexplore.ieee.org/document/9286063,10.1145/3324884.3416590,13
Evaluating Representation Learning of Code Changes for Predicting Patch Correctness in Program Repair.,ASE-2020-81,ASE,2020,2020,https://doi.org/10.1145/3324884.3416532;https://ieeexplore.ieee.org/document/9286101,10.1145/3324884.3416532,12
Scalable Multiple-View Analysis of Reactive Systems via Bidirectional Model Transformations.,ASE-2020-82,ASE,2020,2020,https://doi.org/10.1145/3324884.3416579;https://ieeexplore.ieee.org/document/9286057,10.1145/3324884.3416579,11
Trace-Checking Signal-based Temporal Properties: A Model-Driven Approach.,ASE-2020-83,ASE,2020,2020,https://doi.org/10.1145/3324884.3416631;https://ieeexplore.ieee.org/document/9285996,10.1145/3324884.3416631,12
Attend and Represent: A Novel View on Algorithm Selection for Software Verification.,ASE-2020-84,ASE,2020,2020,https://doi.org/10.1145/3324884.3416633;https://ieeexplore.ieee.org/document/9286080,10.1145/3324884.3416633,13
Cross-Contract Static Analysis for Detecting Practical Reentrancy Vulnerabilities in Smart Contracts.,ASE-2020-85,ASE,2020,2020,https://doi.org/10.1145/3324884.3416553;https://ieeexplore.ieee.org/document/9286095,10.1145/3324884.3416553,12
Cats Are Not Fish: Deep Learning Testing Calls for Out-Of-Distribution Awareness.,ASE-2020-86,ASE,2020,2020,https://doi.org/10.1145/3324884.3416609;https://ieeexplore.ieee.org/document/9286113,10.1145/3324884.3416609,12
Metamorphic Object Insertion for Testing Object Detection Systems.,ASE-2020-87,ASE,2020,2020,https://doi.org/10.1145/3324884.3416584;https://ieeexplore.ieee.org/document/9286114,10.1145/3324884.3416584,13
Seven Reasons Why: An In-Depth Study of the Limitations of Random Test Input Generation for Android.,ASE-2020-88,ASE,2020,2020,https://doi.org/10.1145/3324884.3416567;https://ieeexplore.ieee.org/document/9286135,10.1145/3324884.3416567,12
Test Automation in Open-Source Android Apps: A Large-Scale Empirical Study.,ASE-2020-89,ASE,2020,2020,https://doi.org/10.1145/3324884.3416623;https://ieeexplore.ieee.org/document/9286051,10.1145/3324884.3416623,12
Synthesis-Based Resolution of Feature Interactions in Cyber-Physical Systems.,ASE-2020-90,ASE,2020,2020,https://doi.org/10.1145/3324884.3416630;https://ieeexplore.ieee.org/document/9286047,10.1145/3324884.3416630,13
MoFuzz: A Fuzzer Suite for Testing Model-Driven Software Engineering Tools.,ASE-2020-91,ASE,2020,2020,https://doi.org/10.1145/3324884.3416668;https://ieeexplore.ieee.org/document/9286018,10.1145/3324884.3416668,13
Prober: Practically Defending Overflows with Page Protection.,ASE-2020-92,ASE,2020,2020,https://doi.org/10.1145/3324884.3416533;https://ieeexplore.ieee.org/document/9286077,10.1145/3324884.3416533,13
MinerRay: Semantics-Aware Analysis for Ever-Evolving Cryptojacking Detection.,ASE-2020-93,ASE,2020,2020,https://doi.org/10.1145/3324884.3416580;https://ieeexplore.ieee.org/document/9286112,10.1145/3324884.3416580,12
Summary-Based Symbolic Evaluation for Smart Contracts.,ASE-2020-94,ASE,2020,2020,https://doi.org/10.1145/3324884.3416646;https://ieeexplore.ieee.org/document/9286081,10.1145/3324884.3416646,12
Automating User Notice Generation for Smart Contract Functions.,ASE-2021-2,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678552,10.1109/ASE51524.2021.9678552,13
End-to-End Automation of Feedback on Student Assembly Programs.,ASE-2021-3,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678837,10.1109/ASE51524.2021.9678837,12
Is Historical Data an Appropriate Benchmark for Reviewer Recommendation Systems? : A Case Study of the Gerrit Community.,ASE-2021-4,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678640,10.1109/ASE51524.2021.9678640,12
An Empirical Study of Bugs in WebAssembly Compilers.,ASE-2021-5,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678776,10.1109/ASE51524.2021.9678776,13
Detecting TensorFlow Program Bugs in Real-World Industrial Environment.,ASE-2021-6,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678891,10.1109/ASE51524.2021.9678891,12
Why Do Developers Remove Lambda Expressions in Java?,ASE-2021-7,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678600,10.1109/ASE51524.2021.9678600,12
Context Debloating for Object-Sensitive Pointer Analysis.,ASE-2021-8,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678880,10.1109/ASE51524.2021.9678880,13
Dynamic Generation of Python Bindings for HPC Kernels.,ASE-2021-9,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678726,10.1109/ASE51524.2021.9678726,12
Testing Your Question Answering Software via Asking Recursively.,ASE-2021-10,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678670,10.1109/ASE51524.2021.9678670,13
Improving Test Case Generation for REST APIs Through Hierarchical Clustering.,ASE-2021-11,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678586,10.1109/ASE51524.2021.9678586,12
VizSmith: Automated Visualization Synthesis by Mining Data-Science Notebooks.,ASE-2021-12,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678696,10.1109/ASE51524.2021.9678696,13
ISPY: Automatic Issue-Solution Pair Extraction from Community Live Chats.,ASE-2021-13,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678894,10.1109/ASE51524.2021.9678894,13
EditSum: A Retrieve-and-Edit Framework for Source Code Summarization.,ASE-2021-14,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678724,10.1109/ASE51524.2021.9678724,12
Interactive Cross-language Code Retrieval with Auto-Encoders.,ASE-2021-15,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678929,10.1109/ASE51524.2021.9678929,12
Data-Driven Design and Evaluation of SMT Meta-Solving Strategies: Balancing Performance, Accuracy, and Cost.,ASE-2021-16,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678881,10.1109/ASE51524.2021.9678881,12
Reducing Bug Triaging Confusion by Learning from Mistakes with a Bug Tossing Knowledge Graph.,ASE-2021-17,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678574,10.1109/ASE51524.2021.9678574,12
ASE: A Value Set Decision Procedure for Symbolic Execution.,ASE-2021-18,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678584,10.1109/ASE51524.2021.9678584,12
CorbFuzz: Checking Browser Security Policies with Fuzzing.,ASE-2021-19,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678636,10.1109/ASE51524.2021.9678636,12
SMARTIAN: Enhancing Smart Contract Fuzzing with Static and Dynamic Data-Flow Analyses.,ASE-2021-20,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678888,10.1109/ASE51524.2021.9678888,13
Restoring the Executability of Jupyter Notebooks by Automatic Upgrade of Deprecated APIs.,ASE-2021-21,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678889,10.1109/ASE51524.2021.9678889,13
Adversarial Attacks to API Recommender Systems: Time to Wake Up and Smell the Coffeeƒ.,ASE-2021-22,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678946,10.1109/ASE51524.2021.9678946,13
REPFINDER: Finding Replacements for Missing APIs in Library Update.,ASE-2021-23,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678905,10.1109/ASE51524.2021.9678905,13
Targeting Requirements Violations of Autonomous Driving Systems by Dynamic Evolutionary Search.,ASE-2021-24,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678883,10.1109/ASE51524.2021.9678883,13
On the Real-World Effectiveness of Static Bug Detectors at Finding Null Pointer Exceptions.,ASE-2021-25,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678535,10.1109/ASE51524.2021.9678535,12
Subtle Bugs Everywhere: Generating Documentation for Data Wrangling Code.,ASE-2021-26,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678520,10.1109/ASE51524.2021.9678520,13
Distribution Models for Falsification and Verification of DNNs.,ASE-2021-27,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678590,10.1109/ASE51524.2021.9678590,13
SATune: A Study-Driven Auto-Tuning Approach for Configurable Software Verification Tools.,ASE-2021-28,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678761,10.1109/ASE51524.2021.9678761,13
Efficient SMT-Based Model Checking for Signal Temporal Logic.,ASE-2021-29,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678719,10.1109/ASE51524.2021.9678719,12
DeepMetis: Augmenting a Deep Learning Test Set to Increase its Mutation Score.,ASE-2021-30,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678764,10.1109/ASE51524.2021.9678764,13
Efficient state synchronisation in model-based testing through reinforcement learning.,ASE-2021-31,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678566,10.1109/ASE51524.2021.9678566,13
Faster Mutation Analysis with Fewer Processes and Smaller Overheads.,ASE-2021-32,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678827,10.1109/ASE51524.2021.9678827,13
FRUGAL: Unlocking Semi-Supervised Learning for Software Analytics.,ASE-2021-33,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678617,10.1109/ASE51524.2021.9678617,13
PyExplainer: Explaining the Predictions of Just-In-Time Defect Models.,ASE-2021-34,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678763,10.1109/ASE51524.2021.9678763,12
Groot: An Event-graph-based Approach for Root Cause Analysis in Industrial Settings.,ASE-2021-35,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678708,10.1109/ASE51524.2021.9678708,11
Graph-based Incident Aggregation for Large-Scale Online Service Systems.,ASE-2021-36,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678746,10.1109/ASE51524.2021.9678746,13
On Multi-Modal Learning of Editing Source Code.,ASE-2021-37,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678559,10.1109/ASE51524.2021.9678559,13
Learning Highly Recursive Input Grammars.,ASE-2021-38,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678879,10.1109/ASE51524.2021.9678879,12
Automated Testing for Machine Translation via Constituency Invariance.,ASE-2021-39,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678715,10.1109/ASE51524.2021.9678715,12
Race Detection for Event-Driven Node.js Applications.,ASE-2021-40,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678814,10.1109/ASE51524.2021.9678814,12
Log-based Anomaly Detection Without Log Parsing.,ASE-2021-41,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678773,10.1109/ASE51524.2021.9678773,13
Finding the Missing Piece: Permission Specification Analysis for Android NDK.,ASE-2021-42,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678843,10.1109/ASE51524.2021.9678843,12
Characterizing and Detecting Configuration Compatibility Issues in Android Apps.,ASE-2021-43,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678556,10.1109/ASE51524.2021.9678556,12
Where to Start: Studying Type Annotation Practices in Python.,ASE-2021-44,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678947,10.1109/ASE51524.2021.9678947,13
APIzation: Generating Reusable APIs from StackOverflow Code Snippets.,ASE-2021-45,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678576,10.1109/ASE51524.2021.9678576,13
FIGCPS: Effective Failure-inducing Input Generation for Cyber-Physical Systems with Deep Reinforcement Learning.,ASE-2021-46,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678832,10.1109/ASE51524.2021.9678832,13
InstruGuard: Find and Fix Instrumentation Errors for Coverage-based Greybox Fuzzing.,ASE-2021-47,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678671,10.1109/ASE51524.2021.9678671,13
RULF: Rust Library Fuzzing via API Dependency Graph Traversal.,ASE-2021-48,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678813,10.1109/ASE51524.2021.9678813,12
PyNose: A Test Smell Detector For Python.,ASE-2021-49,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678615,10.1109/ASE51524.2021.9678615,13
JSTAR: JavaScript Specification Type Analyzer using Refinement.,ASE-2021-50,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678781,10.1109/ASE51524.2021.9678781,11
Can Neural Clone Detection Generalize to Unseen Functionalitiesƒ.,ASE-2021-51,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678907,10.1109/ASE51524.2021.9678907,13
Characterizing Transaction-Reverting Statements in Ethereum Smart Contracts.,ASE-2021-52,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678597,10.1109/ASE51524.2021.9678597,12
"What makes my queries slow?": Subgroup Discovery for SQL Workload Analysis.,ASE-2021-53,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678915,10.1109/ASE51524.2021.9678915,11
AID: Efficient Prediction of Aggregated Intensity of Dependency in Large-scale Cloud Systems.,ASE-2021-54,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678534,10.1109/ASE51524.2021.9678534,13
Performance Testing for Cloud Computing with Dependent Data Bootstrapping.,ASE-2021-55,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678687,10.1109/ASE51524.2021.9678687,13
Nekara: Generalized Concurrency Testing.,ASE-2021-56,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678838,10.1109/ASE51524.2021.9678838,13
QDiff: Differential Testing of Quantum Software Stacks.,ASE-2021-57,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678792,10.1109/ASE51524.2021.9678792,13
Finding A Needle in a Haystack: Automated Mining of Silent Vulnerability Fixes.,ASE-2021-58,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678720,10.1109/ASE51524.2021.9678720,12
DeepCVA: Automated Commit-level Vulnerability Assessment with Deep Multi-task Learning.,ASE-2021-59,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678622,10.1109/ASE51524.2021.9678622,13
Automated Repair of Size-Based Inaccessibility Issues in Mobile Applications.,ASE-2021-60,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678625,10.1109/ASE51524.2021.9678625,13
Mining Cross-Domain Apps for Software Evolution: A Feature-based Approach.,ASE-2021-61,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678514,10.1109/ASE51524.2021.9678514,13
UI Test Migration Across Mobile Platforms.,ASE-2021-62,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678643,10.1109/ASE51524.2021.9678643,12
Intelligent Change Operators for Multi-Objective Refactoring.,ASE-2021-63,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678519,10.1109/ASE51524.2021.9678519,13
Refactorings and Technical Debt in Docker Projects: An Empirical Study.,ASE-2021-64,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678585,10.1109/ASE51524.2021.9678585,11
FirmGuide: Boosting the Capability of Rehosting Embedded Linux Kernels through Model-Guided Kernel Execution.,ASE-2021-65,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678653,10.1109/ASE51524.2021.9678653,13
IFIZZ: Deep-State and Efficient Fault-Scenario Generation to Test IoT Firmware.,ASE-2021-66,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678785,10.1109/ASE51524.2021.9678785,12
Learning Patterns in Configuration.,ASE-2021-67,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678525,10.1109/ASE51524.2021.9678525,12
Transcode: Detecting Status Code Mapping Errors in Large-Scale Systems.,ASE-2021-68,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678823,10.1109/ASE51524.2021.9678823,13
Evolutionary-Guided Synthesis of Verified Pareto-Optimal MDP Policies.,ASE-2021-69,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678727,10.1109/ASE51524.2021.9678727,12
Automating Developer Chat Mining.,ASE-2021-70,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678923,10.1109/ASE51524.2021.9678923,13
Thinking Like a Developer? Comparing the Attention of Humans with Neural Models of Code.,ASE-2021-71,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678712,10.1109/ASE51524.2021.9678712,13
Detecting Memory-Related Bugs by Tracking Heap Memory Management of C++ Smart Pointers.,ASE-2021-72,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678836,10.1109/ASE51524.2021.9678836,12
Understanding and Detecting Performance Bugs in Markdown Compilers.,ASE-2021-73,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678611,10.1109/ASE51524.2021.9678611,13
Deep GUI: Black-box GUI Input Generation with Deep Learning.,ASE-2021-74,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678778,10.1109/ASE51524.2021.9678778,12
Towards Exploring the Limitations of Active Learning: An Empirical Study.,ASE-2021-75,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678672,10.1109/ASE51524.2021.9678672,13
Learning Domain-Specific Edit Operations from Model Repositories with Frequent Subgraph Mining.,ASE-2021-76,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678698,10.1109/ASE51524.2021.9678698,13
Unsupervised Labeling and Extraction of Phrase-based Concepts in Vulnerability Descriptions.,ASE-2021-77,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678638,10.1109/ASE51524.2021.9678638,12
A Compositional Deadlock Detector for Android Java.,ASE-2021-78,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678572,10.1109/ASE51524.2021.9678572,12
Binary Diffing as a Network Alignment Problem via Belief Propagation.,ASE-2021-79,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678782,10.1109/ASE51524.2021.9678782,12
CiFi: Versatile Analysis of Class and Field Immutability.,ASE-2021-80,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678903,10.1109/ASE51524.2021.9678903,12
Modeling Team Dynamics for the Characterization and Prediction of Delays in User Stories.,ASE-2021-81,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678939,10.1109/ASE51524.2021.9678939,12
DeepMemory: Model-based Memorization Analysis of Deep Neural Language Models.,ASE-2021-82,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678871,10.1109/ASE51524.2021.9678871,13
Automated Verification of Go Programs via Bounded Model Checking.,ASE-2021-83,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678571,10.1109/ASE51524.2021.9678571,12
Property-based Test for Part-of-Speech Tagging Tool.,ASE-2021-147,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678807,10.1109/ASE51524.2021.9678807,6
Adaptation2: Adapting Specification Learners in Assured Adaptive Systems.,ASE-2021-155,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678919,10.1109/ASE51524.2021.9678919,6
Defeating Program Analysis Techniques via Ambiguous Translation.,ASE-2021-162,ASE,2021,2021,https://doi.org/10.1109/ASE51524.2021.9678912,10.1109/ASE51524.2021.9678912,6
One test to rule them all.,ISSTA-2017-0,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092704,10.1145/3092703.3092704,11
Reinforcement learning for automatic test case prioritization and selection in continuous integration.,ISSTA-2017-1,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092709,10.1145/3092703.3092709,11
PerfRanker: prioritization of performance regression tests for collection-intensive software.,ISSTA-2017-2,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092725,10.1145/3092703.3092725,12
Compiler-assisted test acceleration on GPUs for embedded software.,ISSTA-2017-3,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092720,10.1145/3092703.3092720,11
Targeted property-based testing.,ISSTA-2017-4,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092711,10.1145/3092703.3092711,11
Generating unit tests with descriptive names or: would you name your children thing1 and thing2?,ISSTA-2017-5,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092727,10.1145/3092703.3092727,11
Accelerating array constraints in symbolic execution.,ISSTA-2017-6,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092728,10.1145/3092703.3092728,11
Improving the cost-effectiveness of symbolic testing techniques for transport protocol implementations under packet dynamics.,ISSTA-2017-7,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092706,10.1145/3092703.3092706,11
Combining symbolic execution and search-based testing for programs with complex heap inputs.,ISSTA-2017-8,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092715,10.1145/3092703.3092715,12
Efficient computation of happens-before relation for event-driven programs.,ISSTA-2017-9,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092733,10.1145/3092703.3092733,11
Automatic detection and validation of race conditions in interrupt-driven embedded software.,ISSTA-2017-10,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092724,10.1145/3092703.3092724,12
Monitoring decentralized specifications.,ISSTA-2017-11,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092723,10.1145/3092703.3092723,11
Effective online software anomaly detection.,ISSTA-2017-12,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092730,10.1145/3092703.3092730,11
Semi-automated discovery of server-based information oversharing vulnerabilities in Android applications.,ISSTA-2017-13,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092708,10.1145/3092703.3092708,11
CPR: cross platform binary code reuse via platform independent trace program.,ISSTA-2017-14,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092707,10.1145/3092703.3092707,12
An actionable performance profiler for optimizing the order of evaluations.,ISSTA-2017-15,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092716,10.1145/3092703.3092716,11
Testing and analysis of web applications using page models.,ISSTA-2017-16,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092734,10.1145/3092703.3092734,11
Automated layout failure detection for responsive web pages without an explicit oracle.,ISSTA-2017-17,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092712,10.1145/3092703.3092712,11
Test execution checkpointing for web applications.,ISSTA-2017-18,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092710,10.1145/3092703.3092710,12
Experience paper: a study on behavioral backward incompatibilities of Java software libraries.,ISSTA-2017-19,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092721,10.1145/3092703.3092721,11
Identifying test-suite-overfitted patches through test case generation.,ISSTA-2017-20,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092718,10.1145/3092703.3092718,11
Impact of tool support in patch construction.,ISSTA-2017-21,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092713,10.1145/3092703.3092713,12
Automated repair of layout cross browser issues using search-based techniques.,ISSTA-2017-22,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092726,10.1145/3092703.3092726,12
Boosting spectrum-based fault localization using PageRank.,ISSTA-2017-23,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092731,10.1145/3092703.3092731,12
FLUCCS: using code and change metrics to improve fault localization.,ISSTA-2017-24,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092717,10.1145/3092703.3092717,11
Inferring mutant utility from program context.,ISSTA-2017-25,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092732,10.1145/3092703.3092732,11
Faster mutation analysis via equivalence modulo states.,ISSTA-2017-26,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092714,10.1145/3092703.3092714,12
Just-in-time static analysis.,ISSTA-2017-27,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092705,10.1145/3092703.3092705,11
Refining interprocedural change-impact analysis using equivalence relations.,ISSTA-2017-28,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092719,10.1145/3092703.3092719,11
Boosting the precision of virtual call integrity protection with partial pointer analysis for C++.,ISSTA-2017-29,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092729,10.1145/3092703.3092729,12
Lightweight detection of physical unit inconsistencies without program annotations.,ISSTA-2017-30,ISSTA,2017,2017,https://doi.org/10.1145/3092703.3092722,10.1145/3092703.3092722,11
Lightweight verification of array indexing.,ISSTA-2018-1,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213849,10.1145/3213846.3213849,12
Eliminating timing side-channel leaks using program repair.,ISSTA-2018-2,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213851,10.1145/3213846.3213851,12
Symbolic path cost analysis for side-channel detection.,ISSTA-2018-3,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213867,10.1145/3213846.3213867,11
Safe and sound program analysis with Flix.,ISSTA-2018-4,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213847,10.1145/3213846.3213847,11
Test case prioritization for acceptance testing of cyber physical systems: a multi-objective search-based approach.,ISSTA-2018-5,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213852,10.1145/3213846.3213852,12
Bench4BL: reproducibility study on the performance of IR-based bug localization.,ISSTA-2018-6,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213856,10.1145/3213846.3213856,12
Automated test mapping and coverage for network topologies.,ISSTA-2018-7,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213859,10.1145/3213846.3213859,11
Evaluating test-suite reduction in real software evolution.,ISSTA-2018-8,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213875,10.1145/3213846.3213875,11
Compiler fuzzing through deep learning.,ISSTA-2018-9,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213848,10.1145/3213846.3213848,11
Deep specification mining.,ISSTA-2018-10,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213876,10.1145/3213846.3213876,12
Identifying implementation bugs in machine learning based image classifiers using metamorphic testing.,ISSTA-2018-11,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213858,10.1145/3213846.3213858,11
An empirical study on TensorFlow program bugs.,ISSTA-2018-12,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213866,10.1145/3213846.3213866,12
Automatically translating bug reports into test cases for mobile apps.,ISSTA-2018-13,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213869,10.1145/3213846.3213869,12
CiD: automating the detection of API-related compatibility issues in Android apps.,ISSTA-2018-14,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213857,10.1145/3213846.3213857,11
Test migration for efficient large-scale assessment of mobile app coding assignments.,ISSTA-2018-15,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213854,10.1145/3213846.3213854,12
Analyzing the analyzers: FlowDroid/IccTA, AmanDroid, and DroidSafe.,ISSTA-2018-16,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213873,10.1145/3213846.3213873,11
Repositioning of static analysis alarms.,ISSTA-2018-17,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213850,10.1145/3213846.3213850,11
Shooting from the heap: ultra-scalable static analysis with heap snapshots.,ISSTA-2018-18,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213860,10.1145/3213846.3213860,11
Static analysis of Java dynamic proxies.,ISSTA-2018-19,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213864,10.1145/3213846.3213864,12
Practical detection of concurrency issues at coding time.,ISSTA-2018-20,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213853,10.1145/3213846.3213853,11
Tests from traces: automated unit test extraction for R.,ISSTA-2018-21,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213863,10.1145/3213846.3213863,10
Translating code comments to procedure specifications.,ISSTA-2018-22,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213872,10.1145/3213846.3213872,12
PerfFuzz: automatically generating pathological inputs.,ISSTA-2018-23,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213874,10.1145/3213846.3213874,12
Search-based detection of deviation failures in the migration of legacy spreadsheet applications.,ISSTA-2018-24,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213861,10.1145/3213846.3213861,10
Making data-driven porting decisions with Tuscan.,ISSTA-2018-25,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213855,10.1145/3213846.3213855,11
Comparing developer-provided to user-provided tests for fault localization and automated program repair.,ISSTA-2018-26,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213870,10.1145/3213846.3213870,11
Shaping program repair space with existing patches and similar code.,ISSTA-2018-27,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213871,10.1145/3213846.3213871,12
Remove RATs from your code: automated optimization of resource inefficient database writes for mobile applications.,ISSTA-2018-28,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213865,10.1145/3213846.3213865,12
Badger: complexity analysis with fuzzing and symbolic execution.,ISSTA-2018-29,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213868,10.1145/3213846.3213868,11
Exploiting community structure for floating-point precision tuning.,ISSTA-2018-30,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213862,10.1145/3213846.3213862,11
piCoq: parallel regression proving for large-scale verification projects.,ISSTA-2018-31,ISSTA,2018,2018,https://doi.org/10.1145/3213846.3213877,10.1145/3213846.3213877,12
Crash-avoiding program repair.,ISSTA-2019-3,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330558,10.1145/3293882.3330558,11
Practical program repair via bytecode mutation.,ISSTA-2019-4,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330559,10.1145/3293882.3330559,12
TBar: revisiting template-based automated program repair.,ISSTA-2019-5,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330577,10.1145/3293882.3330577,12
History-driven build failure fixing: how far are we?,ISSTA-2019-6,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330578,10.1145/3293882.3330578,12
LibID: reliable identification of obfuscated third-party Android libraries.,ISSTA-2019-7,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330563,10.1145/3293882.3330563,11
QADroid: regression event selection for Android applications.,ISSTA-2019-8,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330550,10.1145/3293882.3330550,12
Mining Android crash fixes in the absence of issue- and change-tracking systems.,ISSTA-2019-9,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330572,10.1145/3293882.3330572,12
Sara: self-replay augmented record and replay for Android in industrial cases.,ISSTA-2019-10,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330557,10.1145/3293882.3330557,11
Root causing flaky tests in a large-scale industrial setting.,ISSTA-2019-11,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330570,10.1145/3293882.3330570,11
Mitigating the effects of flaky tests on mutation testing.,ISSTA-2019-12,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330568,10.1145/3293882.3330568,11
Assessing the state and improving the art of parallel testing for C.,ISSTA-2019-13,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330573,10.1145/3293882.3330573,11
Failure clustering without coverage.,ISSTA-2019-14,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330561,10.1145/3293882.3330561,12
DeepHunter: a coverage-guided fuzz testing framework for deep neural networks.,ISSTA-2019-15,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330579,10.1145/3293882.3330579,12
Search-based test and improvement of machine-learning-based anomaly detection systems.,ISSTA-2019-16,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330580,10.1145/3293882.3330580,11
DeepFL: integrating multiple fault diagnosis dimensions for deep fault localization.,ISSTA-2019-17,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330574,10.1145/3293882.3330574,12
Codebase-adaptive detection of security-relevant methods.,ISSTA-2019-18,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330556,10.1145/3293882.3330556,11
Effective and efficient API misuse detection via exception propagation and search-based testing.,ISSTA-2019-19,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330552,10.1145/3293882.3330552,12
Automated API-usage update for Android apps.,ISSTA-2019-20,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330571,10.1145/3293882.3330571,12
A large-scale study of application incompatibilities in Android.,ISSTA-2019-21,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330564,10.1145/3293882.3330564,12
Deferred concretization in symbolic execution via fuzzing.,ISSTA-2019-22,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330554,10.1145/3293882.3330554,11
Differentially testing soundness and precision of program analyzers.,ISSTA-2019-23,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330553,10.1145/3293882.3330553,12
Judge: identifying, understanding, and evaluating sources of unsoundness in call graphs.,ISSTA-2019-24,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330555,10.1145/3293882.3330555,11
Adlib: analyzer for mobile ad platform libraries.,ISSTA-2019-25,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330562,10.1145/3293882.3330562,11
Interactive metamorphic testing of debuggers.,ISSTA-2019-26,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330567,10.1145/3293882.3330567,11
TestMig: migrating GUI test cases from iOS to Android.,ISSTA-2019-27,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330575,10.1145/3293882.3330575,12
Learning user interface element interactions.,ISSTA-2019-28,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330569,10.1145/3293882.3330569,11
Improving random GUI testing with image-based widget detection.,ISSTA-2019-29,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330551,10.1145/3293882.3330551,11
Automatically testing self-driving cars with search-based procedural content generation.,ISSTA-2019-30,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330566,10.1145/3293882.3330566,11
Semantic fuzzing with zest.,ISSTA-2019-31,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330576,10.1145/3293882.3330576,12
Detecting memory errors at runtime with source-level instrumentation.,ISSTA-2019-32,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330581,10.1145/3293882.3330581,11
Optimal context-sensitive dynamic partial order reduction with observers.,ISSTA-2019-33,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330565,10.1145/3293882.3330565,11
Exploiting the laws of order in smart contracts.,ISSTA-2019-34,ISSTA,2019,2019,https://doi.org/10.1145/3293882.3330560,10.1145/3293882.3330560,11
WEIZZ: automatic grey-box fuzzing for structured binary formats.,ISSTA-2020-0,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397372,10.1145/3395363.3397372,13
Active fuzzing for testing and securing cyber-physical systems.,ISSTA-2020-1,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397376,10.1145/3395363.3397376,13
Learning input tokens for effective fuzzing.,ISSTA-2020-2,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397348,10.1145/3395363.3397348,11
Fast bit-vector satisfiability.,ISSTA-2020-3,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397378,10.1145/3395363.3397378,13
Relocatable addressing model for symbolic execution.,ISSTA-2020-4,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397363,10.1145/3395363.3397363,12
Running symbolic execution forever.,ISSTA-2020-5,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397360,10.1145/3395363.3397360,12
Can automated program repair refine fault localization? a unified debugging approach.,ISSTA-2020-6,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397351,10.1145/3395363.3397351,13
Automated repair of feature interaction failures in automated driving systems.,ISSTA-2020-7,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397386,10.1145/3395363.3397386,13
CoCoNuT: combining context-aware neural translation models using ensemble for program repair.,ISSTA-2020-8,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397369,10.1145/3395363.3397369,14
Detecting and diagnosing energy issues for mobile applications.,ISSTA-2020-9,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397350,10.1145/3395363.3397350,13
Automated classification of actions in bug reports of mobile apps.,ISSTA-2020-10,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397355,10.1145/3395363.3397355,13
Data loss detector: automatically revealing data loss bugs in Android apps.,ISSTA-2020-11,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397379,10.1145/3395363.3397379,12
Reinforcement learning based curiosity-driven testing of Android applications.,ISSTA-2020-12,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397354,10.1145/3395363.3397354,12
Effective white-box testing of deep neural networks with adaptive neuron-selection strategy.,ISSTA-2020-13,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397346,10.1145/3395363.3397346,12
DeepGini: prioritizing massive tests to enhance the robustness of deep neural networks.,ISSTA-2020-14,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397357,10.1145/3395363.3397357,12
Detecting and understanding real-world differential performance bugs in machine learning libraries.,ISSTA-2020-15,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3404540,10.1145/3395363.3404540,11
Higher income, larger loan? monotonicity testing of machine learning models.,ISSTA-2020-16,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397352,10.1145/3395363.3397352,11
Detecting flaky tests in probabilistic and machine learning applications.,ISSTA-2020-17,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397366,10.1145/3395363.3397366,14
Scaffle: bug localization on millions of files.,ISSTA-2020-18,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397356,10.1145/3395363.3397356,12
Abstracting failure-inducing inputs.,ISSTA-2020-19,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397349,10.1145/3395363.3397349,12
Debugging the performance of Maven's test isolation: experience report.,ISSTA-2020-20,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397381,10.1145/3395363.3397381,11
Feedback-driven side-channel analysis for networked applications.,ISSTA-2020-21,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397365,10.1145/3395363.3397365,12
Scalable analysis of interaction threats in IoT systems.,ISSTA-2020-22,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397347,10.1145/3395363.3397347,14
DeepSQLi: deep semantic learning for testing SQL injection.,ISSTA-2020-23,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397375,10.1145/3395363.3397375,12
Dependent-test-aware regression testing techniques.,ISSTA-2020-24,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397364,10.1145/3395363.3397364,14
Differential regression testing for REST APIs.,ISSTA-2020-25,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397374,10.1145/3395363.3397374,12
Empirically revisiting and enhancing IR-based test-case prioritization.,ISSTA-2020-26,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397383,10.1145/3395363.3397383,13
Intermittently failing tests in the embedded systems domain.,ISSTA-2020-27,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397359,10.1145/3395363.3397359,12
Feasible and stressful trajectory generation for mobile robots.,ISSTA-2020-28,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397387,10.1145/3395363.3397387,14
Detecting cache-related bugs in Spark applications.,ISSTA-2020-29,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397353,10.1145/3395363.3397353,13
Patch based vulnerability matching for binary programs.,ISSTA-2020-30,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397361,10.1145/3395363.3397361,12
Identifying Java calls in native code via binary scanning.,ISSTA-2020-31,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397368,10.1145/3395363.3397368,13
An empirical study on ARM disassembly tools.,ISSTA-2020-32,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397377,10.1145/3395363.3397377,14
How effective are smart contract analysis tools? evaluating smart contract static analysis tools using bug injection.,ISSTA-2020-33,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397385,10.1145/3395363.3397385,13
A programming model for semi-implicit parallelization of static analyses.,ISSTA-2020-34,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397367,10.1145/3395363.3397367,12
Recovering fitness gradients for interprocedural Boolean flags in search-based testing.,ISSTA-2020-35,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397358,10.1145/3395363.3397358,12
Scalable build service system with smart scheduling service.,ISSTA-2020-36,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397371,10.1145/3395363.3397371,11
Escaping dependency hell: finding build dependency errors with the unified dependency graph.,ISSTA-2020-37,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397388,10.1145/3395363.3397388,12
How far we have come: testing decompilation correctness of C decompilers.,ISSTA-2020-38,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397370,10.1145/3395363.3397370,13
Discovering discrepancies in numerical libraries.,ISSTA-2020-39,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397380,10.1145/3395363.3397380,14
Testing high performance numerical simulation programs: experience, lessons learned, and open issues.,ISSTA-2020-40,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397382,10.1145/3395363.3397382,14
Functional code clone detection with syntax and semantics fusion learning.,ISSTA-2020-41,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397362,10.1145/3395363.3397362,12
Learning to detect table clones in spreadsheets.,ISSTA-2020-42,ISSTA,2020,2020,https://doi.org/10.1145/3395363.3397384,10.1145/3395363.3397384,13
Identifying privacy weaknesses from multi-party trigger-action integration platforms.,ISSTA-2021-1,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464838,10.1145/3460319.3464838,14
WebEvo: taming web application evolution via detecting semantic structure changes.,ISSTA-2021-2,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464800,10.1145/3460319.3464800,13
Modular call graph construction for security scanning of Node.js applications.,ISSTA-2021-3,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464836,10.1145/3460319.3464836,13
Attack as defense: characterizing adversarial examples using robustness.,ISSTA-2021-4,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464822,10.1145/3460319.3464822,14
Exposing previously undetectable faults in deep neural networks.,ISSTA-2021-5,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464801,10.1145/3460319.3464801,11
DeepCrime: mutation testing of deep learning systems based on real faults.,ISSTA-2021-6,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464825,10.1145/3460319.3464825,12
DeepHyperion: exploring the feature space of deep learning-based systems through illumination search.,ISSTA-2021-7,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464811,10.1145/3460319.3464811,12
Automatic test suite generation for key-points detection DNNs using many-objective search (experience paper).,ISSTA-2021-8,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464802,10.1145/3460319.3464802,12
Efficient white-box fairness testing through gradient search.,ISSTA-2021-9,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464820,10.1145/3460319.3464820,12
DialTest: automated testing for recurrent-neural-network-driven dialogue systems.,ISSTA-2021-10,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464829,10.1145/3460319.3464829,12
AdvDoor: adversarial backdoor attack of deep learning system.,ISSTA-2021-11,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464809,10.1145/3460319.3464809,12
ModelDiff: testing-based DNN similarity comparison for model reuse detection.,ISSTA-2021-12,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464816,10.1145/3460319.3464816,13
Parema: an unpacking framework for demystifying VM-based Android packers.,ISSTA-2021-13,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464839,10.1145/3460319.3464839,13
An infrastructure approach to improving effectiveness of Android UI testing tools.,ISSTA-2021-14,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464828,10.1145/3460319.3464828,12
Semantic matching of GUI events for test reuse: are we there yet?,ISSTA-2021-15,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464827,10.1145/3460319.3464827,14
GUIDER: GUI structure and vision co-guided test script repair for Android apps.,ISSTA-2021-16,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464830,10.1145/3460319.3464830,13
Understanding and finding system setting-related defects in Android apps.,ISSTA-2021-17,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464806,10.1145/3460319.3464806,12
HomDroid: detecting Android covert malware by social-network homophily analysis.,ISSTA-2021-18,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464833,10.1145/3460319.3464833,14
Seed selection for successful fuzzing.,ISSTA-2021-19,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464795,10.1145/3460319.3464795,14
Gramatron: effective grammar-aware fuzzing.,ISSTA-2021-20,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464814,10.1145/3460319.3464814,13
QFuzz: quantitative fuzzing for side channels.,ISSTA-2021-21,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464817,10.1145/3460319.3464817,13
SAND: a static analysis approach for detecting SQL antipatterns.,ISSTA-2021-22,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464818,10.1145/3460319.3464818,13
Semantic table structure identification in spreadsheets.,ISSTA-2021-23,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464812,10.1145/3460319.3464812,13
Runtime detection of memory errors with smart status.,ISSTA-2021-24,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464807,10.1145/3460319.3464807,13
UAFSan: an object-identifier-based dynamic approach for detecting use-after-free vulnerabilities.,ISSTA-2021-25,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464835,10.1145/3460319.3464835,13
Fuzzing SMT solvers via two-dimensional input space exploration.,ISSTA-2021-26,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464803,10.1145/3460319.3464803,14
Boosting symbolic execution via constraint solving time prediction (experience paper).,ISSTA-2021-27,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464813,10.1145/3460319.3464813,12
Synthesize solving strategy for symbolic execution.,ISSTA-2021-28,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464815,10.1145/3460319.3464815,13
Type and interval aware array constraint solving for symbolic execution.,ISSTA-2021-29,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464826,10.1145/3460319.3464826,13
Grammar-agnostic symbolic execution by token symbolization.,ISSTA-2021-30,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464845,10.1145/3460319.3464845,14
Interval constraint-based mutation testing of numerical specifications.,ISSTA-2021-31,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464808,10.1145/3460319.3464808,12
Predoo: precision testing of deep learning operators.,ISSTA-2021-32,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464843,10.1145/3460319.3464843,13
TERA: optimizing stochastic regression tests in machine learning projects.,ISSTA-2021-33,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464844,10.1145/3460319.3464844,14
Deep just-in-time defect prediction: how far are we?,ISSTA-2021-34,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464819,10.1145/3460319.3464819,12
Fixing dependency errors for Python build reproducibility.,ISSTA-2021-35,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464797,10.1145/3460319.3464797,13
Test-case prioritization for configuration testing.,ISSTA-2021-36,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464810,10.1145/3460319.3464810,14
The impact of tool configuration spaces on the evaluation of configurable taint analysis for Android.,ISSTA-2021-37,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464823,10.1145/3460319.3464823,12
Challenges and opportunities: an in-depth empirical study on configuration error injection testing.,ISSTA-2021-38,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464799,10.1145/3460319.3464799,13
Empirically evaluating readily available information for regression test optimization in continuous integration.,ISSTA-2021-39,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464834,10.1145/3460319.3464834,14
Toward optimal mc/dc test case generation.,ISSTA-2021-40,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464841,10.1145/3460319.3464841,12
Log-based slicing for system-level test cases.,ISSTA-2021-41,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464824,10.1145/3460319.3464824,12
Model-based testing of networked applications.,ISSTA-2021-42,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464798,10.1145/3460319.3464798,11
Validating static warnings via testing code fragments.,ISSTA-2021-43,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464832,10.1145/3460319.3464832,13
Continuous test suite failure prediction.,ISSTA-2021-44,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464840,10.1145/3460319.3464840,13
Empirical evaluation of smart contract testing: what is the best choice?,ISSTA-2021-45,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464837,10.1145/3460319.3464837,14
iDEV: exploring and exploiting semantic deviations in ARM instruction processing.,ISSTA-2021-46,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464842,10.1145/3460319.3464842,13
RAProducer: efficiently diagnose and reproduce data race bugs for binaries via trace analysis.,ISSTA-2021-47,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464831,10.1145/3460319.3464831,14
A lightweight framework for function name reassignment based on large-scale stripped binaries.,ISSTA-2021-48,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464804,10.1145/3460319.3464804,13
Finding data compatibility bugs with JSON subschema checking.,ISSTA-2021-49,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464796,10.1145/3460319.3464796,13
Automated patch backporting in Linux (experience paper).,ISSTA-2021-50,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464821,10.1145/3460319.3464821,13
Faster, deeper, easier: crowdsourcing diagnosis of microservice kernel failure from user space.,ISSTA-2021-51,ISSTA,2021,2021,https://doi.org/10.1145/3460319.3464805,10.1145/3460319.3464805,12
jTrans: jump-aware transformer for binary code similarity detection.,ISSTA-2022-0,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534367,10.1145/3533767.3534367,13
FDG: a precise measurement of fault diagnosability gain of test cases.,ISSTA-2022-1,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534370,10.1145/3533767.3534370,13
TeLL: log level suggestions via modeling multi-level code block information.,ISSTA-2022-2,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534379,10.1145/3533767.3534379,12
An extensive study on pre-trained models for program understanding and generation.,ISSTA-2022-3,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534390,10.1145/3533767.3534390,13
Metamorphic relations via relaxations: an approach to obtain oracles for action-policy testing.,ISSTA-2022-4,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534392,10.1145/3533767.3534392,12
Hunting bugs with accelerated optimal graph vertex matching.,ISSTA-2022-5,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534393,10.1145/3533767.3534393,13
Using pre-trained language models to resolve textual and semantic merge conflicts (experience paper).,ISSTA-2022-6,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534396,10.1145/3533767.3534396,12
Combining solution reuse and bound tightening for efficient analysis of evolving systems.,ISSTA-2022-7,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534399,10.1145/3533767.3534399,12
On the use of evaluation measures for defect prediction studies.,ISSTA-2022-8,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534405,10.1145/3533767.3534405,13
Evolution-aware detection of order-dependent flaky tests.,ISSTA-2022-9,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534404,10.1145/3533767.3534404,12
ε-weakened robustness of deep neural networks.,ISSTA-2022-10,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534373,10.1145/3533767.3534373,13
Simple techniques work surprisingly well for neural network test prioritization and active learning (replicability study).,ISSTA-2022-11,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534375,10.1145/3533767.3534375,12
Improving cross-platform binary analysis using representation learning via graph alignment.,ISSTA-2022-12,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534383,10.1145/3533767.3534383,13
BET: black-box efficient testing for convolutional neural networks.,ISSTA-2022-13,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534386,10.1145/3533767.3534386,12
DocTer: documentation-guided fuzzing for testing deep learning API functions.,ISSTA-2022-14,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534220,10.1145/3533767.3534220,13
ASRTest: automated testing for deep-neural-network-driven speech recognition systems.,ISSTA-2022-15,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534391,10.1145/3533767.3534391,13
AEON: a method for automatic evaluation of NLP test cases.,ISSTA-2022-16,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534394,10.1145/3533767.3534394,13
Human-in-the-loop oracle learning for semantic bugs in string processing programs.,ISSTA-2022-17,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534406,10.1145/3533767.3534406,12
HybridRepair: towards annotation-efficient repair for deep learning models.,ISSTA-2022-18,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534408,10.1145/3533767.3534408,12
Cross-lingual transfer learning for statistical type inference.,ISSTA-2022-19,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534411,10.1145/3533767.3534411,12
Unicorn: detect runtime errors in time-series databases with hybrid input synthesis.,ISSTA-2022-20,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534364,10.1145/3533767.3534364,12
On the use of mutation analysis for evaluating student test suite quality.,ISSTA-2022-21,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534217,10.1145/3533767.3534217,13
Test mimicry to assess the exploitability of library vulnerabilities.,ISSTA-2022-22,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534398,10.1145/3533767.3534398,13
Automated test generation for REST APIs: no time to rest yet.,ISSTA-2022-23,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534401,10.1145/3533767.3534401,13
Finding bugs in Gremlin-based graph database systems via Randomized differential testing.,ISSTA-2022-24,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534409,10.1145/3533767.3534409,12
RegMiner: towards constructing a large regression dataset from code evolution history.,ISSTA-2022-25,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534224,10.1145/3533767.3534224,13
One step further: evaluating interpreters using metamorphic testing.,ISSTA-2022-26,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534225,10.1145/3533767.3534225,13
SnapFuzz: high-throughput fuzzing of network applications.,ISSTA-2022-27,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534376,10.1145/3533767.3534376,12
Almost correct invariants: synthesizing inductive invariants by fuzzing proofs.,ISSTA-2022-28,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534381,10.1145/3533767.3534381,13
SLIME: program-sensitive energy allocation for fuzzing.,ISSTA-2022-29,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534385,10.1145/3533767.3534385,13
MDPFuzz: testing models solving Markov decision processes.,ISSTA-2022-30,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534388,10.1145/3533767.3534388,13
TensileFuzz: facilitating seed input generation in fuzzing via string constraint solving.,ISSTA-2022-31,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534403,10.1145/3533767.3534403,13
PrIntFuzz: fuzzing Linux drivers via automated virtual device simulation.,ISSTA-2022-32,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534226,10.1145/3533767.3534226,13
Efficient greybox fuzzing of applications in Linux-based IoT devices via enhanced user-mode emulation.,ISSTA-2022-33,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534414,10.1145/3533767.3534414,12
Understanding device integration bugs in smart home system.,ISSTA-2022-34,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534365,10.1145/3533767.3534365,13
A large-scale empirical analysis of the vulnerabilities introduced by third-party components in IoT firmware.,ISSTA-2022-35,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534366,10.1145/3533767.3534366,13
Deadlock prediction via generalized dependency.,ISSTA-2022-36,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534377,10.1145/3533767.3534377,12
Automated testing of image captioning systems.,ISSTA-2022-37,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534389,10.1145/3533767.3534389,13
LiRTest: augmenting LiDAR point clouds for automated testing of autonomous driving systems.,ISSTA-2022-38,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534397,10.1145/3533767.3534397,13
Detecting multi-sensor fusion errors in advanced driver-assistance systems.,ISSTA-2022-39,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534223,10.1145/3533767.3534223,13
Precise and efficient atomicity violation detection for interrupt-driven programs via staged path pruning.,ISSTA-2022-40,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534412,10.1145/3533767.3534412,13
Path-sensitive code embedding via contrastive learning for software vulnerability detection.,ISSTA-2022-41,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534371,10.1145/3533767.3534371,13
A large-scale study of usability criteria addressed by static analysis tools.,ISSTA-2022-42,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534374,10.1145/3533767.3534374,12
An empirical study on the effectiveness of static C code analyzers for vulnerability detection.,ISSTA-2022-43,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534380,10.1145/3533767.3534380,12
Testing Dafny (experience paper).,ISSTA-2022-44,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534382,10.1145/3533767.3534382,12
Combining static analysis error traces with dynamic symbolic execution (experience paper).,ISSTA-2022-45,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534384,10.1145/3533767.3534384,12
The raise of machine learning hyperparameter constraints in Python code.,ISSTA-2022-46,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534400,10.1145/3533767.3534400,13
PermDroid: automatically testing permission-related behaviour of Android applications.,ISSTA-2022-47,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534221,10.1145/3533767.3534221,12
Detecting and fixing data loss issues in Android apps.,ISSTA-2022-48,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534402,10.1145/3533767.3534402,12
Automatically detecting API-induced compatibility issues in Android apps: a comparative analysis (replicability study).,ISSTA-2022-49,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534407,10.1145/3533767.3534407,12
NCScope: hardware-assisted analyzer for native code in Android apps.,ISSTA-2022-50,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534410,10.1145/3533767.3534410,13
Detecting resource utilization bugs induced by variant lifecycles in Android.,ISSTA-2022-51,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534413,10.1145/3533767.3534413,12
Patch correctness assessment in automated program repair based on the impact of patches on production and test code.,ISSTA-2022-52,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534368,10.1145/3533767.3534368,12
ATR: template-based repair for Alloy specifications.,ISSTA-2022-53,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534369,10.1145/3533767.3534369,12
CIRCLE: continual repair across programming languages.,ISSTA-2022-54,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534219,10.1145/3533767.3534219,13
Program vulnerability repair via inductive inference.,ISSTA-2022-55,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534387,10.1145/3533767.3534387,12
WASAI: uncovering vulnerabilities in Wasm smart contracts.,ISSTA-2022-56,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534218,10.1145/3533767.3534218,13
Finding permission bugs in smart contracts with role mining.,ISSTA-2022-57,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534372,10.1145/3533767.3534372,12
eTainter: detecting gas-related vulnerabilities in smart contracts.,ISSTA-2022-58,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534378,10.1145/3533767.3534378,12
Park: accelerating smart contract vulnerability detection via parallel-fork symbolic execution.,ISSTA-2022-59,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534395,10.1145/3533767.3534395,12
SmartDagger: a bytecode-based static analysis approach for detecting cross-contract vulnerability.,ISSTA-2022-60,ISSTA,2022,2022,https://doi.org/10.1145/3533767.3534222,10.1145/3533767.3534222,13
Reflections on the REST architectural style and "principled design of the modern web architecture" (impact paper award).,FSE-2017-3,FSE,2017,2017,https://doi.org/10.1145/3106237.3121282,10.1145/3106237.3121282,11
A fast causal profiler for task parallel programs.,FSE-2017-4,FSE,2017,2017,https://doi.org/10.1145/3106237.3106254,10.1145/3106237.3106254,12
On the scalability of Linux kernel maintainers' work.,FSE-2017-5,FSE,2017,2017,https://doi.org/10.1145/3106237.3106287,10.1145/3106237.3106287,11
Modeling and verification of evolving cyber-physical spaces.,FSE-2017-6,FSE,2017,2017,https://doi.org/10.1145/3106237.3106299,10.1145/3106237.3106299,11
Easy over hard: a case study on deep learning.,FSE-2017-7,FSE,2017,2017,https://doi.org/10.1145/3106237.3106256,10.1145/3106237.3106256,12
Finding near-optimal configurations in product lines by random sampling.,FSE-2017-8,FSE,2017,2017,https://doi.org/10.1145/3106237.3106273,10.1145/3106237.3106273,11
Revisiting unsupervised learning for defect prediction.,FSE-2017-9,FSE,2017,2017,https://doi.org/10.1145/3106237.3106257,10.1145/3106237.3106257,12
Loopster: static loop termination analysis.,FSE-2017-10,FSE,2017,2017,https://doi.org/10.1145/3106237.3106260,10.1145/3106237.3106260,11
CodeCarbonCopy.,FSE-2017-11,FSE,2017,2017,https://doi.org/10.1145/3106237.3106269,10.1145/3106237.3106269,11
The power of "why" and "why not": enriching scenario exploration with provenance.,FSE-2017-12,FSE,2017,2017,https://doi.org/10.1145/3106237.3106272,10.1145/3106237.3106272,11
Where is the bug and how is it fixed? an experiment with practitioners.,FSE-2017-13,FSE,2017,2017,https://doi.org/10.1145/3106237.3106255,10.1145/3106237.3106255,12
Understanding misunderstandings in source code.,FSE-2017-14,FSE,2017,2017,https://doi.org/10.1145/3106237.3106264,10.1145/3106237.3106264,11
Measuring neural efficiency of program comprehension.,FSE-2017-15,FSE,2017,2017,https://doi.org/10.1145/3106237.3106268,10.1145/3106237.3106268,11
Bayesian specification learning for finding API usage errors.,FSE-2017-16,FSE,2017,2017,https://doi.org/10.1145/3106237.3106284,10.1145/3106237.3106284,12
Synergistic debug-repair of heap manipulations.,FSE-2017-17,FSE,2017,2017,https://doi.org/10.1145/3106237.3106263,10.1145/3106237.3106263,11
Failure-directed program trimming.,FSE-2017-18,FSE,2017,2017,https://doi.org/10.1145/3106237.3106249,10.1145/3106237.3106249,12
Why modern open source projects fail.,FSE-2017-19,FSE,2017,2017,https://doi.org/10.1145/3106237.3106246,10.1145/3106237.3106246,11
Trade-offs in continuous integration: assurance, security, and flexibility.,FSE-2017-20,FSE,2017,2017,https://doi.org/10.1145/3106237.3106270,10.1145/3106237.3106270,11
µDroid: an energy-aware mutation testing framework for Android.,FSE-2017-21,FSE,2017,2017,https://doi.org/10.1145/3106237.3106244,10.1145/3106237.3106244,12
PATDroid: permission-aware GUI testing of Android.,FSE-2017-22,FSE,2017,2017,https://doi.org/10.1145/3106237.3106250,10.1145/3106237.3106250,13
Enabling mutation testing for Android apps.,FSE-2017-23,FSE,2017,2017,https://doi.org/10.1145/3106237.3106275,10.1145/3106237.3106275,12
Guided, stochastic model-based GUI testing of Android apps.,FSE-2017-24,FSE,2017,2017,https://doi.org/10.1145/3106237.3106298,10.1145/3106237.3106298,12
Using bad learners to find good configurations.,FSE-2017-25,FSE,2017,2017,https://doi.org/10.1145/3106237.3106238,10.1145/3106237.3106238,11
Attributed variability models: outside the comfort zone.,FSE-2017-26,FSE,2017,2017,https://doi.org/10.1145/3106237.3106251,10.1145/3106237.3106251,11
Kmax: finding all configurations of Kbuild makefiles statically.,FSE-2017-27,FSE,2017,2017,https://doi.org/10.1145/3106237.3106283,10.1145/3106237.3106283,12
Is there a mismatch between real-world feature models and product-line research?,FSE-2017-28,FSE,2017,2017,https://doi.org/10.1145/3106237.3106252,10.1145/3106237.3106252,12
Adaptively generating high quality fixes for atomicity violations.,FSE-2017-29,FSE,2017,2017,https://doi.org/10.1145/3106237.3106239,10.1145/3106237.3106239,12
AtexRace: across thread and execution sampling for in-house race detection.,FSE-2017-30,FSE,2017,2017,https://doi.org/10.1145/3106237.3106242,10.1145/3106237.3106242,11
Symbolic execution of programmable logic controller code.,FSE-2017-31,FSE,2017,2017,https://doi.org/10.1145/3106237.3106245,10.1145/3106237.3106245,11
Thread-modular static analysis for relaxed memory models.,FSE-2017-32,FSE,2017,2017,https://doi.org/10.1145/3106237.3106243,10.1145/3106237.3106243,12
ARTINALI: dynamic invariant detection for cyber-physical system security.,FSE-2017-33,FSE,2017,2017,https://doi.org/10.1145/3106237.3106282,10.1145/3106237.3106282,13
A symbolic justice violations transition system for unrealizable GR(1) specifications.,FSE-2017-34,FSE,2017,2017,https://doi.org/10.1145/3106237.3106240,10.1145/3106237.3106240,11
Automated control of multiple software goals using multiple actuators.,FSE-2017-35,FSE,2017,2017,https://doi.org/10.1145/3106237.3106247,10.1145/3106237.3106247,12
Why do developers use trivial packages? an empirical case study on npm.,FSE-2017-36,FSE,2017,2017,https://doi.org/10.1145/3106237.3106267,10.1145/3106237.3106267,11
Detecting missing information in bug descriptions.,FSE-2017-37,FSE,2017,2017,https://doi.org/10.1145/3106237.3106285,10.1145/3106237.3106285,12
Continuous variable-specific resolutions of feature interactions.,FSE-2017-38,FSE,2017,2017,https://doi.org/10.1145/3106237.3106302,10.1145/3106237.3106302,11
Model-level, platform-independent debugging in the context of the model-driven development of real-time systems.,FSE-2017-39,FSE,2017,2017,https://doi.org/10.1145/3106237.3106278,10.1145/3106237.3106278,12
Cooperative kernels: GPU multitasking for blocking algorithms.,FSE-2017-40,FSE,2017,2017,https://doi.org/10.1145/3106237.3106265,10.1145/3106237.3106265,11
Toward full elasticity in distributed static analysis: the case of callgraph analysis.,FSE-2017-41,FSE,2017,2017,https://doi.org/10.1145/3106237.3106261,10.1145/3106237.3106261,12
Probabilistic model checking of perturbed MDPs with applications to cloud computing.,FSE-2017-42,FSE,2017,2017,https://doi.org/10.1145/3106237.3106301,10.1145/3106237.3106301,11
Understanding the impact of refactoring on smells: a longitudinal study of 23 software projects.,FSE-2017-43,FSE,2017,2017,https://doi.org/10.1145/3106237.3106259,10.1145/3106237.3106259,11
Cimplifier: automatically debloating containers.,FSE-2017-44,FSE,2017,2017,https://doi.org/10.1145/3106237.3106271,10.1145/3106237.3106271,11
Craig vs. Newton in software model checking.,FSE-2017-45,FSE,2017,2017,https://doi.org/10.1145/3106237.3106307,10.1145/3106237.3106307,11
Fairness testing: testing software for discrimination.,FSE-2017-46,FSE,2017,2017,https://doi.org/10.1145/3106237.3106277,10.1145/3106237.3106277,13
The care and feeding of wild-caught mutants.,FSE-2017-47,FSE,2017,2017,https://doi.org/10.1145/3106237.3106280,10.1145/3106237.3106280,12
QTEP: quality-aware test case prioritization.,FSE-2017-48,FSE,2017,2017,https://doi.org/10.1145/3106237.3106258,10.1145/3106237.3106258,12
Constraint normalization and parameterized caching for quantitative program analysis.,FSE-2017-49,FSE,2017,2017,https://doi.org/10.1145/3106237.3106303,10.1145/3106237.3106303,12
Generalized observational slicing for tree-represented modelling languages.,FSE-2017-50,FSE,2017,2017,https://doi.org/10.1145/3106237.3106304,10.1145/3106237.3106304,12
On evidence preservation requirements for forensic-ready systems.,FSE-2017-51,FSE,2017,2017,https://doi.org/10.1145/3106237.3106308,10.1145/3106237.3106308,11
BDCI: behavioral driven conflict identification.,FSE-2017-52,FSE,2017,2017,https://doi.org/10.1145/3106237.3106296,10.1145/3106237.3106296,12
NoFAQ: synthesizing command repairs from examples.,FSE-2017-53,FSE,2017,2017,https://doi.org/10.1145/3106237.3106241,10.1145/3106237.3106241,11
S3: syntax- and semantic-guided repair synthesis via programming by examples.,FSE-2017-54,FSE,2017,2017,https://doi.org/10.1145/3106237.3106309,10.1145/3106237.3106309,12
Counterexample-guided approach to finding numerical invariants.,FSE-2017-55,FSE,2017,2017,https://doi.org/10.1145/3106237.3106281,10.1145/3106237.3106281,11
Discovering relational specifications.,FSE-2017-56,FSE,2017,2017,https://doi.org/10.1145/3106237.3106279,10.1145/3106237.3106279,11
Steelix: program-state based binary fuzzing.,FSE-2017-57,FSE,2017,2017,https://doi.org/10.1145/3106237.3106295,10.1145/3106237.3106295,11
CodeMatch: obfuscation won't conceal your repackaged app.,FSE-2017-58,FSE,2017,2017,https://doi.org/10.1145/3106237.3106305,10.1145/3106237.3106305,11
A compiler and verifier for page access oblivious computation.,FSE-2017-59,FSE,2017,2017,https://doi.org/10.1145/3106237.3106248,10.1145/3106237.3106248,12
Automatic generation of inter-component communication exploits for Android applications.,FSE-2017-60,FSE,2017,2017,https://doi.org/10.1145/3106237.3106286,10.1145/3106237.3106286,11
OASIS: prioritizing static analysis warnings for Android apps based on app user reviews.,FSE-2017-61,FSE,2017,2017,https://doi.org/10.1145/3106237.3106294,10.1145/3106237.3106294,11
Recovering clear, natural identifiers from obfuscated JS names.,FSE-2017-62,FSE,2017,2017,https://doi.org/10.1145/3106237.3106289,10.1145/3106237.3106289,11
DESCRY: reproducing system-level concurrency failures.,FSE-2017-63,FSE,2017,2017,https://doi.org/10.1145/3106237.3106266,10.1145/3106237.3106266,11
Reproducing concurrency failures from crash stacks.,FSE-2017-64,FSE,2017,2017,https://doi.org/10.1145/3106237.3106292,10.1145/3106237.3106292,12
Automatically analyzing groups of crashes for finding correlations.,FSE-2017-65,FSE,2017,2017,https://doi.org/10.1145/3106237.3106306,10.1145/3106237.3106306,10
Automatic inference of code transforms for patch generation.,FSE-2017-66,FSE,2017,2017,https://doi.org/10.1145/3106237.3106253,10.1145/3106237.3106253,13
A feasibility study of using automated program repair for introductory programming assignments.,FSE-2017-67,FSE,2017,2017,https://doi.org/10.1145/3106237.3106262,10.1145/3106237.3106262,12
Automatically diagnosing and repairing error handling bugs in C.,FSE-2017-68,FSE,2017,2017,https://doi.org/10.1145/3106237.3106300,10.1145/3106237.3106300,11
Are deep neural networks the best choice for modeling source code?,FSE-2017-69,FSE,2017,2017,https://doi.org/10.1145/3106237.3106290,10.1145/3106237.3106290,11
Understanding the impact of support for iteration on code search.,FSE-2017-70,FSE,2017,2017,https://doi.org/10.1145/3106237.3106293,10.1145/3106237.3106293,12
LAMP: data provenance for graph based machine learning algorithms through derivative computation.,FSE-2017-71,FSE,2017,2017,https://doi.org/10.1145/3106237.3106291,10.1145/3106237.3106291,12
More accurate recommendations for method-level changes.,FSE-2017-72,FSE,2017,2017,https://doi.org/10.1145/3106237.3106276,10.1145/3106237.3106276,11
Regression test selection across JVM boundaries.,FSE-2017-73,FSE,2017,2017,https://doi.org/10.1145/3106237.3106297,10.1145/3106237.3106297,12
Measuring the cost of regression testing in practice: a study of Java projects using continuous integration.,FSE-2017-74,FSE,2017,2017,https://doi.org/10.1145/3106237.3106288,10.1145/3106237.3106288,10
Better test cases for better automated program repair.,FSE-2017-75,FSE,2017,2017,https://doi.org/10.1145/3106237.3106274,10.1145/3106237.3106274,11
When program analysis meets mobile security: an industrial study of misusing Android internet sockets.,FSE-2017-76,FSE,2017,2017,https://doi.org/10.1145/3106237.3117764,10.1145/3106237.3117764,6
File-level vs. module-level regression test selection for .NET.,FSE-2017-77,FSE,2017,2017,https://doi.org/10.1145/3106237.3117763,10.1145/3106237.3117763,6
Record and replay for Android: are we there yet in industrial cases?,FSE-2017-78,FSE,2017,2017,https://doi.org/10.1145/3106237.3117769,10.1145/3106237.3117769,6
Model-driven software engineering in practice: privacy-enhanced filtering of network traffic.,FSE-2017-79,FSE,2017,2017,https://doi.org/10.1145/3106237.3117777,10.1145/3106237.3117777,6
Strong agile metrics: mining log data to determine predictive power of software metrics for continuous delivery teams.,FSE-2017-80,FSE,2017,2017,https://doi.org/10.1145/3106237.3117779,10.1145/3106237.3117779,6
Screening heuristics for project gating systems.,FSE-2017-81,FSE,2017,2017,https://doi.org/10.1145/3106237.3117766,10.1145/3106237.3117766,6
Natural language querying in SAP-ERP platform.,FSE-2017-82,FSE,2017,2017,https://doi.org/10.1145/3106237.3117765,10.1145/3106237.3117765,6
Serverless computing: economic and architectural impact.,FSE-2017-83,FSE,2017,2017,https://doi.org/10.1145/3106237.3117767,10.1145/3106237.3117767,6
What do software engineers care about? gaps between research and practice.,FSE-2017-84,FSE,2017,2017,https://doi.org/10.1145/3106237.3117778,10.1145/3106237.3117778,6
Reference architectures and Scrum: friends or foes?,FSE-2017-85,FSE,2017,2017,https://doi.org/10.1145/3106237.3117773,10.1145/3106237.3117773,6
Guidelines for adopting frontend architectures and patterns in microservices-based systems.,FSE-2017-86,FSE,2017,2017,https://doi.org/10.1145/3106237.3117775,10.1145/3106237.3117775,6
Improving understanding of dynamically typed software developed by agile practitioners.,FSE-2017-87,FSE,2017,2017,https://doi.org/10.1145/3106237.3117772,10.1145/3106237.3117772,6
Automated identification of security issues from commit messages and bug reports.,FSE-2017-88,FSE,2017,2017,https://doi.org/10.1145/3106237.3117771,10.1145/3106237.3117771,6
LaChouTi: kernel vulnerability responding framework for the fragmented Android devices.,FSE-2017-89,FSE,2017,2017,https://doi.org/10.1145/3106237.3117768,10.1145/3106237.3117768,6
Applying deep learning based automatic bug triager to industrial projects.,FSE-2017-90,FSE,2017,2017,https://doi.org/10.1145/3106237.3117776,10.1145/3106237.3117776,6
Static analysis for optimizing big data queries.,FSE-2017-91,FSE,2017,2017,https://doi.org/10.1145/3106237.3117774,10.1145/3106237.3117774,6
Automated testing of hybrid Simulink/Stateflow controllers: industrial case studies.,FSE-2017-92,FSE,2017,2017,https://doi.org/10.1145/3106237.3117770,10.1145/3106237.3117770,6
CloudRaid: hunting concurrency bugs in the cloud via log-mining.,FSE-2018-2,FSE,2018,2018,https://doi.org/10.1145/3236024.3236071,10.1145/3236024.3236071,12
Testing multithreaded programs via thread speed control.,FSE-2018-3,FSE,2018,2018,https://doi.org/10.1145/3236024.3236077,10.1145/3236024.3236077,11
Data race detection on compressed traces.,FSE-2018-4,FSE,2018,2018,https://doi.org/10.1145/3236024.3236025,10.1145/3236024.3236025,12
Practical AJAX race detection for JavaScript web applications.,FSE-2018-5,FSE,2018,2018,https://doi.org/10.1145/3236024.3236038,10.1145/3236024.3236038,11
Using finite-state models for log differencing.,FSE-2018-6,FSE,2018,2018,https://doi.org/10.1145/3236024.3236069,10.1145/3236024.3236069,11
Identifying impactful service system problems via log analysis.,FSE-2018-7,FSE,2018,2018,https://doi.org/10.1145/3236024.3236083,10.1145/3236024.3236083,11
Learning to sample: exploiting similarities across environments to learn performance models for configurable systems.,FSE-2018-8,FSE,2018,2018,https://doi.org/10.1145/3236024.3236074,10.1145/3236024.3236074,12
Performance comprehension at WiredTiger.,FSE-2018-9,FSE,2018,2018,https://doi.org/10.1145/3236024.3236081,10.1145/3236024.3236081,12
MemFix: static analysis-based repair of memory deallocation errors for C.,FSE-2018-10,FSE,2018,2018,https://doi.org/10.1145/3236024.3236079,10.1145/3236024.3236079,12
RefiNym: using names to refine types.,FSE-2018-11,FSE,2018,2018,https://doi.org/10.1145/3236024.3236042,10.1145/3236024.3236042,11
Darwinian data structure selection.,FSE-2018-12,FSE,2018,2018,https://doi.org/10.1145/3236024.3236043,10.1145/3236024.3236043,11
Scalability-first pointer analysis with self-tuning context-sensitivity.,FSE-2018-13,FSE,2018,2018,https://doi.org/10.1145/3236024.3236041,10.1145/3236024.3236041,12
DeepSim: deep learning code functional similarity.,FSE-2018-14,FSE,2018,2018,https://doi.org/10.1145/3236024.3236068,10.1145/3236024.3236068,11
Deep learning type inference.,FSE-2018-15,FSE,2018,2018,https://doi.org/10.1145/3236024.3236051,10.1145/3236024.3236051,11
Code vectors: understanding programs through embedded abstracted symbolic traces.,FSE-2018-16,FSE,2018,2018,https://doi.org/10.1145/3236024.3236085,10.1145/3236024.3236085,12
MODE: automated neural network model debugging via state differential analysis and input selection.,FSE-2018-17,FSE,2018,2018,https://doi.org/10.1145/3236024.3236082,10.1145/3236024.3236082,12
Towards a theory of software development expertise.,FSE-2018-18,FSE,2018,2018,https://doi.org/10.1145/3236024.3236061,10.1145/3236024.3236061,14
What makes a code change easier to review: an empirical investigation on code change reviewability.,FSE-2018-19,FSE,2018,2018,https://doi.org/10.1145/3236024.3236080,10.1145/3236024.3236080,12
Singularity: pattern fuzzing for worst case complexity.,FSE-2018-20,FSE,2018,2018,https://doi.org/10.1145/3236024.3236039,10.1145/3236024.3236039,11
Bug synthesis: challenging bug-finding tools with deep faults.,FSE-2018-21,FSE,2018,2018,https://doi.org/10.1145/3236024.3236084,10.1145/3236024.3236084,11
Modify, enhance, select: co-evolution of combinatorial models and test plans.,FSE-2018-22,FSE,2018,2018,https://doi.org/10.1145/3236024.3236067,10.1145/3236024.3236067,11
The impact of regular expression denial of service (ReDoS) in practice: an empirical study at the ecosystem scale.,FSE-2018-23,FSE,2018,2018,https://doi.org/10.1145/3236024.3236027,10.1145/3236024.3236027,11
FraudDroid: automated ad fraud detection for Android apps.,FSE-2018-24,FSE,2018,2018,https://doi.org/10.1145/3236024.3236045,10.1145/3236024.3236045,12
AppFlow: using machine learning to synthesize robust, reusable UI tests.,FSE-2018-25,FSE,2018,2018,https://doi.org/10.1145/3236024.3236055,10.1145/3236024.3236055,14
Winning the app production rally.,FSE-2018-26,FSE,2018,2018,https://doi.org/10.1145/3236024.3236044,10.1145/3236024.3236044,12
One size does not fit all: an empirical study of containerized continuous deployment workflows.,FSE-2018-27,FSE,2018,2018,https://doi.org/10.1145/3236024.3236033,10.1145/3236024.3236033,12
Be careful of when: an empirical study on time-related misuse of issue tracking data.,FSE-2018-28,FSE,2018,2018,https://doi.org/10.1145/3236024.3236054,10.1145/3236024.3236054,12
Do the dependency conflicts in my project matter?,FSE-2018-29,FSE,2018,2018,https://doi.org/10.1145/3236024.3236056,10.1145/3236024.3236056,12
Do Android taint analysis tools keep their promises?,FSE-2018-30,FSE,2018,2018,https://doi.org/10.1145/3236024.3236029,10.1145/3236024.3236029,11
Neural-augmented static analysis of Android communication.,FSE-2018-31,FSE,2018,2018,https://doi.org/10.1145/3236024.3236066,10.1145/3236024.3236066,12
Oreo: detection of clones in the twilight zone.,FSE-2018-32,FSE,2018,2018,https://doi.org/10.1145/3236024.3236026,10.1145/3236024.3236026,12
Concurrency verification with maximal path causality.,FSE-2018-33,FSE,2018,2018,https://doi.org/10.1145/3236024.3236048,10.1145/3236024.3236048,11
Adversarial symbolic execution for detecting concurrency-related cache timing leaks.,FSE-2018-34,FSE,2018,2018,https://doi.org/10.1145/3236024.3236028,10.1145/3236024.3236028,12
Symbolic execution with existential second-order constraints.,FSE-2018-35,FSE,2018,2018,https://doi.org/10.1145/3236024.3236049,10.1145/3236024.3236049,11
Parameterized model counting for string and numeric constraints.,FSE-2018-36,FSE,2018,2018,https://doi.org/10.1145/3236024.3236064,10.1145/3236024.3236064,11
NAR-miner: discovering negative association rules from code for bug detection.,FSE-2018-37,FSE,2018,2018,https://doi.org/10.1145/3236024.3236032,10.1145/3236024.3236032,12
Path-based function embedding and its application to error-handling specification mining.,FSE-2018-38,FSE,2018,2018,https://doi.org/10.1145/3236024.3236059,10.1145/3236024.3236059,11
Putback-based bidirectional model transformations.,FSE-2018-39,FSE,2018,2018,https://doi.org/10.1145/3236024.3236070,10.1145/3236024.3236070,11
Model transformation languages under a magnifying glass: a controlled experiment with Xtend, ATL, and QVT.,FSE-2018-40,FSE,2018,2018,https://doi.org/10.1145/3236024.3236046,10.1145/3236024.3236046,11
Applications of psychological science for actionable analytics.,FSE-2018-41,FSE,2018,2018,https://doi.org/10.1145/3236024.3236050,10.1145/3236024.3236050,12
A novel automated approach for software effort estimation based on data augmentation.,FSE-2018-42,FSE,2018,2018,https://doi.org/10.1145/3236024.3236052,10.1145/3236024.3236052,12
Predicting Node failure in cloud service systems.,FSE-2018-43,FSE,2018,2018,https://doi.org/10.1145/3236024.3236060,10.1145/3236024.3236060,11
Detecting speech act types in developer question/answer conversations during bug repair.,FSE-2018-44,FSE,2018,2018,https://doi.org/10.1145/3236024.3236031,10.1145/3236024.3236031,12
Visual web test repair.,FSE-2018-45,FSE,2018,2018,https://doi.org/10.1145/3236024.3236063,10.1145/3236024.3236063,12
Syntax-guided synthesis of Datalog programs.,FSE-2018-46,FSE,2018,2018,https://doi.org/10.1145/3236024.3236034,10.1145/3236024.3236034,13
Large-scale study of substitutability in the presence of effects.,FSE-2018-47,FSE,2018,2018,https://doi.org/10.1145/3236024.3236075,10.1145/3236024.3236075,11
An empirical study on crash recovery bugs in large-scale distributed systems.,FSE-2018-48,FSE,2018,2018,https://doi.org/10.1145/3236024.3236030,10.1145/3236024.3236030,12
Complementing global and local contexts in representing API descriptions to improve API retrieval tasks.,FSE-2018-49,FSE,2018,2018,https://doi.org/10.1145/3236024.3236036,10.1145/3236024.3236036,12
Phys: probabilistic physical unit assignment and inconsistency detection.,FSE-2018-50,FSE,2018,2018,https://doi.org/10.1145/3236024.3236035,10.1145/3236024.3236035,11
Testing probabilistic programming systems.,FSE-2018-51,FSE,2018,2018,https://doi.org/10.1145/3236024.3236057,10.1145/3236024.3236057,13
Verifying the long-run behavior of probabilistic system models in the presence of uncertainty.,FSE-2018-52,FSE,2018,2018,https://doi.org/10.1145/3236024.3236078,10.1145/3236024.3236078,11
Automated patch extraction via syntax- and semantics-aware Delta debugging on source code changes.,FSE-2018-53,FSE,2018,2018,https://doi.org/10.1145/3236024.3236047,10.1145/3236024.3236047,12
Feedback-directed differential testing of interactive debuggers.,FSE-2018-54,FSE,2018,2018,https://doi.org/10.1145/3236024.3236037,10.1145/3236024.3236037,11
Improving IR-based bug localization with context-aware query reformulation.,FSE-2018-55,FSE,2018,2018,https://doi.org/10.1145/3236024.3236065,10.1145/3236024.3236065,12
How should compilers explain problems to developers?,FSE-2018-56,FSE,2018,2018,https://doi.org/10.1145/3236024.3236040,10.1145/3236024.3236040,11
Ecosystem-level determinants of sustained activity in open-source projects: a case study of the PyPI ecosystem.,FSE-2018-57,FSE,2018,2018,https://doi.org/10.1145/3236024.3236062,10.1145/3236024.3236062,12
Optimizing test prioritization via test distribution analysis.,FSE-2018-58,FSE,2018,2018,https://doi.org/10.1145/3236024.3236053,10.1145/3236024.3236053,12
How well are regular expressions tested in the wild?,FSE-2018-59,FSE,2018,2018,https://doi.org/10.1145/3236024.3236072,10.1145/3236024.3236072,11
Which generated test failures are fault revealing? prioritizing failures based on inferred precondition violations using PAF.,FSE-2018-60,FSE,2018,2018,https://doi.org/10.1145/3236024.3236058,10.1145/3236024.3236058,12
Detection of energy inefficiencies in Android wear watch faces.,FSE-2018-61,FSE,2018,2018,https://doi.org/10.1145/3236024.3236073,10.1145/3236024.3236073,12
Stochastic energy optimization for mobile GPS applications.,FSE-2018-62,FSE,2018,2018,https://doi.org/10.1145/3236024.3236076,10.1145/3236024.3236076,11
Software fairness.,FSE-2018-71,FSE,2018,2018,https://doi.org/10.1145/3236024.3264838,10.1145/3236024.3264838,6
Modeling and testing a family of surgical robots: an experience report.,FSE-2018-77,FSE,2018,2018,https://doi.org/10.1145/3236024.3275534,10.1145/3236024.3275534,6
Efficient static checking of library updates.,FSE-2018-78,FSE,2018,2018,https://doi.org/10.1145/3236024.3275535,10.1145/3236024.3275535,6
Are mobile banking apps secure? what can be improved?,FSE-2018-79,FSE,2018,2018,https://doi.org/10.1145/3236024.3275523,10.1145/3236024.3275523,6
VulSeeker-pro: enhanced semantic learning based binary vulnerability seeker with emulation.,FSE-2018-80,FSE,2018,2018,https://doi.org/10.1145/3236024.3275524,10.1145/3236024.3275524,6
PAFL: extend fuzzing optimizations of single mode to industrial parallel mode.,FSE-2018-81,FSE,2018,2018,https://doi.org/10.1145/3236024.3275525,10.1145/3236024.3275525,6
Software development challenges with air-gap isolation.,FSE-2018-82,FSE,2018,2018,https://doi.org/10.1145/3236024.3275526,10.1145/3236024.3275526,6
Design and validation of precooked developer dashboards.,FSE-2018-83,FSE,2018,2018,https://doi.org/10.1145/3236024.3275530,10.1145/3236024.3275530,6
Testing and validating end user programmed calculated fields.,FSE-2018-84,FSE,2018,2018,https://doi.org/10.1145/3236024.3275531,10.1145/3236024.3275531,6
Automated refactoring of nested-IF formulae in spreadsheets.,FSE-2018-85,FSE,2018,2018,https://doi.org/10.1145/3236024.3275532,10.1145/3236024.3275532,6
FACTS: automated black-box testing of FinTech systems.,FSE-2018-86,FSE,2018,2018,https://doi.org/10.1145/3236024.3275533,10.1145/3236024.3275533,6
Regression test selection for TizenRT.,FSE-2018-87,FSE,2018,2018,https://doi.org/10.1145/3236024.3275527,10.1145/3236024.3275527,6
Building lean continuous integration and delivery pipelines by applying DevOps principles: a case study at Varidesk.,FSE-2018-88,FSE,2018,2018,https://doi.org/10.1145/3236024.3275528,10.1145/3236024.3275528,6
The impact of failing, flaky, and high failure tests on the number of crash reports associated with Firefox builds.,FSE-2018-89,FSE,2018,2018,https://doi.org/10.1145/3236024.3275529,10.1145/3236024.3275529,6
Concolic testing for models of state-based systems.,FSE-2019-3,FSE,2019,2019,https://doi.org/10.1145/3338906.3338908,10.1145/3338906.3338908,12
Target-driven compositional concolic testing with function summary refinement for effective bug detection.,FSE-2019-4,FSE,2019,2019,https://doi.org/10.1145/3338906.3338934,10.1145/3338906.3338934,11
Generating automated and online test oracles for Simulink models with continuous and uncertain behaviors.,FSE-2019-5,FSE,2019,2019,https://doi.org/10.1145/3338906.3338920,10.1145/3338906.3338920,12
Lifting Datalog-based analyses to software product lines.,FSE-2019-6,FSE,2019,2019,https://doi.org/10.1145/3338906.3338928,10.1145/3338906.3338928,11
An empirical study of real-world variability bugs detected by variability-oblivious tools.,FSE-2019-7,FSE,2019,2019,https://doi.org/10.1145/3338906.3338967,10.1145/3338906.3338967,12
Principles of feature modeling.,FSE-2019-8,FSE,2019,2019,https://doi.org/10.1145/3338906.3338974,10.1145/3338906.3338974,12
Understanding GCC builtins to develop better tools.,FSE-2019-9,FSE,2019,2019,https://doi.org/10.1145/3338906.3338907,10.1145/3338906.3338907,12
Assessing the quality of the steps to reproduce in bug reports.,FSE-2019-10,FSE,2019,2019,https://doi.org/10.1145/3338906.3338947,10.1145/3338906.3338947,11
A learning-based approach for automatic construction of domain glossary from source code and documentation.,FSE-2019-11,FSE,2019,2019,https://doi.org/10.1145/3338906.3338963,10.1145/3338906.3338963,12
On using machine learning to identify knowledge in API reference documentation.,FSE-2019-12,FSE,2019,2019,https://doi.org/10.1145/3338906.3338943,10.1145/3338906.3338943,11
Generating query-specific class API summaries.,FSE-2019-13,FSE,2019,2019,https://doi.org/10.1145/3338906.3338971,10.1145/3338906.3338971,11
Semantic relation based expansion of abbreviations.,FSE-2019-14,FSE,2019,2019,https://doi.org/10.1145/3338906.3338929,10.1145/3338906.3338929,11
Diversity-based web test generation.,FSE-2019-15,FSE,2019,2019,https://doi.org/10.1145/3338906.3338970,10.1145/3338906.3338970,12
Web test dependency detection.,FSE-2019-16,FSE,2019,2019,https://doi.org/10.1145/3338906.3338948,10.1145/3338906.3338948,11
Testing scratch programs automatically.,FSE-2019-17,FSE,2019,2019,https://doi.org/10.1145/3338906.3338910,10.1145/3338906.3338910,11
A large-scale empirical study of compiler errors in continuous integration.,FSE-2019-18,FSE,2019,2019,https://doi.org/10.1145/3338906.3338917,10.1145/3338906.3338917,12
A statistics-based performance testing methodology for cloud applications.,FSE-2019-19,FSE,2019,2019,https://doi.org/10.1145/3338906.3338912,10.1145/3338906.3338912,12
How bad can a bug get? an empirical analysis of software failures in the OpenStack cloud computing platform.,FSE-2019-20,FSE,2019,2019,https://doi.org/10.1145/3338906.3338916,10.1145/3338906.3338916,12
Towards more efficient meta-heuristic algorithms for combinatorial test generation.,FSE-2019-21,FSE,2019,2019,https://doi.org/10.1145/3338906.3338914,10.1145/3338906.3338914,11
Compiler bug isolation via effective witness test program generation.,FSE-2019-22,FSE,2019,2019,https://doi.org/10.1145/3338906.3338957,10.1145/3338906.3338957,12
Concolic testing with adaptively changing search heuristics.,FSE-2019-23,FSE,2019,2019,https://doi.org/10.1145/3338906.3338964,10.1145/3338906.3338964,11
Symbolic execution-driven extraction of the parallel execution plans of Spark applications.,FSE-2019-24,FSE,2019,2019,https://doi.org/10.1145/3338906.3338973,10.1145/3338906.3338973,11
Generating effective test cases for self-driving cars from police reports.,FSE-2019-25,FSE,2019,2019,https://doi.org/10.1145/3338906.3338942,10.1145/3338906.3338942,11
Preference-wise testing for Android applications.,FSE-2019-26,FSE,2019,2019,https://doi.org/10.1145/3338906.3338980,10.1145/3338906.3338980,11
Bisecting commits and modeling commit risk during testing.,FSE-2019-27,FSE,2019,2019,https://doi.org/10.1145/3338906.3338944,10.1145/3338906.3338944,11
White-box testing of big data analytics with complex user-defined functions.,FSE-2019-28,FSE,2019,2019,https://doi.org/10.1145/3338906.3338953,10.1145/3338906.3338953,12
Empirical review of Java program repair tools: a large-scale experiment on 2, 141 bugs and 23, 551 repair attempts.,FSE-2019-29,FSE,2019,2019,https://doi.org/10.1145/3338906.3338911,10.1145/3338906.3338911,12
iFixR: bug report driven program repair.,FSE-2019-30,FSE,2019,2019,https://doi.org/10.1145/3338906.3338935,10.1145/3338906.3338935,12
Exploring and exploiting the correlations between bug-inducing and bug-fixing commits.,FSE-2019-31,FSE,2019,2019,https://doi.org/10.1145/3338906.3338962,10.1145/3338906.3338962,12
Effects of explicit feature traceability on program comprehension.,FSE-2019-32,FSE,2019,2019,https://doi.org/10.1145/3338906.3338968,10.1145/3338906.3338968,12
What the fork: a study of inefficient and efficient forking practices in social coding.,FSE-2019-33,FSE,2019,2019,https://doi.org/10.1145/3338906.3338918,10.1145/3338906.3338918,12
ServDroid: detecting service usage inefficiencies in Android applications.,FSE-2019-34,FSE,2019,2019,https://doi.org/10.1145/3338906.3338950,10.1145/3338906.3338950,12
Together strong: cooperative Android app analysis.,FSE-2019-35,FSE,2019,2019,https://doi.org/10.1145/3338906.3338915,10.1145/3338906.3338915,11
A framework for writing trigger-action todo comments in executable format.,FSE-2019-36,FSE,2019,2019,https://doi.org/10.1145/3338906.3338965,10.1145/3338906.3338965,12
Decomposing the rationale of code commits: the software developer's perspective.,FSE-2019-37,FSE,2019,2019,https://doi.org/10.1145/3338906.3338979,10.1145/3338906.3338979,12
Model-based testing of breaking changes in Node.js libraries.,FSE-2019-38,FSE,2019,2019,https://doi.org/10.1145/3338906.3338940,10.1145/3338906.3338940,11
Monitoring-aware IDEs.,FSE-2019-39,FSE,2019,2019,https://doi.org/10.1145/3338906.3338926,10.1145/3338906.3338926,12
Going big: a large-scale study on what big data developers ask.,FSE-2019-40,FSE,2019,2019,https://doi.org/10.1145/3338906.3338939,10.1145/3338906.3338939,11
Why aren't regular expressions a lingua franca? an empirical study on the re-use and portability of regular expressions.,FSE-2019-41,FSE,2019,2019,https://doi.org/10.1145/3338906.3338909,10.1145/3338906.3338909,12
Nodest: feedback-driven static analysis of Node.js applications.,FSE-2019-42,FSE,2019,2019,https://doi.org/10.1145/3338906.3338933,10.1145/3338906.3338933,11
Effective error-specification inference via domain-knowledge expansion.,FSE-2019-43,FSE,2019,2019,https://doi.org/10.1145/3338906.3338960,10.1145/3338906.3338960,11
DeepStellar: model-based quantitative analysis of stateful deep learning systems.,FSE-2019-44,FSE,2019,2019,https://doi.org/10.1145/3338906.3338954,10.1145/3338906.3338954,11
REINAM: reinforcement learning for input-grammar inference.,FSE-2019-45,FSE,2019,2019,https://doi.org/10.1145/3338906.3338958,10.1145/3338906.3338958,11
Boosting operational DNN testing efficiency through conditioning.,FSE-2019-46,FSE,2019,2019,https://doi.org/10.1145/3338906.3338930,10.1145/3338906.3338930,11
A comprehensive study on deep learning bug characteristics.,FSE-2019-47,FSE,2019,2019,https://doi.org/10.1145/3338906.3338955,10.1145/3338906.3338955,11
Just fuzz it: solving floating-point constraints using coverage-guided fuzzing.,FSE-2019-48,FSE,2019,2019,https://doi.org/10.1145/3338906.3338921,10.1145/3338906.3338921,12
Cerebro: context-aware adaptive fuzzing for effective vulnerability detection.,FSE-2019-49,FSE,2019,2019,https://doi.org/10.1145/3338906.3338975,10.1145/3338906.3338975,12
iFixFlakies: a framework for automatically fixing order-dependent flaky tests.,FSE-2019-50,FSE,2019,2019,https://doi.org/10.1145/3338906.3338925,10.1145/3338906.3338925,11
Binary reduction of dependency graphs.,FSE-2019-51,FSE,2019,2019,https://doi.org/10.1145/3338906.3338956,10.1145/3338906.3338956,11
AggrePlay: efficient record and replay of multi-threaded programs.,FSE-2019-52,FSE,2019,2019,https://doi.org/10.1145/3338906.3338959,10.1145/3338906.3338959,11
The review linkage graph for code review analytics: a recovery approach and empirical study.,FSE-2019-53,FSE,2019,2019,https://doi.org/10.1145/3338906.3338949,10.1145/3338906.3338949,12
Mitigating power side channels during compilation.,FSE-2019-54,FSE,2019,2019,https://doi.org/10.1145/3338906.3338913,10.1145/3338906.3338913,12
Maximal multi-layer specification synthesis.,FSE-2019-55,FSE,2019,2019,https://doi.org/10.1145/3338906.3338951,10.1145/3338906.3338951,11
Phoenix: automated data-driven synthesis of repairs for static analysis violations.,FSE-2019-56,FSE,2019,2019,https://doi.org/10.1145/3338906.3338952,10.1145/3338906.3338952,12
Black box fairness testing of machine learning models.,FSE-2019-57,FSE,2019,2019,https://doi.org/10.1145/3338906.3338937,10.1145/3338906.3338937,11
Java reflection API: revealing the dark side of the mirror.,FSE-2019-58,FSE,2019,2019,https://doi.org/10.1145/3338906.3338946,10.1145/3338906.3338946,11
A conceptual replication of continuous integration pain points in the context of Travis CI.,FSE-2019-59,FSE,2019,2019,https://doi.org/10.1145/3338906.3338922,10.1145/3338906.3338922,12
Ethnographic research in software engineering: a critical review and checklist.,FSE-2019-60,FSE,2019,2019,https://doi.org/10.1145/3338906.3338976,10.1145/3338906.3338976,12
Achilles' heel of plug-and-Play software architectures: a grounded theory based approach.,FSE-2019-61,FSE,2019,2019,https://doi.org/10.1145/3338906.3338969,10.1145/3338906.3338969,12
Latent error prediction and fault localization for microservice applications by learning from system trace logs.,FSE-2019-62,FSE,2019,2019,https://doi.org/10.1145/3338906.3338961,10.1145/3338906.3338961,12
The importance of accounting for real-world labelling when predicting software vulnerabilities.,FSE-2019-63,FSE,2019,2019,https://doi.org/10.1145/3338906.3338941,10.1145/3338906.3338941,11
Detecting concurrency memory corruption vulnerabilities.,FSE-2019-64,FSE,2019,2019,https://doi.org/10.1145/3338906.3338927,10.1145/3338906.3338927,12
Locating vulnerabilities in binaries via memory layout recovering.,FSE-2019-65,FSE,2019,2019,https://doi.org/10.1145/3338906.3338966,10.1145/3338906.3338966,11
Storm: program reduction for testing and debugging probabilistic programming systems.,FSE-2019-66,FSE,2019,2019,https://doi.org/10.1145/3338906.3338972,10.1145/3338906.3338972,11
NullAway: practical type-based null safety for Java.,FSE-2019-67,FSE,2019,2019,https://doi.org/10.1145/3338906.3338919,10.1145/3338906.3338919,11
Automatically detecting missing cleanup for ungraceful exits.,FSE-2019-68,FSE,2019,2019,https://doi.org/10.1145/3338906.3338938,10.1145/3338906.3338938,12
Finding and understanding bugs in software model checkers.,FSE-2019-69,FSE,2019,2019,https://doi.org/10.1145/3338906.3338932,10.1145/3338906.3338932,11
A segmented memory model for symbolic execution.,FSE-2019-70,FSE,2019,2019,https://doi.org/10.1145/3338906.3338936,10.1145/3338906.3338936,11
Releasing fast and slow: an exploratory case study at ING.,FSE-2019-71,FSE,2019,2019,https://doi.org/10.1145/3338906.3338978,10.1145/3338906.3338978,11
SAR: learning cross-language API mappings with little knowledge.,FSE-2019-72,FSE,2019,2019,https://doi.org/10.1145/3338906.3338924,10.1145/3338906.3338924,11
Robust log-based anomaly detection on unstable log data.,FSE-2019-73,FSE,2019,2019,https://doi.org/10.1145/3338906.3338931,10.1145/3338906.3338931,11
Pinpointing performance inefficiencies in Java.,FSE-2019-74,FSE,2019,2019,https://doi.org/10.1145/3338906.3338923,10.1145/3338906.3338923,12
Understanding flaky tests: the developer's perspective.,FSE-2019-75,FSE,2019,2019,https://doi.org/10.1145/3338906.3338945,10.1145/3338906.3338945,11
SEntiMoji: an emoji-powered learning approach for sentiment analysis in software engineering.,FSE-2019-76,FSE,2019,2019,https://doi.org/10.1145/3338906.3338977,10.1145/3338906.3338977,12
FinExpert: domain-specific test generation for FinTech systems.,FSE-2019-77,FSE,2019,2019,https://doi.org/10.1145/3338906.3340441,10.1145/3338906.3340441,10
Design diagrams as ontological source.,FSE-2019-78,FSE,2019,2019,https://doi.org/10.1145/3338906.3340446,10.1145/3338906.3340446,11
Predicting pull request completion time: a case study on large scale cloud services.,FSE-2019-79,FSE,2019,2019,https://doi.org/10.1145/3338906.3340457,10.1145/3338906.3340457,9
TERMINATOR: better automated UI test case prioritization.,FSE-2019-80,FSE,2019,2019,https://doi.org/10.1145/3338906.3340448,10.1145/3338906.3340448,12
Risks and assets: a qualitative study of a software ecosystem in the mining industry.,FSE-2019-81,FSE,2019,2019,https://doi.org/10.1145/3338906.3340443,10.1145/3338906.3340443,10
Using microservices for non-intrusive customization of multi-tenant SaaS.,FSE-2019-82,FSE,2019,2019,https://doi.org/10.1145/3338906.3340452,10.1145/3338906.3340452,11
Predicting breakdowns in cloud services (with SPIKE).,FSE-2019-83,FSE,2019,2019,https://doi.org/10.1145/3338906.3340450,10.1145/3338906.3340450,9
DeepDelta: learning to repair compilation errors.,FSE-2019-84,FSE,2019,2019,https://doi.org/10.1145/3338906.3340455,10.1145/3338906.3340455,12
WhoDo: automating reviewer suggestions at scale.,FSE-2019-85,FSE,2019,2019,https://doi.org/10.1145/3338906.3340449,10.1145/3338906.3340449,9
An IR-based approach towards automated integration of geo-spatial datasets in map-based software systems.,FSE-2019-86,FSE,2019,2019,https://doi.org/10.1145/3338906.3340454,10.1145/3338906.3340454,9
Code coverage at Google.,FSE-2019-87,FSE,2019,2019,https://doi.org/10.1145/3338906.3340459,10.1145/3338906.3340459,9
When deep learning met code search.,FSE-2019-88,FSE,2019,2019,https://doi.org/10.1145/3338906.3340458,10.1145/3338906.3340458,11
FUDGE: fuzz driver generation at scale.,FSE-2019-89,FSE,2019,2019,https://doi.org/10.1145/3338906.3340456,10.1145/3338906.3340456,11
Industry practice of coverage-guided enterprise Linux kernel fuzzing.,FSE-2019-90,FSE,2019,2019,https://doi.org/10.1145/3338906.3340460,10.1145/3338906.3340460,10
Architectural decision forces at work: experiences in an industrial consultancy setting.,FSE-2019-91,FSE,2019,2019,https://doi.org/10.1145/3338906.3340461,10.1145/3338906.3340461,10
The role of limitations and SLAs in the API industry.,FSE-2019-92,FSE,2019,2019,https://doi.org/10.1145/3338906.3340445,10.1145/3338906.3340445,9
Evaluating model testing and model checking for finding requirements violations in Simulink models.,FSE-2019-93,FSE,2019,2019,https://doi.org/10.1145/3338906.3340444,10.1145/3338906.3340444,11
Model checking a C++ software framework: a case study.,FSE-2019-94,FSE,2019,2019,https://doi.org/10.1145/3338906.3340453,10.1145/3338906.3340453,11
Evolving with patterns: a 31-month startup experience report.,FSE-2019-95,FSE,2019,2019,https://doi.org/10.1145/3338906.3340447,10.1145/3338906.3340447,11
Bridging the gap between ML solutions and their business requirements using feature interactions.,FSE-2019-96,FSE,2019,2019,https://doi.org/10.1145/3338906.3340442,10.1145/3338906.3340442,11
Design thinking in practice: understanding manifestations of design thinking in software engineering.,FSE-2019-97,FSE,2019,2019,https://doi.org/10.1145/3338906.3340451,10.1145/3338906.3340451,11
A behavioral notion of robustness for software systems.,FSE-2020-0,FSE,2020,2020,https://doi.org/10.1145/3368089.3409753,10.1145/3368089.3409753,12
ARDiff: scaling program equivalence checking via iterative abstraction and refinement of common code.,FSE-2020-1,FSE,2020,2020,https://doi.org/10.1145/3368089.3409757,10.1145/3368089.3409757,12
C2S: translating natural language comments to formal program specifications.,FSE-2020-2,FSE,2020,2020,https://doi.org/10.1145/3368089.3409716,10.1145/3368089.3409716,13
Detecting and understanding JavaScript global identifier conflicts on the web.,FSE-2020-3,FSE,2020,2020,https://doi.org/10.1145/3368089.3409747,10.1145/3368089.3409747,12
Domain-independent interprocedural program analysis using block-abstraction memoization.,FSE-2020-4,FSE,2020,2020,https://doi.org/10.1145/3368089.3409718,10.1145/3368089.3409718,13
Flexeme: untangling commits using lexical flows.,FSE-2020-5,FSE,2020,2020,https://doi.org/10.1145/3368089.3409693,10.1145/3368089.3409693,12
HISyn: human learning-inspired natural language programming.,FSE-2020-6,FSE,2020,2020,https://doi.org/10.1145/3368089.3409673,10.1145/3368089.3409673,12
Inductive program synthesis over noisy data.,FSE-2020-7,FSE,2020,2020,https://doi.org/10.1145/3368089.3409732,10.1145/3368089.3409732,12
Inherent vacuity for GR(1) specifications.,FSE-2020-8,FSE,2020,2020,https://doi.org/10.1145/3368089.3409669,10.1145/3368089.3409669,12
Interval counterexamples for loop invariant learning.,FSE-2020-9,FSE,2020,2020,https://doi.org/10.1145/3368089.3409752,10.1145/3368089.3409752,12
Java Ranger: statically summarizing regions for efficient symbolic execution of Java.,FSE-2020-10,FSE,2020,2020,https://doi.org/10.1145/3368089.3409734,10.1145/3368089.3409734,12
JShrink: in-depth investigation into debloating modern Java applications.,FSE-2020-11,FSE,2020,2020,https://doi.org/10.1145/3368089.3409738,10.1145/3368089.3409738,12
Making symbolic execution promising by learning aggressive state-pruning strategy.,FSE-2020-12,FSE,2020,2020,https://doi.org/10.1145/3368089.3409755,10.1145/3368089.3409755,12
Mining assumptions for software components using machine learning.,FSE-2020-13,FSE,2020,2020,https://doi.org/10.1145/3368089.3409737,10.1145/3368089.3409737,13
Mining input grammars from dynamic control flow.,FSE-2020-14,FSE,2020,2020,https://doi.org/10.1145/3368089.3409679,10.1145/3368089.3409679,12
Modular collaborative program analysis in OPAL.,FSE-2020-15,FSE,2020,2020,https://doi.org/10.1145/3368089.3409765,10.1145/3368089.3409765,13
Past-sensitive pointer analysis for symbolic execution.,FSE-2020-16,FSE,2020,2020,https://doi.org/10.1145/3368089.3409698,10.1145/3368089.3409698,12
TypeWriter: neural type prediction with search-based validation.,FSE-2020-17,FSE,2020,2020,https://doi.org/10.1145/3368089.3409715,10.1145/3368089.3409715,12
UBITect: a precise and scalable method to detect use-before-initialization bugs in Linux kernel.,FSE-2020-18,FSE,2020,2020,https://doi.org/10.1145/3368089.3409686,10.1145/3368089.3409686,12
Exploring how deprecated Python library APIs are (not) handled.,FSE-2020-19,FSE,2020,2020,https://doi.org/10.1145/3368089.3409735,10.1145/3368089.3409735,12
Selecting third-party libraries: the practitioners' perspective.,FSE-2020-20,FSE,2020,2020,https://doi.org/10.1145/3368089.3409711,10.1145/3368089.3409711,12
A principled approach to GraphQL query cost analysis.,FSE-2020-21,FSE,2020,2020,https://doi.org/10.1145/3368089.3409670,10.1145/3368089.3409670,12
Beware the evolving 'intelligent' web service! an integration architecture tactic to guard AI-first components.,FSE-2020-22,FSE,2020,2020,https://doi.org/10.1145/3368089.3409688,10.1145/3368089.3409688,12
Block public access: trust safety verification of access control policies.,FSE-2020-23,FSE,2020,2020,https://doi.org/10.1145/3368089.3409728,10.1145/3368089.3409728,11
Efficient incident identification from multi-dimensional issue reports via meta-heuristic search.,FSE-2020-24,FSE,2020,2020,https://doi.org/10.1145/3368089.3409741,10.1145/3368089.3409741,12
Identifying linked incidents in large-scale online service systems.,FSE-2020-25,FSE,2020,2020,https://doi.org/10.1145/3368089.3409768,10.1145/3368089.3409768,11
Real-time incident prediction for online service systems.,FSE-2020-26,FSE,2020,2020,https://doi.org/10.1145/3368089.3409672,10.1145/3368089.3409672,12
Configuration smells in continuous delivery pipelines: a linter and a six-month study on GitLab.,FSE-2020-27,FSE,2020,2020,https://doi.org/10.1145/3368089.3409709,10.1145/3368089.3409709,11
Dimensions of software configuration: on the configuration context in modern software development.,FSE-2020-28,FSE,2020,2020,https://doi.org/10.1145/3368089.3409675,10.1145/3368089.3409675,12
Global cost/quality management across multiple applications.,FSE-2020-29,FSE,2020,2020,https://doi.org/10.1145/3368089.3409721,10.1145/3368089.3409721,12
Understanding and discovering software configuration dependencies in cloud and datacenter systems.,FSE-2020-30,FSE,2020,2020,https://doi.org/10.1145/3368089.3409727,10.1145/3368089.3409727,13
Docable: evaluating the executability of software tutorials.,FSE-2020-31,FSE,2020,2020,https://doi.org/10.1145/3368089.3409706,10.1145/3368089.3409706,11
RulePad: interactive authoring of checkable design rules.,FSE-2020-32,FSE,2020,2020,https://doi.org/10.1145/3368089.3409751,10.1145/3368089.3409751,12
A first look at good first issues on GitHub.,FSE-2020-33,FSE,2020,2020,https://doi.org/10.1145/3368089.3409746,10.1145/3368089.3409746,12
A randomized controlled trial on the effects of embedded computer language switching.,FSE-2020-34,FSE,2020,2020,https://doi.org/10.1145/3368089.3409701,10.1145/3368089.3409701,11
A theory of the engagement in open source projects via summer of code programs.,FSE-2020-35,FSE,2020,2020,https://doi.org/10.1145/3368089.3409724,10.1145/3368089.3409724,11
An empirical analysis of the costs of clone- and platform-oriented software reuse.,FSE-2020-36,FSE,2020,2020,https://doi.org/10.1145/3368089.3409684,10.1145/3368089.3409684,13
An empirical study of bots in software development: characteristics and challenges from a practitioner's perspective.,FSE-2020-37,FSE,2020,2020,https://doi.org/10.1145/3368089.3409680,10.1145/3368089.3409680,11
Biases and differences in code review using medical imaging and eye-tracking: genders, humans, and machines.,FSE-2020-38,FSE,2020,2020,https://doi.org/10.1145/3368089.3409681,10.1145/3368089.3409681,13
Community expectations for research artifacts and evaluation processes.,FSE-2020-39,FSE,2020,2020,https://doi.org/10.1145/3368089.3409767,10.1145/3368089.3409767,12
Does stress impact technical interview performance?,FSE-2020-40,FSE,2020,2020,https://doi.org/10.1145/3368089.3409712,10.1145/3368089.3409712,12
Exploring the evolution of software practices.,FSE-2020-41,FSE,2020,2020,https://doi.org/10.1145/3368089.3409766,10.1145/3368089.3409766,12
Heard it through the Gitvine: an empirical study of tool diffusion across the npm ecosystem.,FSE-2020-42,FSE,2020,2020,https://doi.org/10.1145/3368089.3409705,10.1145/3368089.3409705,13
Interactive, effort-aware library version harmonization.,FSE-2020-43,FSE,2020,2020,https://doi.org/10.1145/3368089.3409689,10.1145/3368089.3409689,12
On the naturalness of hardware descriptions.,FSE-2020-44,FSE,2020,2020,https://doi.org/10.1145/3368089.3409692,10.1145/3368089.3409692,13
On the relationship between design discussions and design quality: a case study of Apache projects.,FSE-2020-45,FSE,2020,2020,https://doi.org/10.1145/3368089.3409707,10.1145/3368089.3409707,13
On the relationship between refactoring actions and bugs: a differentiated replication.,FSE-2020-46,FSE,2020,2020,https://doi.org/10.1145/3368089.3409695,10.1145/3368089.3409695,12
Questions for data scientists in software engineering: a replication.,FSE-2020-47,FSE,2020,2020,https://doi.org/10.1145/3368089.3409717,10.1145/3368089.3409717,12
Reducing implicit gender biases in software development: does intergroup contact theory work?,FSE-2020-48,FSE,2020,2020,https://doi.org/10.1145/3368089.3409762,10.1145/3368089.3409762,13
Robotics software engineering: a perspective from the service robotics domain.,FSE-2020-49,FSE,2020,2020,https://doi.org/10.1145/3368089.3409743,10.1145/3368089.3409743,12
Thinking aloud about confusing code: a qualitative investigation of program comprehension and atoms of confusion.,FSE-2020-50,FSE,2020,2020,https://doi.org/10.1145/3368089.3409714,10.1145/3368089.3409714,12
Understanding build issue resolution in practice: symptoms and fix patterns.,FSE-2020-51,FSE,2020,2020,https://doi.org/10.1145/3368089.3409760,10.1145/3368089.3409760,12
Understanding type changes in Java.,FSE-2020-52,FSE,2020,2020,https://doi.org/10.1145/3368089.3409725,10.1145/3368089.3409725,13
Do the machine learning models on a crowd sourced platform exhibit bias? an empirical study on model fairness.,FSE-2020-53,FSE,2020,2020,https://doi.org/10.1145/3368089.3409704,10.1145/3368089.3409704,12
Fairway: a way to build fair ML software.,FSE-2020-54,FSE,2020,2020,https://doi.org/10.1145/3368089.3409697,10.1145/3368089.3409697,12
Towards automated verification of smart contract fairness.,FSE-2020-55,FSE,2020,2020,https://doi.org/10.1145/3368089.3409740,10.1145/3368089.3409740,12
Boosting fuzzer efficiency: an information theoretic perspective.,FSE-2020-56,FSE,2020,2020,https://doi.org/10.1145/3368089.3409748,10.1145/3368089.3409748,12
CrFuzz: fuzzing multi-purpose programs through input validation.,FSE-2020-57,FSE,2020,2020,https://doi.org/10.1145/3368089.3409769,10.1145/3368089.3409769,11
Detecting critical bugs in SMT solvers using blackbox mutational fuzzing.,FSE-2020-58,FSE,2020,2020,https://doi.org/10.1145/3368089.3409763,10.1145/3368089.3409763,12
Fuzzing: on the exponential cost of vulnerability discovery.,FSE-2020-59,FSE,2020,2020,https://doi.org/10.1145/3368089.3409729,10.1145/3368089.3409729,12
Intelligent REST API data fuzzing.,FSE-2020-60,FSE,2020,2020,https://doi.org/10.1145/3368089.3409719,10.1145/3368089.3409719,12
MTFuzz: fuzzing with a multi-task neural network.,FSE-2020-61,FSE,2020,2020,https://doi.org/10.1145/3368089.3409723,10.1145/3368089.3409723,13
A comprehensive study on challenges in deploying deep learning based software.,FSE-2020-62,FSE,2020,2020,https://doi.org/10.1145/3368089.3409759,10.1145/3368089.3409759,13
AMS: generating AutoML search spaces from weak specifications.,FSE-2020-63,FSE,2020,2020,https://doi.org/10.1145/3368089.3409700,10.1145/3368089.3409700,12
Correlations between deep neural network model coverage criteria and model quality.,FSE-2020-64,FSE,2020,2020,https://doi.org/10.1145/3368089.3409671,10.1145/3368089.3409671,13
Deep learning library testing via effective model generation.,FSE-2020-65,FSE,2020,2020,https://doi.org/10.1145/3368089.3409761,10.1145/3368089.3409761,12
DeepSearch: a simple and effective blackbox attack for deep neural networks.,FSE-2020-66,FSE,2020,2020,https://doi.org/10.1145/3368089.3409750,10.1145/3368089.3409750,13
DENAS: automated rule generation by knowledge extraction from neural networks.,FSE-2020-67,FSE,2020,2020,https://doi.org/10.1145/3368089.3409733,10.1145/3368089.3409733,13
Detecting numerical bugs in neural network architectures.,FSE-2020-68,FSE,2020,2020,https://doi.org/10.1145/3368089.3409720,10.1145/3368089.3409720,12
Dynamic slicing for deep neural networks.,FSE-2020-69,FSE,2020,2020,https://doi.org/10.1145/3368089.3409676,10.1145/3368089.3409676,13
Is neuron coverage a meaningful measure for testing deep neural networks?,FSE-2020-70,FSE,2020,2020,https://doi.org/10.1145/3368089.3409754,10.1145/3368089.3409754,12
Machine translation testing via pathological invariance.,FSE-2020-71,FSE,2020,2020,https://doi.org/10.1145/3368089.3409756,10.1145/3368089.3409756,13
Model-based exploration of the frontier of behaviours for deep learning system testing.,FSE-2020-72,FSE,2020,2020,https://doi.org/10.1145/3368089.3409730,10.1145/3368089.3409730,13
On decomposing a deep neural network into modules.,FSE-2020-73,FSE,2020,2020,https://doi.org/10.1145/3368089.3409668,10.1145/3368089.3409668,12
Operational calibration: debugging confidence errors for DNNs in the field.,FSE-2020-74,FSE,2020,2020,https://doi.org/10.1145/3368089.3409696,10.1145/3368089.3409696,13
All your app links are belong to us: understanding the threats of instant apps based attacks.,FSE-2020-75,FSE,2020,2020,https://doi.org/10.1145/3368089.3409702,10.1145/3368089.3409702,13
Automated construction of energy test oracles for Android.,FSE-2020-76,FSE,2020,2020,https://doi.org/10.1145/3368089.3409677,10.1145/3368089.3409677,12
Borrowing your enemy's arrows: the case of code reuse in Android via direct inter-app code invocation.,FSE-2020-77,FSE,2020,2020,https://doi.org/10.1145/3368089.3409745,10.1145/3368089.3409745,13
Static asynchronous component misuse detection for Android applications.,FSE-2020-78,FSE,2020,2020,https://doi.org/10.1145/3368089.3409699,10.1145/3368089.3409699,12
Automatically identifying performance issue reports with heuristic linguistic patterns.,FSE-2020-79,FSE,2020,2020,https://doi.org/10.1145/3368089.3409674,10.1145/3368089.3409674,12
Calm energy accounting for multithreaded Java applications.,FSE-2020-80,FSE,2020,2020,https://doi.org/10.1145/3368089.3409703,10.1145/3368089.3409703,13
Dynamically reconfiguring software microbenchmarks: reducing execution time without sacrificing result quality.,FSE-2020-81,FSE,2020,2020,https://doi.org/10.1145/3368089.3409683,10.1145/3368089.3409683,13
Testing self-adaptive software with probabilistic guarantees on performance metrics.,FSE-2020-82,FSE,2020,2020,https://doi.org/10.1145/3368089.3409685,10.1145/3368089.3409685,13
API method recommendation via explicit matching of functionality verb phrases.,FSE-2020-83,FSE,2020,2020,https://doi.org/10.1145/3368089.3409731,10.1145/3368089.3409731,12
Code recommendation for exception handling.,FSE-2020-84,FSE,2020,2020,https://doi.org/10.1145/3368089.3409690,10.1145/3368089.3409690,12
eQual: informing early design decisions.,FSE-2020-85,FSE,2020,2020,https://doi.org/10.1145/3368089.3409749,10.1145/3368089.3409749,13
Recommending stack overflow posts for fixing runtime exceptions using failure scenario matching.,FSE-2020-86,FSE,2020,2020,https://doi.org/10.1145/3368089.3409764,10.1145/3368089.3409764,13
Understanding the impact of GitHub suggested changes on recommendations between developers.,FSE-2020-87,FSE,2020,2020,https://doi.org/10.1145/3368089.3409722,10.1145/3368089.3409722,12
An evaluation of methods to port legacy code to SGX enclaves.,FSE-2020-88,FSE,2020,2020,https://doi.org/10.1145/3368089.3409726,10.1145/3368089.3409726,12
Search-based adversarial testing and improvement of constrained credit scoring systems.,FSE-2020-89,FSE,2020,2020,https://doi.org/10.1145/3368089.3409739,10.1145/3368089.3409739,12
SinkFinder: harvesting hundreds of unknown interesting function pairs with just one seed.,FSE-2020-90,FSE,2020,2020,https://doi.org/10.1145/3368089.3409678,10.1145/3368089.3409678,13
Baital: an adaptive weighted sampling approach for improved t-wise coverage.,FSE-2020-91,FSE,2020,2020,https://doi.org/10.1145/3368089.3409744,10.1145/3368089.3409744,13
Cost measures matter for mutation testing study validity.,FSE-2020-92,FSE,2020,2020,https://doi.org/10.1145/3368089.3409742,10.1145/3368089.3409742,13
Detecting optimization bugs in database engines via non-optimizing reference engine construction.,FSE-2020-93,FSE,2020,2020,https://doi.org/10.1145/3368089.3409710,10.1145/3368089.3409710,13
Efficient binary-level coverage analysis.,FSE-2020-94,FSE,2020,2020,https://doi.org/10.1145/3368089.3409694,10.1145/3368089.3409694,12
Efficiently finding higher-order mutants.,FSE-2020-95,FSE,2020,2020,https://doi.org/10.1145/3368089.3409713,10.1145/3368089.3409713,13
Evolutionary improvement of assertion oracles.,FSE-2020-96,FSE,2020,2020,https://doi.org/10.1145/3368089.3409758,10.1145/3368089.3409758,12
FrUITeR: a framework for evaluating UI test reuse.,FSE-2020-97,FSE,2020,2020,https://doi.org/10.1145/3368089.3409708,10.1145/3368089.3409708,12
Object detection for graphical user interface: old fashioned or deep learning or a combination?,FSE-2020-98,FSE,2020,2020,https://doi.org/10.1145/3368089.3409691,10.1145/3368089.3409691,13
Understanding and automatically detecting conflicting interactions between smart home IoT applications.,FSE-2020-99,FSE,2020,2020,https://doi.org/10.1145/3368089.3409682,10.1145/3368089.3409682,13
When does my program do this? learning circumstances of software behavior.,FSE-2020-100,FSE,2020,2020,https://doi.org/10.1145/3368089.3409687,10.1145/3368089.3409687,12
A first look at the integration of machine learning models in complex autonomous driving systems: a case study on Apollo.,FSE-2020-101,FSE,2020,2020,https://doi.org/10.1145/3368089.3417063,10.1145/3368089.3417063,11
Adapting bug prediction models to predict reverted commits at Wayfair.,FSE-2020-102,FSE,2020,2020,https://doi.org/10.1145/3368089.3417062,10.1145/3368089.3417062,12
Can microtask programming work in industry?,FSE-2020-103,FSE,2020,2020,https://doi.org/10.1145/3368089.3417046,10.1145/3368089.3417046,11
Change impact analysis in Simulink designs of embedded systems.,FSE-2020-104,FSE,2020,2020,https://doi.org/10.1145/3368089.3417060,10.1145/3368089.3417060,11
Clustering test steps in natural language toward automating test automation.,FSE-2020-105,FSE,2020,2020,https://doi.org/10.1145/3368089.3417067,10.1145/3368089.3417067,11
Efficient customer incident triage via linking with system incidents.,FSE-2020-106,FSE,2020,2020,https://doi.org/10.1145/3368089.3417061,10.1145/3368089.3417061,12
Effort-aware just-in-time defect identification in practice: a case study at Alibaba.,FSE-2020-107,FSE,2020,2020,https://doi.org/10.1145/3368089.3417048,10.1145/3368089.3417048,12
Enhancing the interoperability between deep learning frameworks by model conversion.,FSE-2020-108,FSE,2020,2020,https://doi.org/10.1145/3368089.3417051,10.1145/3368089.3417051,11
Establishing key performance indicators for measuring software-development processes at a large organization.,FSE-2020-109,FSE,2020,2020,https://doi.org/10.1145/3368089.3417057,10.1145/3368089.3417057,11
Estimating GPU memory consumption of deep learning models.,FSE-2020-110,FSE,2020,2020,https://doi.org/10.1145/3368089.3417050,10.1145/3368089.3417050,11
Exempla gratis (E.G.): code examples for free.,FSE-2020-111,FSE,2020,2020,https://doi.org/10.1145/3368089.3417052,10.1145/3368089.3417052,12
Fireteam: a small-team development practice in industry.,FSE-2020-112,FSE,2020,2020,https://doi.org/10.1145/3368089.3417068,10.1145/3368089.3417068,11
FREPA: an automated and formal approach to requirement modeling and analysis in aircraft control domain.,FSE-2020-113,FSE,2020,2020,https://doi.org/10.1145/3368089.3417047,10.1145/3368089.3417047,11
Graph-based trace analysis for microservice architecture understanding and problem diagnosis.,FSE-2020-114,FSE,2020,2020,https://doi.org/10.1145/3368089.3417066,10.1145/3368089.3417066,11
Harvey: a greybox fuzzer for smart contracts.,FSE-2020-115,FSE,2020,2020,https://doi.org/10.1145/3368089.3417064,10.1145/3368089.3417064,12
How to mitigate the incident? an effective troubleshooting guide recommendation technique for online service systems.,FSE-2020-116,FSE,2020,2020,https://doi.org/10.1145/3368089.3417054,10.1145/3368089.3417054,11
Improving cybersecurity hygiene through JIT patching.,FSE-2020-117,FSE,2020,2020,https://doi.org/10.1145/3368089.3417056,10.1145/3368089.3417056,12
IntelliCode compose: code generation using transformer.,FSE-2020-118,FSE,2020,2020,https://doi.org/10.1145/3368089.3417058,10.1145/3368089.3417058,11
Learning to extract transaction function from requirements: an industrial case on financial software.,FSE-2020-119,FSE,2020,2020,https://doi.org/10.1145/3368089.3417053,10.1145/3368089.3417053,11
Online sports betting through the prism of software engineering.,FSE-2020-120,FSE,2020,2020,https://doi.org/10.1145/3368089.3417049,10.1145/3368089.3417049,11
Reducing DNN labelling cost using surprise adequacy: an industrial case study for autonomous driving.,FSE-2020-121,FSE,2020,2020,https://doi.org/10.1145/3368089.3417065,10.1145/3368089.3417065,11
Scaling static taint analysis to industrial SOA applications: a case study at Alibaba.,FSE-2020-122,FSE,2020,2020,https://doi.org/10.1145/3368089.3417059,10.1145/3368089.3417059,10
Towards intelligent incident management: why we need it and how we make it.,FSE-2020-123,FSE,2020,2020,https://doi.org/10.1145/3368089.3417055,10.1145/3368089.3417055,11
WebRR: self-replay enhanced robust record/replay for web application testing.,FSE-2020-124,FSE,2020,2020,https://doi.org/10.1145/3368089.3417069,10.1145/3368089.3417069,11
Hazard analysis for human-on-the-loop interactions in sUAS systems.,FSE-2021-6,FSE,2021,2021,https://doi.org/10.1145/3468264.3468534,10.1145/3468264.3468534,12
An exploratory study of autopilot software bugs in unmanned aerial vehicles.,FSE-2021-7,FSE,2021,2021,https://doi.org/10.1145/3468264.3468559,10.1145/3468264.3468559,12
Code integrity attestation for PLCs using black box neural network predictions.,FSE-2021-8,FSE,2021,2021,https://doi.org/10.1145/3468264.3468617,10.1145/3468264.3468617,13
PHYSFRAME: type checking physical frames of reference for robotic systems.,FSE-2021-9,FSE,2021,2021,https://doi.org/10.1145/3468264.3468608,10.1145/3468264.3468608,12
Automating serverless deployments for DevOps organizations.,FSE-2021-10,FSE,2021,2021,https://doi.org/10.1145/3468264.3468575,10.1145/3468264.3468575,13
Algebraic-datatype taint tracking, with applications to understanding Android identifier leaks.,FSE-2021-11,FSE,2021,2021,https://doi.org/10.1145/3468264.3468550,10.1145/3468264.3468550,13
Vet: identifying and avoiding UI exploration tarpits.,FSE-2021-12,FSE,2021,2021,https://doi.org/10.1145/3468264.3468554,10.1145/3468264.3468554,12
Checking conformance of applications against GUI policies.,FSE-2021-13,FSE,2021,2021,https://doi.org/10.1145/3468264.3468561,10.1145/3468264.3468561,12
Data-driven accessibility repair revisited: on the effectiveness of generating labels for icons in Android apps.,FSE-2021-14,FSE,2021,2021,https://doi.org/10.1145/3468264.3468604,10.1145/3468264.3468604,12
Benchmarking automated GUI testing for Android against real-world bugs.,FSE-2021-15,FSE,2021,2021,https://doi.org/10.1145/3468264.3468620,10.1145/3468264.3468620,12
Checking LTL[F, G, X] on compressed traces in polynomial time.,FSE-2021-16,FSE,2021,2021,https://doi.org/10.1145/3468264.3468557,10.1145/3468264.3468557,13
Conditional interpolation: making concurrent program verification more effective.,FSE-2021-17,FSE,2021,2021,https://doi.org/10.1145/3468264.3468602,10.1145/3468264.3468602,11
AlloyMax: bringing maximum satisfaction to relational specifications.,FSE-2021-18,FSE,2021,2021,https://doi.org/10.1145/3468264.3468587,10.1145/3468264.3468587,13
Timely and accurate detection of model deviation in self-adaptive software-intensive systems.,FSE-2021-19,FSE,2021,2021,https://doi.org/10.1145/3468264.3468548,10.1145/3468264.3468548,13
Lightweight and modular resource leak verification.,FSE-2021-20,FSE,2021,2021,https://doi.org/10.1145/3468264.3468576,10.1145/3468264.3468576,12
JSISOLATE: lightweight in-browser JavaScript isolation.,FSE-2021-21,FSE,2021,2021,https://doi.org/10.1145/3468264.3468577,10.1145/3468264.3468577,12
Cross-language code search using static and dynamic analyses.,FSE-2021-22,FSE,2021,2021,https://doi.org/10.1145/3468264.3468538,10.1145/3468264.3468538,13
Automating the removal of obsolete TODO comments.,FSE-2021-23,FSE,2021,2021,https://doi.org/10.1145/3468264.3468553,10.1145/3468264.3468553,12
Estimating residual risk in greybox fuzzing.,FSE-2021-24,FSE,2021,2021,https://doi.org/10.1145/3468264.3468570,10.1145/3468264.3468570,12
HeteroFuzz: fuzz testing to detect platform dependent divergence for heterogeneous applications.,FSE-2021-25,FSE,2021,2021,https://doi.org/10.1145/3468264.3468610,10.1145/3468264.3468610,13
Sound and efficient concurrency bug prediction.,FSE-2021-26,FSE,2021,2021,https://doi.org/10.1145/3468264.3468549,10.1145/3468264.3468549,13
Detecting Node.js prototype pollution vulnerabilities via object lookup analysis.,FSE-2021-27,FSE,2021,2021,https://doi.org/10.1145/3468264.3468542,10.1145/3468264.3468542,12
Detecting concurrency vulnerabilities based on partial orders of memory and thread events.,FSE-2021-28,FSE,2021,2021,https://doi.org/10.1145/3468264.3468572,10.1145/3468264.3468572,12
Vulnerability detection with fine-grained interpretations.,FSE-2021-29,FSE,2021,2021,https://doi.org/10.1145/3468264.3468597,10.1145/3468264.3468597,12
Identifying casualty changes in software patches.,FSE-2021-30,FSE,2021,2021,https://doi.org/10.1145/3468264.3468624,10.1145/3468264.3468624,12
ACHyb: a hybrid analysis approach to detect kernel access control vulnerabilities.,FSE-2021-31,FSE,2021,2021,https://doi.org/10.1145/3468264.3468627,10.1145/3468264.3468627,12
Context-aware and data-driven feedback generation for programming assignments.,FSE-2021-32,FSE,2021,2021,https://doi.org/10.1145/3468264.3468598,10.1145/3468264.3468598,13
A syntax-guided edit decoder for neural program repair.,FSE-2021-33,FSE,2021,2021,https://doi.org/10.1145/3468264.3468544,10.1145/3468264.3468544,13
VarFix: balancing edit expressiveness and search effectiveness in automated program repair.,FSE-2021-34,FSE,2021,2021,https://doi.org/10.1145/3468264.3468600,10.1145/3468264.3468600,13
Flaky test detection in Android via event order exploration.,FSE-2021-35,FSE,2021,2021,https://doi.org/10.1145/3468264.3468584,10.1145/3468264.3468584,12
SmartCommit: a graph-based interactive assistant for activity-oriented commits.,FSE-2021-36,FSE,2021,2021,https://doi.org/10.1145/3468264.3468551,10.1145/3468264.3468551,12
A first look at developers' live chat on Gitter.,FSE-2021-37,FSE,2021,2021,https://doi.org/10.1145/3468264.3468562,10.1145/3468264.3468562,13
Reel life vs. real life: how software developers share their daily life through vlogs.,FSE-2021-38,FSE,2021,2021,https://doi.org/10.1145/3468264.3468599,10.1145/3468264.3468599,12
An empirical study on challenges of application development in serverless computing.,FSE-2021-39,FSE,2021,2021,https://doi.org/10.1145/3468264.3468558,10.1145/3468264.3468558,13
Bias in machine learning software: why? how? what to do?,FSE-2021-40,FSE,2021,2021,https://doi.org/10.1145/3468264.3468537,10.1145/3468264.3468537,12
Understanding neural code intelligence through program simplification.,FSE-2021-41,FSE,2021,2021,https://doi.org/10.1145/3468264.3468539,10.1145/3468264.3468539,12
Multi-objectivizing software configuration tuning.,FSE-2021-42,FSE,2021,2021,https://doi.org/10.1145/3468264.3468555,10.1145/3468264.3468555,13
Embedding app-library graph for neural third party library recommendation.,FSE-2021-43,FSE,2021,2021,https://doi.org/10.1145/3468264.3468552,10.1145/3468264.3468552,12
A large-scale empirical study on Java library migrations: prevalence, trends, and rationales.,FSE-2021-44,FSE,2021,2021,https://doi.org/10.1145/3468264.3468571,10.1145/3468264.3468571,13
Learning-based extraction of first-order logic representations of API directives.,FSE-2021-45,FSE,2021,2021,https://doi.org/10.1145/3468264.3468618,10.1145/3468264.3468618,12
DIFFBASE: a differential factbase for effective software evolution management.,FSE-2021-46,FSE,2021,2021,https://doi.org/10.1145/3468264.3468605,10.1145/3468264.3468605,13
Would you like a quick peek? providing logging support to monitor data processing in big data applications.,FSE-2021-47,FSE,2021,2021,https://doi.org/10.1145/3468264.3468613,10.1145/3468264.3468613,11
Identifying bad software changes via multimodal anomaly detection for online service systems.,FSE-2021-48,FSE,2021,2021,https://doi.org/10.1145/3468264.3468543,10.1145/3468264.3468543,13
An automatic refactoring framework for replacing test-production inheritance by mocking mechanism.,FSE-2021-49,FSE,2021,2021,https://doi.org/10.1145/3468264.3468590,10.1145/3468264.3468590,13
ÐArcher: detecting on-chain-off-chain synchronization bugs in decentralized applications.,FSE-2021-50,FSE,2021,2021,https://doi.org/10.1145/3468264.3468546,10.1145/3468264.3468546,13
iBatch: saving Ethereum fees via secure and cost-effective batching of smart-contract invocations.,FSE-2021-51,FSE,2021,2021,https://doi.org/10.1145/3468264.3468568,10.1145/3468264.3468568,12
Which abbreviations should be expanded?,FSE-2021-52,FSE,2021,2021,https://doi.org/10.1145/3468264.3468616,10.1145/3468264.3468616,12
Validation on machine reading comprehension software without annotated labels: a property-based method.,FSE-2021-53,FSE,2021,2021,https://doi.org/10.1145/3468264.3468569,10.1145/3468264.3468569,13
FLEX: fixing flaky tests in machine learning projects by updating assertion bounds.,FSE-2021-54,FSE,2021,2021,https://doi.org/10.1145/3468264.3468615,10.1145/3468264.3468615,12
Parallel shadow execution to accelerate the debugging of numerical errors.,FSE-2021-55,FSE,2021,2021,https://doi.org/10.1145/3468264.3468585,10.1145/3468264.3468585,12
Exposing numerical bugs in deep learning via gradient back-propagation.,FSE-2021-56,FSE,2021,2021,https://doi.org/10.1145/3468264.3468612,10.1145/3468264.3468612,12
Metamorphic testing of Datalog engines.,FSE-2021-57,FSE,2021,2021,https://doi.org/10.1145/3468264.3468573,10.1145/3468264.3468573,12
Synthesis of web layouts from examples.,FSE-2021-58,FSE,2021,2021,https://doi.org/10.1145/3468264.3468533,10.1145/3468264.3468533,13
Boosting coverage-based fault localization via graph-based representation learning.,FSE-2021-59,FSE,2021,2021,https://doi.org/10.1145/3468264.3468580,10.1145/3468264.3468580,13
SynGuar: guaranteeing generalization in programming by example.,FSE-2021-60,FSE,2021,2021,https://doi.org/10.1145/3468264.3468621,10.1145/3468264.3468621,13
StateFormer: fine-grained type recovery from binaries using generative state modeling.,FSE-2021-61,FSE,2021,2021,https://doi.org/10.1145/3468264.3468607,10.1145/3468264.3468607,13
Empirical study of transformers for source code.,FSE-2021-62,FSE,2021,2021,https://doi.org/10.1145/3468264.3468611,10.1145/3468264.3468611,13
Explaining mispredictions of machine learning models using rule induction.,FSE-2021-63,FSE,2021,2021,https://doi.org/10.1145/3468264.3468614,10.1145/3468264.3468614,12
Generalizable and interpretable learning for configuration extrapolation.,FSE-2021-64,FSE,2021,2021,https://doi.org/10.1145/3468264.3468603,10.1145/3468264.3468603,13
Lightweight global and local contexts guided method name recommendation with prior knowledge.,FSE-2021-65,FSE,2021,2021,https://doi.org/10.1145/3468264.3468567,10.1145/3468264.3468567,13
To read or to rotate? comparing the effects of technical reading training and spatial skills training on novice programming ability.,FSE-2021-66,FSE,2021,2021,https://doi.org/10.1145/3468264.3468583,10.1145/3468264.3468583,13
Connecting the dots: rethinking the relationship between code and prose writing with functional connectivity.,FSE-2021-67,FSE,2021,2021,https://doi.org/10.1145/3468264.3468579,10.1145/3468264.3468579,13
LastPyMile: identifying the discrepancy between sources and packages.,FSE-2021-68,FSE,2021,2021,https://doi.org/10.1145/3468264.3468592,10.1145/3468264.3468592,13
A grounded theory of the role of coordination in software security patch management.,FSE-2021-69,FSE,2021,2021,https://doi.org/10.1145/3468264.3468595,10.1145/3468264.3468595,13
TaintStream: fine-grained taint tracking for big data platforms through dynamic code translation.,FSE-2021-70,FSE,2021,2021,https://doi.org/10.1145/3468264.3468532,10.1145/3468264.3468532,12
Demystifying "bad" error messages in data science libraries.,FSE-2021-71,FSE,2021,2021,https://doi.org/10.1145/3468264.3468560,10.1145/3468264.3468560,12
NIL: large-scale detection of large-variance clones.,FSE-2021-72,FSE,2021,2021,https://doi.org/10.1145/3468264.3468564,10.1145/3468264.3468564,12
Understanding and detecting server-side request races in web applications.,FSE-2021-73,FSE,2021,2021,https://doi.org/10.1145/3468264.3468594,10.1145/3468264.3468594,13
Detecting and localizing keyboard accessibility failures in web applications.,FSE-2021-74,FSE,2021,2021,https://doi.org/10.1145/3468264.3468581,10.1145/3468264.3468581,13
Swarmbug: debugging configuration bugs in swarm robotics.,FSE-2021-75,FSE,2021,2021,https://doi.org/10.1145/3468264.3468601,10.1145/3468264.3468601,13
Probabilistic Delta debugging.,FSE-2021-76,FSE,2021,2021,https://doi.org/10.1145/3468264.3468625,10.1145/3468264.3468625,12
Finding broken Linux configuration specifications by statically analyzing the Kconfig language.,FSE-2021-77,FSE,2021,2021,https://doi.org/10.1145/3468264.3468578,10.1145/3468264.3468578,13
Semantic bug seeding: a learning-based approach for creating realistic bugs.,FSE-2021-78,FSE,2021,2021,https://doi.org/10.1145/3468264.3468623,10.1145/3468264.3468623,13
Characterizing search activities on stack overflow.,FSE-2021-79,FSE,2021,2021,https://doi.org/10.1145/3468264.3468582,10.1145/3468264.3468582,13
Authorship attribution of source code: a language-agnostic approach and applicability in software engineering.,FSE-2021-80,FSE,2021,2021,https://doi.org/10.1145/3468264.3468606,10.1145/3468264.3468606,13
Probing model signal-awareness via prediction-preserving input minimization.,FSE-2021-81,FSE,2021,2021,https://doi.org/10.1145/3468264.3468545,10.1145/3468264.3468545,11
Generating efficient solvers from constraint models.,FSE-2021-82,FSE,2021,2021,https://doi.org/10.1145/3468264.3468566,10.1145/3468264.3468566,12
A comprehensive study of deep learning compiler bugs.,FSE-2021-83,FSE,2021,2021,https://doi.org/10.1145/3468264.3468591,10.1145/3468264.3468591,13
Fair preprocessing: towards understanding compositional fairness of data transformers in machine learning pipeline.,FSE-2021-84,FSE,2021,2021,https://doi.org/10.1145/3468264.3468536,10.1145/3468264.3468536,13
Fairea: a model behaviour mutation approach to benchmarking bias mitigation methods.,FSE-2021-85,FSE,2021,2021,https://doi.org/10.1145/3468264.3468565,10.1145/3468264.3468565,13
Feature trace recording.,FSE-2021-86,FSE,2021,2021,https://doi.org/10.1145/3468264.3468531,10.1145/3468264.3468531,14
A longitudinal analysis of bloated Java dependencies.,FSE-2021-87,FSE,2021,2021,https://doi.org/10.1145/3468264.3468589,10.1145/3468264.3468589,11
XAI tools in the public sector: a case study on predicting combined sewer overflows.,FSE-2021-88,FSE,2021,2021,https://doi.org/10.1145/3468264.3468547,10.1145/3468264.3468547,13
How disabled tests manifest in test maintainability challenges?,FSE-2021-89,FSE,2021,2021,https://doi.org/10.1145/3468264.3468609,10.1145/3468264.3468609,11
Sustainability forecasting for Apache incubator projects.,FSE-2021-90,FSE,2021,2021,https://doi.org/10.1145/3468264.3468563,10.1145/3468264.3468563,12
Graph-based seed object synthesis for search-based unit testing.,FSE-2021-91,FSE,2021,2021,https://doi.org/10.1145/3468264.3468619,10.1145/3468264.3468619,13
LS-sampling: an effective local search based sampling approach for achieving high t-wise coverage.,FSE-2021-92,FSE,2021,2021,https://doi.org/10.1145/3468264.3468622,10.1145/3468264.3468622,12
GLIB: towards automated test oracle for graphically-rich applications.,FSE-2021-93,FSE,2021,2021,https://doi.org/10.1145/3468264.3468586,10.1145/3468264.3468586,12
Reassessing automatic evaluation metrics for code summarization tasks.,FSE-2021-94,FSE,2021,2021,https://doi.org/10.1145/3468264.3468588,10.1145/3468264.3468588,12
Toward efficient interactions between Python and native libraries.,FSE-2021-95,FSE,2021,2021,https://doi.org/10.1145/3468264.3468541,10.1145/3468264.3468541,12
Accelerating JavaScript static analysis via dynamic shortcuts.,FSE-2021-96,FSE,2021,2021,https://doi.org/10.1145/3468264.3468556,10.1145/3468264.3468556,12
Skeletal approximation enumeration for SMT solver testing.,FSE-2021-97,FSE,2021,2021,https://doi.org/10.1145/3468264.3468540,10.1145/3468264.3468540,13
Boosting static analysis accuracy with instrumented test executions.,FSE-2021-98,FSE,2021,2021,https://doi.org/10.1145/3468264.3468626,10.1145/3468264.3468626,12
Symbolic parallel adaptive importance sampling for probabilistic program analysis.,FSE-2021-99,FSE,2021,2021,https://doi.org/10.1145/3468264.3468593,10.1145/3468264.3468593,12
IDE support for cloud-based static analyses.,FSE-2021-100,FSE,2021,2021,https://doi.org/10.1145/3468264.3468535,10.1145/3468264.3468535,12
A bounded symbolic-size model for symbolic execution.,FSE-2021-101,FSE,2021,2021,https://doi.org/10.1145/3468264.3468596,10.1145/3468264.3468596,12
Efficient module-level dynamic analysis for dynamic languages with module recontextualization.,FSE-2021-102,FSE,2021,2021,https://doi.org/10.1145/3468264.3468574,10.1145/3468264.3468574,12
Mono2Micro: a practical and effective tool for decomposing monolithic Java applications to microservices.,FSE-2021-103,FSE,2021,2021,https://doi.org/10.1145/3468264.3473915,10.1145/3468264.3473915,11
Data-driven test selection at scale.,FSE-2021-104,FSE,2021,2021,https://doi.org/10.1145/3468264.3473916,10.1145/3468264.3473916,11
Effective low capacity status prediction for cloud systems.,FSE-2021-105,FSE,2021,2021,https://doi.org/10.1145/3468264.3473917,10.1145/3468264.3473917,6
Automated code transformation for context propagation in Go.,FSE-2021-106,FSE,2021,2021,https://doi.org/10.1145/3468264.3473918,10.1145/3468264.3473918,11
Onion: identifying incident-indicating logs for cloud systems.,FSE-2021-107,FSE,2021,2021,https://doi.org/10.1145/3468264.3473919,10.1145/3468264.3473919,11
Generating metamorphic relations for cyber-physical systems with genetic programming: an industrial case study.,FSE-2021-108,FSE,2021,2021,https://doi.org/10.1145/3468264.3473920,10.1145/3468264.3473920,11
Domain adaptation for an automated classification of deontic modalities in software engineering contracts.,FSE-2021-109,FSE,2021,2021,https://doi.org/10.1145/3468264.3473921,10.1145/3468264.3473921,6
How can manual testing processes be optimized? developer survey, optimization guidelines, and case studies.,FSE-2021-110,FSE,2021,2021,https://doi.org/10.1145/3468264.3473922,10.1145/3468264.3473922,11
Turnover-induced knowledge loss in practice.,FSE-2021-111,FSE,2021,2021,https://doi.org/10.1145/3468264.3473923,10.1145/3468264.3473923,11
One thousand and one stories: a large-scale survey of software refactoring.,FSE-2021-112,FSE,2021,2021,https://doi.org/10.1145/3468264.3473924,10.1145/3468264.3473924,11
A comprehensive study on learning-based PE malware family classification methods.,FSE-2021-113,FSE,2021,2021,https://doi.org/10.1145/3468264.3473925,10.1145/3468264.3473925,12
Infiltrating security into development: exploring the world's largest software security study.,FSE-2021-114,FSE,2021,2021,https://doi.org/10.1145/3468264.3473926,10.1145/3468264.3473926,11
Data-driven extract method recommendations: a study at ING.,FSE-2021-115,FSE,2021,2021,https://doi.org/10.1145/3468264.3473927,10.1145/3468264.3473927,11
Duplicated code pattern mining in visual programming languages.,FSE-2021-116,FSE,2021,2021,https://doi.org/10.1145/3468264.3473928,10.1145/3468264.3473928,12
Making smart contract development more secure and easier.,FSE-2021-117,FSE,2021,2021,https://doi.org/10.1145/3468264.3473929,10.1145/3468264.3473929,11
Quantifying no-fault-found test failures to prioritize inspection of flaky tests at Ericsson.,FSE-2021-118,FSE,2021,2021,https://doi.org/10.1145/3468264.3473930,10.1145/3468264.3473930,10
When life gives you oranges: detecting and diagnosing intermittent job failures at Mozilla.,FSE-2021-119,FSE,2021,2021,https://doi.org/10.1145/3468264.3473931,10.1145/3468264.3473931,12
FuzzBench: an open fuzzer benchmarking platform and service.,FSE-2021-120,FSE,2021,2021,https://doi.org/10.1145/3468264.3473932,10.1145/3468264.3473932,11
An empirical investigation of practical log anomaly detection for online service systems.,FSE-2021-121,FSE,2021,2021,https://doi.org/10.1145/3468264.3473933,10.1145/3468264.3473933,12
RAPID: checking API usage for the cloud in the cloud.,FSE-2021-122,FSE,2021,2021,https://doi.org/10.1145/3468264.3473934,10.1145/3468264.3473934,11
An empirical study of GUI widget detection for industrial mobile games.,FSE-2021-123,FSE,2021,2021,https://doi.org/10.1145/3468264.3473935,10.1145/3468264.3473935,11
Intelligent container reallocation at Microsoft 365.,FSE-2021-124,FSE,2021,2021,https://doi.org/10.1145/3468264.3473936,10.1145/3468264.3473936,6
Organizational implications of agile adoption: a case study from the public sector.,FSE-2021-125,FSE,2021,2021,https://doi.org/10.1145/3468264.3473937,10.1145/3468264.3473937,11
Adaptive fairness improvement based on causality analysis.,FSE-2022-5,FSE,2022,2022,https://doi.org/10.1145/3540250.3549103,10.1145/3540250.3549103,12
NatGen: generative pre-training by "naturalizing" source code.,FSE-2022-6,FSE,2022,2022,https://doi.org/10.1145/3540250.3549162,10.1145/3540250.3549162,13
Testing of autonomous driving systems: where are we and where should we go?,FSE-2022-7,FSE,2022,2022,https://doi.org/10.1145/3540250.3549111,10.1145/3540250.3549111,13
Fuzzing deep-learning libraries via automated relational API inference.,FSE-2022-8,FSE,2022,2022,https://doi.org/10.1145/3540250.3549085,10.1145/3540250.3549085,13
SEDiff: scope-aware differential fuzzing to test internal function models in symbolic execution.,FSE-2022-9,FSE,2022,2022,https://doi.org/10.1145/3540250.3549080,10.1145/3540250.3549080,13
Perfect is the enemy of test oracle.,FSE-2022-10,FSE,2022,2022,https://doi.org/10.1145/3540250.3549086,10.1145/3540250.3549086,12
Scenario-based test reduction and prioritization for multi-module autonomous driving systems.,FSE-2022-11,FSE,2022,2022,https://doi.org/10.1145/3540250.3549152,10.1145/3540250.3549152,12
MOSAT: finding safety violations of autonomous driving systems using multi-objective genetic algorithm.,FSE-2022-12,FSE,2022,2022,https://doi.org/10.1145/3540250.3549100,10.1145/3540250.3549100,13
Are we building on the rock? on the importance of data preprocessing for code summarization.,FSE-2022-13,FSE,2022,2022,https://doi.org/10.1145/3540250.3549145,10.1145/3540250.3549145,13
Correlates of programmer efficacy and their link to experience: a combined EEG and eye-tracking study.,FSE-2022-14,FSE,2022,2022,https://doi.org/10.1145/3540250.3549084,10.1145/3540250.3549084,12
What motivates software practitioners to contribute to inner source?,FSE-2022-15,FSE,2022,2022,https://doi.org/10.1145/3540250.3549148,10.1145/3540250.3549148,13
A retrospective study of one decade of artifact evaluations.,FSE-2022-16,FSE,2022,2022,https://doi.org/10.1145/3540250.3549172,10.1145/3540250.3549172,12
Quantifying community evolution in developer social networks.,FSE-2022-17,FSE,2022,2022,https://doi.org/10.1145/3540250.3549106,10.1145/3540250.3549106,13
Understanding skills for OSS communities on GitHub.,FSE-2022-18,FSE,2022,2022,https://doi.org/10.1145/3540250.3549082,10.1145/3540250.3549082,13
Accurate method and variable tracking in commit history.,FSE-2022-19,FSE,2022,2022,https://doi.org/10.1145/3540250.3549079,10.1145/3540250.3549079,13
Classifying edits to variability in source code.,FSE-2022-20,FSE,2022,2022,https://doi.org/10.1145/3540250.3549108,10.1145/3540250.3549108,13
The evolution of type annotations in python: an empirical study.,FSE-2022-21,FSE,2022,2022,https://doi.org/10.1145/3540250.3549114,10.1145/3540250.3549114,12
UTANGO: untangling commits with context-aware, graph-based, code change clustering learning model.,FSE-2022-22,FSE,2022,2022,https://doi.org/10.1145/3540250.3549171,10.1145/3540250.3549171,12
Static executes-before analysis for event driven programs.,FSE-2022-23,FSE,2022,2022,https://doi.org/10.1145/3540250.3549116,10.1145/3540250.3549116,12
Security code smells in apps: are we getting better?,FSE-2022-24,FSE,2022,2022,https://doi.org/10.1145/3540250.3549091,10.1145/3540250.3549091,11
Large-scale analysis of non-termination bugs in real-world OSS projects.,FSE-2022-25,FSE,2022,2022,https://doi.org/10.1145/3540250.3549129,10.1145/3540250.3549129,13
On-the-fly syntax highlighting using neural networks.,FSE-2022-26,FSE,2022,2022,https://doi.org/10.1145/3540250.3549109,10.1145/3540250.3549109,12
Declarative smart contracts.,FSE-2022-27,FSE,2022,2022,https://doi.org/10.1145/3540250.3549121,10.1145/3540250.3549121,13
Asynchronous technical interviews: reducing the effect of supervised think-aloud on communication ability.,FSE-2022-28,FSE,2022,2022,https://doi.org/10.1145/3540250.3549168,10.1145/3540250.3549168,12
How to formulate specific how-to questions in software development?,FSE-2022-29,FSE,2022,2022,https://doi.org/10.1145/3540250.3549160,10.1145/3540250.3549160,13
Pair programming conversations with agents vs. developers: challenges and opportunities for SE community.,FSE-2022-30,FSE,2022,2022,https://doi.org/10.1145/3540250.3549127,10.1145/3540250.3549127,13
Psychologically-inspired, unsupervised inference of perceptual groups of GUI widgets from GUI images.,FSE-2022-31,FSE,2022,2022,https://doi.org/10.1145/3540250.3549138,10.1145/3540250.3549138,12
Toward interactive bug reporting for (android app) end-users.,FSE-2022-32,FSE,2022,2022,https://doi.org/10.1145/3540250.3549131,10.1145/3540250.3549131,13
Understanding performance problems in deep learning systems.,FSE-2022-33,FSE,2022,2022,https://doi.org/10.1145/3540250.3549123,10.1145/3540250.3549123,13
API recommendation for machine learning libraries: how far are we?,FSE-2022-34,FSE,2022,2022,https://doi.org/10.1145/3540250.3549124,10.1145/3540250.3549124,12
No more fine-tuning? an experimental evaluation of prompt tuning in code intelligence.,FSE-2022-35,FSE,2022,2022,https://doi.org/10.1145/3540250.3549113,10.1145/3540250.3549113,13
Cross-device record and replay for Android apps.,FSE-2022-36,FSE,2022,2022,https://doi.org/10.1145/3540250.3549083,10.1145/3540250.3549083,13
Online testing of RESTful APIs: promises and challenges.,FSE-2022-37,FSE,2022,2022,https://doi.org/10.1145/3540250.3549144,10.1145/3540250.3549144,13
Avgust: automating usage-based test generation from videos of app executions.,FSE-2022-38,FSE,2022,2022,https://doi.org/10.1145/3540250.3549134,10.1145/3540250.3549134,13
Detecting non-crashing functional bugs in Android apps via deep-state differential analysis.,FSE-2022-39,FSE,2022,2022,https://doi.org/10.1145/3540250.3549170,10.1145/3540250.3549170,13
RoboFuzz: fuzzing robotic systems over robot operating system (ROS) for finding correctness bugs.,FSE-2022-40,FSE,2022,2022,https://doi.org/10.1145/3540250.3549164,10.1145/3540250.3549164,12
AgileCtrl: a self-adaptive framework for configuration tuning.,FSE-2022-41,FSE,2022,2022,https://doi.org/10.1145/3540250.3549136,10.1145/3540250.3549136,13
Using nudges to accelerate code reviews at scale.,FSE-2022-42,FSE,2022,2022,https://doi.org/10.1145/3540250.3549104,10.1145/3540250.3549104,11
First come first served: the impact of file position on code review.,FSE-2022-43,FSE,2022,2022,https://doi.org/10.1145/3540250.3549177,10.1145/3540250.3549177,12
Code, quality, and process metrics in graduated and retired ASFI projects.,FSE-2022-44,FSE,2022,2022,https://doi.org/10.1145/3540250.3549132,10.1145/3540250.3549132,12
CommentFinder: a simpler, faster, more accurate code review comments recommendation.,FSE-2022-45,FSE,2022,2022,https://doi.org/10.1145/3540250.3549119,10.1145/3540250.3549119,13
AutoPruner: transformer-based call graph pruning.,FSE-2022-46,FSE,2022,2022,https://doi.org/10.1145/3540250.3549175,10.1145/3540250.3549175,13
Lighting up supervised learning in user review-based code localization: dataset and benchmark.,FSE-2022-47,FSE,2022,2022,https://doi.org/10.1145/3540250.3549141,10.1145/3540250.3549141,13
CORMS: a GitHub and Gerrit based hybrid code reviewer recommendation approach for modern code review.,FSE-2022-48,FSE,2022,2022,https://doi.org/10.1145/3540250.3549115,10.1145/3540250.3549115,12
Hierarchical Bayesian multi-kernel learning for integrated classification and summarization of app reviews.,FSE-2022-49,FSE,2022,2022,https://doi.org/10.1145/3540250.3549174,10.1145/3540250.3549174,12
Semi-supervised pre-processing for learning-based traceability framework on real-world software projects.,FSE-2022-50,FSE,2022,2022,https://doi.org/10.1145/3540250.3549151,10.1145/3540250.3549151,13
Input invariants.,FSE-2022-51,FSE,2022,2022,https://doi.org/10.1145/3540250.3549139,10.1145/3540250.3549139,12
Modus: a Datalog dialect for building container images.,FSE-2022-52,FSE,2022,2022,https://doi.org/10.1145/3540250.3549133,10.1145/3540250.3549133,12
Multi-phase invariant synthesis.,FSE-2022-53,FSE,2022,2022,https://doi.org/10.1145/3540250.3549166,10.1145/3540250.3549166,13
Parasol: efficient parallel synthesis of large model spaces.,FSE-2022-54,FSE,2022,2022,https://doi.org/10.1145/3540250.3549157,10.1145/3540250.3549157,13
Neural termination analysis.,FSE-2022-55,FSE,2022,2022,https://doi.org/10.1145/3540250.3549120,10.1145/3540250.3549120,13
PaReco: patched clones and missed patches among the divergent variants of a software family.,FSE-2022-56,FSE,2022,2022,https://doi.org/10.1145/3540250.3549112,10.1145/3540250.3549112,13
Fault localization to detect co-change fixing locations.,FSE-2022-57,FSE,2022,2022,https://doi.org/10.1145/3540250.3549137,10.1145/3540250.3549137,13
The best of both worlds: integrating semantic features with expert features for defect prediction and localization.,FSE-2022-58,FSE,2022,2022,https://doi.org/10.1145/3540250.3549165,10.1145/3540250.3549165,12
An exploratory study on the predominant programming paradigms in Python code.,FSE-2022-59,FSE,2022,2022,https://doi.org/10.1145/3540250.3549158,10.1145/3540250.3549158,12
Making Python code idiomatic by automatic refactoring non-idiomatic Python code with pythonic idioms.,FSE-2022-60,FSE,2022,2022,https://doi.org/10.1145/3540250.3549143,10.1145/3540250.3549143,13
An empirical study of blockchain system vulnerabilities: modules, types, and patterns.,FSE-2022-61,FSE,2022,2022,https://doi.org/10.1145/3540250.3549105,10.1145/3540250.3549105,13
How to better utilize code graphs in semantic code search?,FSE-2022-62,FSE,2022,2022,https://doi.org/10.1145/3540250.3549087,10.1145/3540250.3549087,12
23 shades of self-admitted technical debt: an empirical study on machine learning software.,FSE-2022-63,FSE,2022,2022,https://doi.org/10.1145/3540250.3549088,10.1145/3540250.3549088,13
NeuDep: neural binary memory dependence analysis.,FSE-2022-64,FSE,2022,2022,https://doi.org/10.1145/3540250.3549147,10.1145/3540250.3549147,13
DynaPyt: a dynamic analysis framework for Python.,FSE-2022-65,FSE,2022,2022,https://doi.org/10.1145/3540250.3549126,10.1145/3540250.3549126,12
Cross-language Android permission specification.,FSE-2022-66,FSE,2022,2022,https://doi.org/10.1145/3540250.3549142,10.1145/3540250.3549142,12
Peahen: fast and precise static deadlock detection via context reduction.,FSE-2022-67,FSE,2022,2022,https://doi.org/10.1145/3540250.3549110,10.1145/3540250.3549110,13
A case study of implicit mentoring, its prevalence, and impact in Apache.,FSE-2022-68,FSE,2022,2022,https://doi.org/10.1145/3540250.3549167,10.1145/3540250.3549167,13
Software security during modern code review: the developer's perspective.,FSE-2022-69,FSE,2022,2022,https://doi.org/10.1145/3540250.3549135,10.1145/3540250.3549135,12
Program merge conflict resolution via neural transformers.,FSE-2022-70,FSE,2022,2022,https://doi.org/10.1145/3540250.3549163,10.1145/3540250.3549163,12
Automated unearthing of dangerous issue reports.,FSE-2022-71,FSE,2022,2022,https://doi.org/10.1145/3540250.3549156,10.1145/3540250.3549156,13
On the vulnerability proneness of multilingual code.,FSE-2022-72,FSE,2022,2022,https://doi.org/10.1145/3540250.3549173,10.1145/3540250.3549173,13
Tracking patches for open source software vulnerabilities.,FSE-2022-73,FSE,2022,2022,https://doi.org/10.1145/3540250.3549125,10.1145/3540250.3549125,12
DeJITLeak: eliminating JIT-induced timing side-channel leaks.,FSE-2022-74,FSE,2022,2022,https://doi.org/10.1145/3540250.3549150,10.1145/3540250.3549150,13
Quantitative relational modelling with QAlloy.,FSE-2022-75,FSE,2022,2022,https://doi.org/10.1145/3540250.3549154,10.1145/3540250.3549154,12
Demystifying the underground ecosystem of account registration bots.,FSE-2022-76,FSE,2022,2022,https://doi.org/10.1145/3540250.3549090,10.1145/3540250.3549090,13
Using graph neural networks for program termination.,FSE-2022-77,FSE,2022,2022,https://doi.org/10.1145/3540250.3549095,10.1145/3540250.3549095,12
PyTER: effective program repair for Python type errors.,FSE-2022-78,FSE,2022,2022,https://doi.org/10.1145/3540250.3549130,10.1145/3540250.3549130,13
VulRepair: a T5-based automated software vulnerability repair.,FSE-2022-79,FSE,2022,2022,https://doi.org/10.1145/3540250.3549098,10.1145/3540250.3549098,13
DeepDev-PERF: a deep learning-based approach for improving software performance.,FSE-2022-80,FSE,2022,2022,https://doi.org/10.1145/3540250.3549096,10.1145/3540250.3549096,11
Less training, more repairing please: revisiting automated program repair via zero-shot learning.,FSE-2022-81,FSE,2022,2022,https://doi.org/10.1145/3540250.3549101,10.1145/3540250.3549101,13
NL2Viz: natural language to visualization via constrained syntax-guided synthesis.,FSE-2022-82,FSE,2022,2022,https://doi.org/10.1145/3540250.3549140,10.1145/3540250.3549140,12
AccessiText: automated detection of text accessibility issues in Android apps.,FSE-2022-83,FSE,2022,2022,https://doi.org/10.1145/3540250.3549118,10.1145/3540250.3549118,12
Actionable and interpretable fault localization for recurring failures in online service systems.,FSE-2022-84,FSE,2022,2022,https://doi.org/10.1145/3540250.3549092,10.1145/3540250.3549092,13
AUGER: automatically generating review comments with pre-training models.,FSE-2022-85,FSE,2022,2022,https://doi.org/10.1145/3540250.3549099,10.1145/3540250.3549099,13
Automatically deriving JavaScript static analyzers from specifications using Meta-level static analysis.,FSE-2022-86,FSE,2022,2022,https://doi.org/10.1145/3540250.3549097,10.1145/3540250.3549097,13
Automating code review activities by large-scale pre-training.,FSE-2022-87,FSE,2022,2022,https://doi.org/10.1145/3540250.3549081,10.1145/3540250.3549081,13
Corporate dominance in open source ecosystems: a case study of OpenStack.,FSE-2022-88,FSE,2022,2022,https://doi.org/10.1145/3540250.3549117,10.1145/3540250.3549117,13
Detecting Simulink compiler bugs via controllable zombie blocks mutation.,FSE-2022-89,FSE,2022,2022,https://doi.org/10.1145/3540250.3549159,10.1145/3540250.3549159,12
Diet code is healthy: simplifying programs for pre-trained models of code.,FSE-2022-90,FSE,2022,2022,https://doi.org/10.1145/3540250.3549094,10.1145/3540250.3549094,12
Do bugs lead to unnaturalness of source code?,FSE-2022-91,FSE,2022,2022,https://doi.org/10.1145/3540250.3549149,10.1145/3540250.3549149,12
Generating realistic vulnerabilities via neural code editing: an empirical study.,FSE-2022-92,FSE,2022,2022,https://doi.org/10.1145/3540250.3549128,10.1145/3540250.3549128,13
Generic sensitivity: customizing context-sensitive pointer analysis for generics.,FSE-2022-93,FSE,2022,2022,https://doi.org/10.1145/3540250.3549122,10.1145/3540250.3549122,12
MAAT: a novel ensemble approach to addressing fairness and performance bugs for machine learning software.,FSE-2022-94,FSE,2022,2022,https://doi.org/10.1145/3540250.3549093,10.1145/3540250.3549093,13
Minerva: browser API fuzzing with dynamic mod-ref analysis.,FSE-2022-95,FSE,2022,2022,https://doi.org/10.1145/3540250.3549107,10.1145/3540250.3549107,13
NMTSloth: understanding and testing efficiency degradation of neural machine translation systems.,FSE-2022-96,FSE,2022,2022,https://doi.org/10.1145/3540250.3549102,10.1145/3540250.3549102,13
Putting them under microscope: a fine-grained approach for detecting redundant test cases in natural language.,FSE-2022-97,FSE,2022,2022,https://doi.org/10.1145/3540250.3549089,10.1145/3540250.3549089,12
RULER: discriminative and iterative adversarial training for deep neural network fairness.,FSE-2022-98,FSE,2022,2022,https://doi.org/10.1145/3540250.3549169,10.1145/3540250.3549169,12
SamplingCA: effective and efficient sampling-based pairwise testing for highly configurable software systems.,FSE-2022-99,FSE,2022,2022,https://doi.org/10.1145/3540250.3549155,10.1145/3540250.3549155,13
SPINE: a scalable log parser with feedback guidance.,FSE-2022-100,FSE,2022,2022,https://doi.org/10.1145/3540250.3549176,10.1145/3540250.3549176,11
SymMC: approximate model enumeration and counting using symmetry information for Alloy specifications.,FSE-2022-101,FSE,2022,2022,https://doi.org/10.1145/3540250.3549161,10.1145/3540250.3549161,12
TraceCRL: contrastive representation learning for microservice trace analysis.,FSE-2022-102,FSE,2022,2022,https://doi.org/10.1145/3540250.3549146,10.1145/3540250.3549146,12
You see what I want you to see: poisoning vulnerabilities in neural code search.,FSE-2022-103,FSE,2022,2022,https://doi.org/10.1145/3540250.3549153,10.1145/3540250.3549153,13
Nalanda: a socio-technical graph platform for building software analytics tools at enterprise scale.,FSE-2022-104,FSE,2022,2022,https://doi.org/10.1145/3540250.3558949,10.1145/3540250.3558949,11
Uncertainty-aware transfer learning to evolve digital twins for industrial elevators.,FSE-2022-105,FSE,2022,2022,https://doi.org/10.1145/3540250.3558957,10.1145/3540250.3558957,12
All you need is logs: improving code completion by learning from anonymous IDE usage logs.,FSE-2022-106,FSE,2022,2022,https://doi.org/10.1145/3540250.3558968,10.1145/3540250.3558968,11
Testing of machine learning models with limited samples: an industrial vacuum pumping application.,FSE-2022-107,FSE,2022,2022,https://doi.org/10.1145/3540250.3558943,10.1145/3540250.3558943,11
Improving ML-based information retrieval software with user-driven functional testing and defect class analysis.,FSE-2022-108,FSE,2022,2022,https://doi.org/10.1145/3540250.3558941,10.1145/3540250.3558941,11
What improves developer productivity at google? code quality.,FSE-2022-109,FSE,2022,2022,https://doi.org/10.1145/3540250.3558940,10.1145/3540250.3558940,12
Understanding why we cannot model how long a code review will take: an industrial case study.,FSE-2022-110,FSE,2022,2022,https://doi.org/10.1145/3540250.3558945,10.1145/3540250.3558945,6
Leveraging test plan quality to improve code review efficacy.,FSE-2022-111,FSE,2022,2022,https://doi.org/10.1145/3540250.3558952,10.1145/3540250.3558952,11
Are elevator software robust against uncertainties? results and experiences from an industrial case study.,FSE-2022-112,FSE,2022,2022,https://doi.org/10.1145/3540250.3558955,10.1145/3540250.3558955,12
Achievement unlocked: a case study on gamifying DevOps practices in industry.,FSE-2022-113,FSE,2022,2022,https://doi.org/10.1145/3540250.3558948,10.1145/3540250.3558948,12
Sometimes you have to treat the symptoms: tackling model drift in an industrial clone-and-own software product line.,FSE-2022-114,FSE,2022,2022,https://doi.org/10.1145/3540250.3558960,10.1145/3540250.3558960,12
Input splitting for cloud-based static application security testing platforms.,FSE-2022-115,FSE,2022,2022,https://doi.org/10.1145/3540250.3558944,10.1145/3540250.3558944,12
Metadata-based retrieval for resolution recommendation in AIOps.,FSE-2022-116,FSE,2022,2022,https://doi.org/10.1145/3540250.3558964,10.1145/3540250.3558964,11
Workgraph: personal focus vs. interruption for engineers at Meta.,FSE-2022-117,FSE,2022,2022,https://doi.org/10.1145/3540250.3558961,10.1145/3540250.3558961,8
Understanding automated code review process and developer experience in industry.,FSE-2022-118,FSE,2022,2022,https://doi.org/10.1145/3540250.3558950,10.1145/3540250.3558950,10
Unite: an adapter for transforming analysis tools to web services via OSLC.,FSE-2022-119,FSE,2022,2022,https://doi.org/10.1145/3540250.3558939,10.1145/3540250.3558939,11
Discovering feature flag interdependencies in Microsoft office.,FSE-2022-120,FSE,2022,2022,https://doi.org/10.1145/3540250.3558942,10.1145/3540250.3558942,11
What did you pack in my app? a systematic analysis of commercial Android packers.,FSE-2022-121,FSE,2022,2022,https://doi.org/10.1145/3540250.3558969,10.1145/3540250.3558969,11
An empirical study of deep transfer learning-based program repair for Kotlin projects.,FSE-2022-122,FSE,2022,2022,https://doi.org/10.1145/3540250.3558967,10.1145/3540250.3558967,12
An empirical investigation of missing data handling in cloud node failure prediction.,FSE-2022-123,FSE,2022,2022,https://doi.org/10.1145/3540250.3558946,10.1145/3540250.3558946,12
An empirical study of log analysis at Microsoft.,FSE-2022-124,FSE,2022,2022,https://doi.org/10.1145/3540250.3558963,10.1145/3540250.3558963,12
AutoTSG: learning and synthesis for incident troubleshooting.,FSE-2022-125,FSE,2022,2022,https://doi.org/10.1145/3540250.3558958,10.1145/3540250.3558958,12
Demystifying "removed reviews" in iOS app store.,FSE-2022-126,FSE,2022,2022,https://doi.org/10.1145/3540250.3558966,10.1145/3540250.3558966,11
Exploring and evaluating personalized models for code generation.,FSE-2022-127,FSE,2022,2022,https://doi.org/10.1145/3540250.3558959,10.1145/3540250.3558959,9
FlakeRepro: automated and efficient reproduction of concurrency-related flaky tests.,FSE-2022-128,FSE,2022,2022,https://doi.org/10.1145/3540250.3558956,10.1145/3540250.3558956,12
Group-based corpus scheduling for parallel fuzzing.,FSE-2022-129,FSE,2022,2022,https://doi.org/10.1145/3540250.3560885,10.1145/3540250.3560885,12
Incorporating domain knowledge through task augmentation for front-end JavaScript code generation.,FSE-2022-130,FSE,2022,2022,https://doi.org/10.1145/3540250.3558965,10.1145/3540250.3558965,11
Industry experiences with large-scale refactoring.,FSE-2022-131,FSE,2022,2022,https://doi.org/10.1145/3540250.3558954,10.1145/3540250.3558954,11
Industry practice of configuration auto-tuning for cloud applications and services.,FSE-2022-132,FSE,2022,2022,https://doi.org/10.1145/3540250.3558962,10.1145/3540250.3558962,11
Investigating and improving log parsing in practice.,FSE-2022-133,FSE,2022,2022,https://doi.org/10.1145/3540250.3558947,10.1145/3540250.3558947,12
Towards developer-centered automatic program repair: findings from Bloomberg.,FSE-2022-134,FSE,2022,2022,https://doi.org/10.1145/3540250.3558953,10.1145/3540250.3558953,11
Trace analysis based microservice architecture measurement.,FSE-2022-135,FSE,2022,2022,https://doi.org/10.1145/3540250.3558951,10.1145/3540250.3558951,11
Reflections on software failure analysis.,FSE-2022-139,FSE,2022,2022,https://doi.org/10.1145/3540250.3560879,10.1145/3540250.3560879,6
Language-agnostic dynamic analysis of multilingual code: promises, pitfalls, and prospects.,FSE-2022-140,FSE,2022,2022,https://doi.org/10.1145/3540250.3560880,10.1145/3540250.3560880,6
A Comprehensive Evaluation of Android ICC Resolution Techniques.,ASE-2022-0,ASE,2022,2022,https://doi.org/10.1145/3551349.3560420,10.1145/3551349.3560420,13
A Hybrid Approach for Inference between Behavioral Exception API Documentation and Implementations, and Its Applications.,ASE-2022-1,ASE,2022,2022,https://doi.org/10.1145/3551349.3560434,10.1145/3551349.3560434,13
A Light Bug Triage Framework for Applying Large Pre-trained Language Model.,ASE-2022-2,ASE,2022,2022,https://doi.org/10.1145/3551349.3556898,10.1145/3551349.3556898,11
A Transferable Time Series Forecasting Service Using Deep Transformer Model for Online Systems.,ASE-2022-3,ASE,2022,2022,https://doi.org/10.1145/3551349.3560414,10.1145/3551349.3560414,12
Accelerating Build Dependency Error Detection via Virtual Build.,ASE-2022-4,ASE,2022,2022,https://doi.org/10.1145/3551349.3556930,10.1145/3551349.3556930,12
Accelerating OCR-Based Widget Localization for Test Automation of GUI Applications.,ASE-2022-5,ASE,2022,2022,https://doi.org/10.1145/3551349.3556966,10.1145/3551349.3556966,13
An Empirical Study of Automation in Software Security Patch Management.,ASE-2022-6,ASE,2022,2022,https://doi.org/10.1145/3551349.3556969,10.1145/3551349.3556969,13
Answer Summarization for Technical Queries: Benchmark and New Approach.,ASE-2022-7,ASE,2022,2022,https://doi.org/10.1145/3551349.3560421,10.1145/3551349.3560421,13
Are Neural Bug Detectors Comparable to Software Developers on Variable Misuse Bugs?,ASE-2022-8,ASE,2022,2022,https://doi.org/10.1145/3551349.3561156,10.1145/3551349.3561156,12
Are they Toeing the Line? Diagnosing Privacy Compliance Violations among Browser Extensions.,ASE-2022-9,ASE,2022,2022,https://doi.org/10.1145/3551349.3560436,10.1145/3551349.3560436,12
AST-Probe: Recovering abstract syntax trees from hidden representations of pre-trained language models.,ASE-2022-10,ASE,2022,2022,https://doi.org/10.1145/3551349.3556900,10.1145/3551349.3556900,11
Auto Off-Target: Enabling Thorough and Scalable Testing for Complex Software Systems.,ASE-2022-11,ASE,2022,2022,https://doi.org/10.1145/3551349.3556915,10.1145/3551349.3556915,12
Automated Feedback Generation for Competition-Level Code.,ASE-2022-12,ASE,2022,2022,https://doi.org/10.1145/3551349.3560425,10.1145/3551349.3560425,13
Automatic Comment Generation via Multi-Pass Deliberation.,ASE-2022-13,ASE,2022,2022,https://doi.org/10.1145/3551349.3556917,10.1145/3551349.3556917,12
Automatically Detecting Visual Bugs in HTML5 Canvas Games.,ASE-2022-14,ASE,2022,2022,https://doi.org/10.1145/3551349.3556913,10.1145/3551349.3556913,11
B-AIS: An Automated Process for Black-box Evaluation of Visual Perception in AI-enabled Software against Domain Semantics.,ASE-2022-15,ASE,2022,2022,https://doi.org/10.1145/3551349.3561162,10.1145/3551349.3561162,13
Boosting the Revealing of Detected Violations in Deep Learning Testing: A Diversity-Guided Method.,ASE-2022-16,ASE,2022,2022,https://doi.org/10.1145/3551349.3556919,10.1145/3551349.3556919,13
BuildSonic: Detecting and Repairing Performance-Related Configuration Smells for Continuous Integration Builds.,ASE-2022-17,ASE,2022,2022,https://doi.org/10.1145/3551349.3556923,10.1145/3551349.3556923,13
Call Me Maybe: Using NLP to Automatically Generate Unit Test Cases Respecting Temporal Constraints.,ASE-2022-18,ASE,2022,2022,https://doi.org/10.1145/3551349.3556961,10.1145/3551349.3556961,11
CARGO: AI-Guided Dependency Analysis for Migrating Monolithic Applications to Microservices Architecture.,ASE-2022-19,ASE,2022,2022,https://doi.org/10.1145/3551349.3556960,10.1145/3551349.3556960,12
Checking LTL Satisfiability via End-to-end Learning.,ASE-2022-20,ASE,2022,2022,https://doi.org/10.1145/3551349.3561163,10.1145/3551349.3561163,13
CoditT5: Pretraining for Source Code and Natural Language Editing.,ASE-2022-21,ASE,2022,2022,https://doi.org/10.1145/3551349.3556955,10.1145/3551349.3556955,12
Compiler Testing using Template Java Programs.,ASE-2022-22,ASE,2022,2022,https://doi.org/10.1145/3551349.3556958,10.1145/3551349.3556958,13
Compressing Pre-trained Models of Code into 3 MB.,ASE-2022-23,ASE,2022,2022,https://doi.org/10.1145/3551349.3556964,10.1145/3551349.3556964,12
Consistent Scene Graph Generation by Constraint Optimization.,ASE-2022-24,ASE,2022,2022,https://doi.org/10.1145/3551349.3560433,10.1145/3551349.3560433,13
Constructing a System Knowledge Graph of User Tasks and Failures from Bug Reports to Support Soap Opera Testing.,ASE-2022-25,ASE,2022,2022,https://doi.org/10.1145/3551349.3556967,10.1145/3551349.3556967,13
Cornucopia : A Framework for Feedback Guided Generation of Binaries.,ASE-2022-26,ASE,2022,2022,https://doi.org/10.1145/3551349.3561152,10.1145/3551349.3561152,13
CrystalBLEU: Precisely and Efficiently Measuring the Similarity of Code.,ASE-2022-27,ASE,2022,2022,https://doi.org/10.1145/3551349.3556903,10.1145/3551349.3556903,12
Data Augmentation for Improving Emotion Recognition in Software Engineering Communication.,ASE-2022-28,ASE,2022,2022,https://doi.org/10.1145/3551349.3556925,10.1145/3551349.3556925,13
Data Leakage in Notebooks: Static Detection and Better Processes.,ASE-2022-29,ASE,2022,2022,https://doi.org/10.1145/3551349.3556918,10.1145/3551349.3556918,12
DeepPerform: An Efficient Approach for Performance Testing of Resource-Constrained Neural Networks.,ASE-2022-30,ASE,2022,2022,https://doi.org/10.1145/3551349.3561158,10.1145/3551349.3561158,13
Detecting Blocking Errors in Go Programs using Localized Abstract Interpretation.,ASE-2022-31,ASE,2022,2022,https://doi.org/10.1145/3551349.3561154,10.1145/3551349.3561154,12
Detecting Build Conflicts in Software Merge for Java Programs via Static Analysis.,ASE-2022-32,ASE,2022,2022,https://doi.org/10.1145/3551349.3556950,10.1145/3551349.3556950,13
Detecting Semantic Code Clones by Building AST-based Markov Chains Model.,ASE-2022-33,ASE,2022,2022,https://doi.org/10.1145/3551349.3560426,10.1145/3551349.3560426,13
Differentially Testing Database Transactions for Fun and Profit.,ASE-2022-34,ASE,2022,2022,https://doi.org/10.1145/3551349.3556924,10.1145/3551349.3556924,12
Effectively Generating Vulnerable Transaction Sequences in Smart Contracts with Reinforcement Learning-guided Fuzzing.,ASE-2022-35,ASE,2022,2022,https://doi.org/10.1145/3551349.3560429,10.1145/3551349.3560429,12
Efficient Greybox Fuzzing to Detect Memory Errors.,ASE-2022-36,ASE,2022,2022,https://doi.org/10.1145/3551349.3561161,10.1145/3551349.3561161,12
Efficient Synthesis of Method Call Sequences for Test Generation and Bounded Verification.,ASE-2022-37,ASE,2022,2022,https://doi.org/10.1145/3551349.3556951,10.1145/3551349.3556951,12
Empirical Study of System Resources Abused by IoT Attackers.,ASE-2022-38,ASE,2022,2022,https://doi.org/10.1145/3551349.3556901,10.1145/3551349.3556901,13
Enriching Compiler Testing with Real Program from Bug Report.,ASE-2022-39,ASE,2022,2022,https://doi.org/10.1145/3551349.3556894,10.1145/3551349.3556894,12
Evolving Ranking-Based Failure Proximities for Better Clustering in Fault Isolation.,ASE-2022-40,ASE,2022,2022,https://doi.org/10.1145/3551349.3556922,10.1145/3551349.3556922,13
Exploiting Epochs and Symmetries in Analysing MPI Programs.,ASE-2022-41,ASE,2022,2022,https://doi.org/10.1145/3551349.3556954,10.1145/3551349.3556954,12
Finding and Understanding Incompleteness Bugs in SMT Solvers.,ASE-2022-42,ASE,2022,2022,https://doi.org/10.1145/3551349.3560435,10.1145/3551349.3560435,10
FuzzerAid: Grouping Fuzzed Crashes Based On Fault Signatures.,ASE-2022-43,ASE,2022,2022,https://doi.org/10.1145/3551349.3556959,10.1145/3551349.3556959,12
Fuzzle: Making a Puzzle for Fuzzers.,ASE-2022-44,ASE,2022,2022,https://doi.org/10.1145/3551349.3556908,10.1145/3551349.3556908,12
Generating Critical Test Scenarios for Autonomous Driving Systems via Influential Behavior Patterns.,ASE-2022-45,ASE,2022,2022,https://doi.org/10.1145/3551349.3560430,10.1145/3551349.3560430,12
GLITCH: Automated Polyglot Security Smell Detection in Infrastructure as Code.,ASE-2022-46,ASE,2022,2022,https://doi.org/10.1145/3551349.3556945,10.1145/3551349.3556945,12
Graph based Incident Extraction and Diagnosis in Large-Scale Online Systems.,ASE-2022-47,ASE,2022,2022,https://doi.org/10.1145/3551349.3556904,10.1145/3551349.3556904,13
Griffin : Grammar-Free DBMS Fuzzing.,ASE-2022-48,ASE,2022,2022,https://doi.org/10.1145/3551349.3560431,10.1145/3551349.3560431,12
Groundhog: An Automated Accessibility Crawler for Mobile Apps.,ASE-2022-49,ASE,2022,2022,https://doi.org/10.1145/3551349.3556905,10.1145/3551349.3556905,12
Has My Release Disobeyed Semantic Versioning? Static Detection Based on Semantic Differencing.,ASE-2022-50,ASE,2022,2022,https://doi.org/10.1145/3551349.3556956,10.1145/3551349.3556956,12
How Useful is Code Change Information for Fault Localization in Continuous Integration?,ASE-2022-51,ASE,2022,2022,https://doi.org/10.1145/3551349.3556931,10.1145/3551349.3556931,12
HTFuzz: Heap Operation Sequence Sensitive Fuzzing.,ASE-2022-52,ASE,2022,2022,https://doi.org/10.1145/3551349.3560415,10.1145/3551349.3560415,13
HyperAST: Enabling Efficient Analysis of Software Histories at Scale.,ASE-2022-53,ASE,2022,2022,https://doi.org/10.1145/3551349.3560423,10.1145/3551349.3560423,12
ICEBAR: Feedback-Driven Iterative Repair of Alloy Specifications.,ASE-2022-54,ASE,2022,2022,https://doi.org/10.1145/3551349.3556944,10.1145/3551349.3556944,13
Identifying Solidity Smart Contract API Documentation Errors.,ASE-2022-55,ASE,2022,2022,https://doi.org/10.1145/3551349.3556963,10.1145/3551349.3556963,13
Inline Tests.,ASE-2022-56,ASE,2022,2022,https://doi.org/10.1145/3551349.3556952,10.1145/3551349.3556952,13
Insight: Exploring Cross-Ecosystem Vulnerability Impacts.,ASE-2022-57,ASE,2022,2022,https://doi.org/10.1145/3551349.3556921,10.1145/3551349.3556921,13
Is this Change the Answer to that Problem?: Correlating Descriptions of Bug and Code Changes for Evaluating Patch Correctness.,ASE-2022-58,ASE,2022,2022,https://doi.org/10.1145/3551349.3556914,10.1145/3551349.3556914,13
Jasmine: A Static Analysis Framework for Spring Core Technologies.,ASE-2022-59,ASE,2022,2022,https://doi.org/10.1145/3551349.3556910,10.1145/3551349.3556910,13
Keeping Secrets: Multi-objective Genetic Improvement for Detecting and Reducing Information Leakage.,ASE-2022-60,ASE,2022,2022,https://doi.org/10.1145/3551349.3556947,10.1145/3551349.3556947,12
LawBreaker: An Approach for Specifying Traffic Laws and Fuzzing Autonomous Vehicles.,ASE-2022-61,ASE,2022,2022,https://doi.org/10.1145/3551349.3556897,10.1145/3551349.3556897,12
Learning Contract Invariants Using Reinforcement Learning.,ASE-2022-62,ASE,2022,2022,https://doi.org/10.1145/3551349.3556962,10.1145/3551349.3556962,11
Learning to Construct Better Mutation Faults.,ASE-2022-63,ASE,2022,2022,https://doi.org/10.1145/3551349.3556949,10.1145/3551349.3556949,13
Learning to Synthesize Relational Invariants.,ASE-2022-64,ASE,2022,2022,https://doi.org/10.1145/3551349.3556942,10.1145/3551349.3556942,12
Leveraging Practitioners' Feedback to Improve a Security Linter.,ASE-2022-65,ASE,2022,2022,https://doi.org/10.1145/3551349.3560419,10.1145/3551349.3560419,12
LISSA: Lazy Initialization with Specialized Solver Aid.,ASE-2022-66,ASE,2022,2022,https://doi.org/10.1145/3551349.3556965,10.1145/3551349.3556965,12
Low-Resources Project-Specific Code Summarization.,ASE-2022-67,ASE,2022,2022,https://doi.org/10.1145/3551349.3556909,10.1145/3551349.3556909,12
MalWhiteout: Reducing Label Errors in Android Malware Detection.,ASE-2022-68,ASE,2022,2022,https://doi.org/10.1145/3551349.3560418,10.1145/3551349.3560418,13
Mining Android API Usage to Generate Unit Test Cases for Pinpointing Compatibility Issues.,ASE-2022-69,ASE,2022,2022,https://doi.org/10.1145/3551349.3561151,10.1145/3551349.3561151,13
Natural Test Generation for Precise Testing of Question Answering Software.,ASE-2022-70,ASE,2022,2022,https://doi.org/10.1145/3551349.3556953,10.1145/3551349.3556953,12
Neuroevolution-Based Generation of Tests and Oracles for Games.,ASE-2022-71,ASE,2022,2022,https://doi.org/10.1145/3551349.3556939,10.1145/3551349.3556939,13
Not All Dependencies are Equal: An Empirical Study on Production Dependencies in NPM.,ASE-2022-72,ASE,2022,2022,https://doi.org/10.1145/3551349.3556896,10.1145/3551349.3556896,12
Patching Weak Convolutional Neural Network Models through Modularization and Composition.,ASE-2022-73,ASE,2022,2022,https://doi.org/10.1145/3551349.3561153,10.1145/3551349.3561153,12
PRCBERT: Prompt Learning for Requirement Classification using BERT-based Pretrained Language Models.,ASE-2022-74,ASE,2022,2022,https://doi.org/10.1145/3551349.3560417,10.1145/3551349.3560417,13
Precise (Un)Affected Version Analysis for Web Vulnerabilities.,ASE-2022-75,ASE,2022,2022,https://doi.org/10.1145/3551349.3556933,10.1145/3551349.3556933,13
PredART: Towards Automatic Oracle Prediction of Object Placements in Augmented Reality Testing.,ASE-2022-76,ASE,2022,2022,https://doi.org/10.1145/3551349.3561160,10.1145/3551349.3561160,13
Prioritized Constraint-Aided Dynamic Partial-Order Reduction.,ASE-2022-77,ASE,2022,2022,https://doi.org/10.1145/3551349.3561159,10.1145/3551349.3561159,13
Prompt-tuned Code Language Model as a Neural Knowledge Base for Type Inference in Statically-Typed Partial Code.,ASE-2022-78,ASE,2022,2022,https://doi.org/10.1145/3551349.3556912,10.1145/3551349.3556912,13
Provably Tightest Linear Approximation for Robustness Verification of Sigmoid-like Neural Networks.,ASE-2022-79,ASE,2022,2022,https://doi.org/10.1145/3551349.3556907,10.1145/3551349.3556907,13
QATest: A Uniform Fuzzing Framework for Question Answering Systems.,ASE-2022-80,ASE,2022,2022,https://doi.org/10.1145/3551349.3556929,10.1145/3551349.3556929,12
QVIP: An ILP-based Formal Verification Approach for Quantized Neural Networks.,ASE-2022-81,ASE,2022,2022,https://doi.org/10.1145/3551349.3556916,10.1145/3551349.3556916,13
Reentrancy Vulnerability Detection and Localization: A Deep Learning Based Two-phase Approach.,ASE-2022-82,ASE,2022,2022,https://doi.org/10.1145/3551349.3560428,10.1145/3551349.3560428,13
reformulator: Automated Refactoring of the N+1 Problem in Database-Backed Applications.,ASE-2022-83,ASE,2022,2022,https://doi.org/10.1145/3551349.3556911,10.1145/3551349.3556911,12
Repairing Failure-inducing Inputs with Input Reflection.,ASE-2022-84,ASE,2022,2022,https://doi.org/10.1145/3551349.3556932,10.1145/3551349.3556932,13
Robust Learning of Deep Predictive Models from Noisy and Imbalanced Software Engineering Datasets.,ASE-2022-85,ASE,2022,2022,https://doi.org/10.1145/3551349.3556941,10.1145/3551349.3556941,13
SA4U: Practical Static Analysis for Unit Type Error Detection.,ASE-2022-86,ASE,2022,2022,https://doi.org/10.1145/3551349.3556937,10.1145/3551349.3556937,11
Safety and Performance, Why not Both? Bi-Objective Optimized Model Compression toward AI Software Deployment.,ASE-2022-87,ASE,2022,2022,https://doi.org/10.1145/3551349.3556906,10.1145/3551349.3556906,13
Scalable Sampling of Highly-Configurable Systems: Generating Random Instances of the Linux Kernel.,ASE-2022-88,ASE,2022,2022,https://doi.org/10.1145/3551349.3556899,10.1145/3551349.3556899,12
Scrutinizing Privacy Policy Compliance of Virtual Personal Assistant Apps.,ASE-2022-89,ASE,2022,2022,https://doi.org/10.1145/3551349.3560416,10.1145/3551349.3560416,13
Selectively Combining Multiple Coverage Goals in Search-Based Unit Test Generation.,ASE-2022-90,ASE,2022,2022,https://doi.org/10.1145/3551349.3556902,10.1145/3551349.3556902,12
SelfAPR: Self-supervised Program Repair with Test Execution Diagnostics.,ASE-2022-91,ASE,2022,2022,https://doi.org/10.1145/3551349.3556926,10.1145/3551349.3556926,13
smartPip: A Smart Approach to Resolving Python Dependency Conflict Issues.,ASE-2022-92,ASE,2022,2022,https://doi.org/10.1145/3551349.3560437,10.1145/3551349.3560437,12
SmOOD: Smoothness-based Out-of-Distribution Detection Approach for Surrogate Neural Networks in Aircraft Design.,ASE-2022-93,ASE,2022,2022,https://doi.org/10.1145/3551349.3556936,10.1145/3551349.3556936,13
So Many Fuzzers, So Little Time✱: Experience from Evaluating Fuzzers on the Contiki-NG Network (Hay)Stack.,ASE-2022-94,ASE,2022,2022,https://doi.org/10.1145/3551349.3556946,10.1145/3551349.3556946,12
Sorry, I don't Understand: Improving Voice User Interface Testing.,ASE-2022-95,ASE,2022,2022,https://doi.org/10.1145/3551349.3556934,10.1145/3551349.3556934,12
StandUp4NPR: Standardizing SetUp for Empirically Comparing Neural Program Repair Systems.,ASE-2022-96,ASE,2022,2022,https://doi.org/10.1145/3551349.3556943,10.1145/3551349.3556943,13
Static Type Recommendation for Python.,ASE-2022-97,ASE,2022,2022,https://doi.org/10.1145/3551349.3561150,10.1145/3551349.3561150,13
Studying and Understanding the Tradeoffs Between Generality and Reduction in Software Debloating.,ASE-2022-98,ASE,2022,2022,https://doi.org/10.1145/3551349.3556970,10.1145/3551349.3556970,13
SymFusion: Hybrid Instrumentation for Concolic Execution.,ASE-2022-99,ASE,2022,2022,https://doi.org/10.1145/3551349.3556928,10.1145/3551349.3556928,12
The Metamorphosis: Automatic Detection of Scaling Issues for Mobile Apps.,ASE-2022-100,ASE,2022,2022,https://doi.org/10.1145/3551349.3556935,10.1145/3551349.3556935,12
ThirdEye: Attention Maps for Safe Autonomous Driving Systems.,ASE-2022-101,ASE,2022,2022,https://doi.org/10.1145/3551349.3556968,10.1145/3551349.3556968,12
Too Much Accessibility is Harmful! Automated Detection and Analysis of Overly Accessible Elements in Mobile Apps.,ASE-2022-102,ASE,2022,2022,https://doi.org/10.1145/3551349.3560424,10.1145/3551349.3560424,13
Toward Improving the Robustness of Deep Learning Models via Model Transformation.,ASE-2022-103,ASE,2022,2022,https://doi.org/10.1145/3551349.3556920,10.1145/3551349.3556920,13
Towards Understanding the Faults of JavaScript-Based Deep Learning Systems.,ASE-2022-104,ASE,2022,2022,https://doi.org/10.1145/3551349.3560427,10.1145/3551349.3560427,13
Towards Understanding Third-party Library Dependency in C/C++ Ecosystem.,ASE-2022-105,ASE,2022,2022,https://doi.org/10.1145/3551349.3560432,10.1145/3551349.3560432,12
TransplantFix: Graph Differencing-based Code Transplantation for Automated Program Repair.,ASE-2022-106,ASE,2022,2022,https://doi.org/10.1145/3551349.3556893,10.1145/3551349.3556893,13
TransRepair: Context-aware Program Repair for Compilation Errors.,ASE-2022-107,ASE,2022,2022,https://doi.org/10.1145/3551349.3560422,10.1145/3551349.3560422,13
TreeCen: Building Tree Graph for Scalable Semantic Code Clone Detection.,ASE-2022-108,ASE,2022,2022,https://doi.org/10.1145/3551349.3556927,10.1145/3551349.3556927,12
Tseitin or not Tseitin? The Impact of CNF Transformations on Feature-Model Analyses.,ASE-2022-109,ASE,2022,2022,https://doi.org/10.1145/3551349.3556938,10.1145/3551349.3556938,13
Understanding and Predicting Docker Build Duration: An Empirical Study of Containerized Workflow of OSS Projects.,ASE-2022-110,ASE,2022,2022,https://doi.org/10.1145/3551349.3556940,10.1145/3551349.3556940,13
Unsupervised Summarization of Privacy Concerns in Mobile Application Reviews.,ASE-2022-111,ASE,2022,2022,https://doi.org/10.1145/3551349.3561155,10.1145/3551349.3561155,12
Unveiling Hidden DNN Defects with Decision-Based Metamorphic Testing.,ASE-2022-112,ASE,2022,2022,https://doi.org/10.1145/3551349.3561157,10.1145/3551349.3561157,13
VITAS : Guided Model-based VUI Testing of VPA Apps.,ASE-2022-114,ASE,2022,2022,https://doi.org/10.1145/3551349.3556957,10.1145/3551349.3556957,12
Which Exception Shall We Throw?,ASE-2022-115,ASE,2022,2022,https://doi.org/10.1145/3551349.3556895,10.1145/3551349.3556895,12
