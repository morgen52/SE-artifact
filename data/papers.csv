paper_id,title,artifact_url,artifact_url_valid,url_location,url_format
ICSE-2017-0,Semantically enhanced software traceability using deep learning techniques.,https://github.com/jinguo/TraceNN,False,o,t
ICSE-2017-1,Can latent topics in source code predict missing architectural tactics?,,,,
ICSE-2017-2,Analyzing APIs documentation and code to detect directive defects.,,,,
ICSE-2017-3,An unsupervised approach for discovering relevant tutorial fragments for APIs.,http://oscar-lab.org/people/~jxzhang/FRAPT/,True,i,t
ICSE-2017-4,Detecting user story information in developer-client conversations to generate extractive summaries.,http://www3.nd.edu/∼prodeghe/projects/userstories/,False,i,f
ICSE-2017-5,Clone refactoring with lambda expressions.,http://tiny.cc/ICSE17,False,i,f
ICSE-2017-6,Characterizing and detecting anti-patterns in the logging code.,http://nemo9cby.github.io/icse2017.html,True,o,r
ICSE-2017-7,Automated refactoring of legacy Java software to default methods.,http://git.io/v2nX0;https://github.com/ponder-lab/Migrate-Skeletal-Implementation-to-Interface-Refactoring,False,o,r
ICSE-2017-8,Supporting software developers with a holistic recommender system.,http://libra.inf.usi.ch,True,o,f
ICSE-2017-9,Recommending and localizing change requests for mobile apps based on user reviews.,https://sites.google.com/site/changeadvisormobile/,True,i,r
ICSE-2017-10,Machine learning-based detection of open source license exceptions.,,,,
ICSE-2017-11,Software development waste.,,,,
ICSE-2017-12,Becoming agile: a grounded theory of agile transitions in practice.,,,,
ASE-2017-100,STARTS: STAtic regression test selection.,https://youtu.be/PCNtk8jphrM,True,a,t
ICSE-2017-14,Classifying developers into core and peripheral: an empirical study on count and network metrics.,http://siemens.github.io/codeface/icse2017/,True,i,f
ICSE-2017-15,Decoding the representation of code in the brain: an fMRI study of code review and expertise.,http://dijkstra.cs.virginia.edu/fmri/,False,o,t
ICSE-2017-16,Understanding the impressions, motivations, and barriers of one time code contributors to FLOSS projects: a survey.,,,,
ICSE-2017-17,Search-driven string constraint solving for vulnerability detection.,http://carver.cs.ua.edu/Data/2017/ICSE,False,o,f
ICSE-2017-18,A guided genetic algorithm for automated crash reproduction.,http://www.evocrash.org/,False,i,f
ICSE-2017-19,Stochastic optimization of program obfuscation.,https://bitbucket.org/njaliu/closure-star-tool,False,o,t
ICSE-2017-20,ZenIDS: introspective intrusion detection for PHP applications.,https://github.com/uci-plrg/zen-ids,True,o,t
ICSE-2017-21,Statically checking web API requests in JavaScript.,,,,
ICSE-2017-22,On cross-stack configuration errors.,http://mcis.polymtl.ca/˜msayagh/icse2017/DataSet/index.html,False,i,r
ICSE-2017-23,Efficient detection of thread safety violations via coverage-guided generation of concurrent tests.,https://github.com/michaelpradel/ConTeGe/tree/CovCon,True,o,f
ICSE-2017-24,RClassify: classifying race conditions in web applications via deterministic replay.,,,,
ICSE-2017-25,Repairing event race errors by controlling nondeterminism.,https://github.com/cs-au-dk/EventRaceCommander,True,o,s
ICSE-2017-26,Making malory behave maliciously: targeted fuzzing of android execution environments.,https://github.com/srasthofer/FuzzDroid,True,i,s
ICSE-2017-27,A SEALANT for inter-app security holes in android.,http://softarch.usc.edu/sealant/,False,o,t
ICSE-2017-28,An efficient, robust, and scalable approach for analyzing interacting android apps.,http://cse.unl.edu/∼ytsutano/jitana/,False,o,f
ICSE-2017-29,LibD: scalable and precise third-party library detection in android markets.,https://github.com/IIE-LibD/libd.git,True,i,t
ICSE-2017-30,Analysis and testing of notifications in Android wear applications.,,,,
ICSE-2017-31,Adaptive unpacking of Android apps.,https://sites.google.com/site/packergrind,True,c,t
ICSE-2017-32,Performance diagnosis for inefficient loops.,,,,
ICSE-2017-33,How do developers fix cross-project correlated bugs?: a case study on the GitHub scientific python ecosystem.,https://github.com/njuap/ICSE2017,True,o,f
ICSE-2017-34,Feedback-based debugging.,https://github.com/llmhyy/microbat,True,o,r
ICSE-2017-35,Learning syntactic program transformations from examples.,http://www.dsc.ufcg.edu.br/~spg/refazer/;https://github.com/gustavoasoares/refazer,False,i,f
ICSE-2017-36,Precise condition synthesis for program repair.,https://github.com/Adobee/ACS,True,o,f
ICSE-2017-37,Heuristically matching solution spaces of arithmetic formulas to efficiently reuse solutions.,,,,
ICSE-2017-38,Exploring API embedding for API usages and applications.,,,,
ICSE-2017-39,Unsupervised software-specific morphological forms inference from informal discussions.,https://se-thesaurus.appspot.com/,True,o,f
ICSE-2017-40,SPAIN: security patch analysis for binaries towards understanding the pain and pills.,http://pat.scse.ntu.edu.sg/spain/,False,o,r
ICSE-2017-41,Travioli: a dynamic analysis for detecting data-structure traversals.,https://github.com/rohanpadhye/travioli,True,i,t
ICSE-2017-42,ProEva: runtime proactive performance evaluation based on continuous-time markov chains.,,,,
ICSE-2017-43,Glacier: transitive class immutability for Java.,,,,
ICSE-2017-44,Challenges for static analysis of Java reflection: literature review and empirical study.,https://doi.org/10.5281/zenodo.163326;https://github.com/cwi-swat/static-analysis-reflection/tree/icse2017,False,o,r
ICSE-2017-45,Machine-learning-guided selectively unsound static analysis.,,,,
ICSE-2017-46,How good is a security policy against real breaches?: a HIPAA case study.,,,,
ICSE-2017-47,Adaptive coverage and operational profile-based testing for reliability improvement.,http://labsedc.isti.cnr.it/covrel2017,True,o,f
ICSE-2017-48,RADAR: a lightweight tool for requirements and architecture decision analysis.,https://ucl-badass.github.io/radar/,True,o,t
ICSE-2017-49,PEoPL: projectional editing of product lines.,http://peopl.de/icse2017,True,i,r
ICSE-2017-50,Do developers read compiler error messages?,http://go.barik.net/gazerbeams,True,o,f
ICSE-2017-51,A general framework for dynamic stub injection.,,,,
ICSE-2017-52,An empirical study on mutation, statement and branch coverage fault revelation that avoids the unreliable clean program assumption.,https://sites.google.com/site/mikepapadakis/faults-mutants,True,c,f
ICSE-2017-53,Evaluating and improving fault localization.,https://bitbucket.org/rjust/fault-localization-data,True,o,t
ICSE-2017-54,Syntactic and semantic differencing for combinatorial models of test designs.,,,,
ICSE-2017-55,Balancing soundness and efficiency for practical testing of configurable systems.,https://sabrinadfs.github.io/s-splat/,True,c,r
ICSE-2017-56,Automatic text input generation for mobile testing.,,,,
ICSE-2017-57,A test-suite diagnosability metric for spectrum-based fault localization approaches.,https://github.com/aperez/evosuite,True,c,t
ICSE-2017-58,Automated transplantation and differential testing for clones.,http://web.cs.ucla.edu/~tianyi.zhang/grafter.html,False,i,f
ICSE-2017-59,Code defenders: crowdsourcing effective tests and subtle mutants with a mutation testing game.,,,,
ICSE-2017-60,Optimizing test placement for module-level regression testing.,http://mir.cs.illinois.edu/awshi2/testoptimizer,True,o,f
ICSE-2017-61,Learning to prioritize test programs for compiler testing.,https://github.com/JunjieChen/let,True,o,f
ICSE-2017-62,What causes my test alarm?: automatic cause analysis for test alarms in system and integration testing.,,,,
ICSE-2017-63,Symbolic model extraction for web application verification.,http://bocete.github.io/adsl/;https://github.com/Bocete/adsl,False,i,f
ICSE-2017-64,UML diagram refinement (focusing on class- and use case diagrams).,http://tinyurl.com/jz4akby,True,o,t
ICSE-2017-65,Fuzzy fine-grained code-history analysis.,http://people.cs.vt.edu/fservant/replication/17-ICSE-Servant-Jones.zip,False,c,s
ICSE-2017-66,To type or not to type: quantifying detectable bugs in JavaScript.,http://ttendency.cs.ucl.ac.uk/projects/type_study/index.html,False,i,t
ICSE-2017-67,The evolution of continuous experimentation in software product development: from data to a data-driven organization at scale.,,,,
ICSE-2018-0,Context-aware patch generation for better automated program repair.,https://github.com/justinwm/CapGen,True,o,s
ICSE-2018-1,Towards practical program repair with on-demand candidate generation.,,,,
ICSE-2018-4,Software protection on the go: a large-scale empirical study on mobile app obfuscation.,,,,
ICSE-2018-5,GUILeak: tracing privacy policy claims on user input data for Android applications.,https://sites.google.com/site/uiprivacy2017/,True,o,r
ICSE-2018-6,Online app review analysis for identifying emerging issues.,https://github.com/ReMine-Lab/IDEA,True,o,f
ICSE-2018-8,Neuro-symbolic program corrector for introductory programming assignments.,,,,
ICSE-2018-9,Automated localization for unreproducible builds.,https://reploc.bitbucket.io,True,i,t
ICSE-2018-10,Enlightened debugging.,http://www.cc.gatech.edu/~orso/software/enlighten/,True,i,t
ICSE-2018-12,Sentiment analysis for software engineering: how far can we go?,https://sentiment-se.github.io/,False,i,r
ICSE-2018-13,Identifying features in forks.,https://github.com/shuiblue/INFOX,True,i,f
ASE-2017-101,EventFlowSlicer: a tool for generating realistic goal-driven GUI tests.,https://youtu.be/hw7WYz8WYVU,True,a,t
ICSE-2018-16,Semantic program repair using a reference implementation.,,,,
ICSE-2018-17,Automated repair of mobile friendly problems in web pages.,https://github.com/USC-SQL/mfix,True,o,r
ICSE-2018-18,Static automated program repair for heap properties.,https://github.com/squaresLab/footpatch,True,i,f
ICSE-2018-21,Automated reporting of GUI design violations for mobile apps.,,,,
ICSE-2018-22,Leveraging program analysis to reduce user-perceived latency in mobile applications.,https://softarch.usc.edu/PALOMA;https://github.com/felicitia/PALOMA,False,i,r
ICSE-2018-23,Repairing crashes in Android apps.,https://droix2017.github.io/;https://github.com/stan6/droixbench,False,c,t
ICSE-2018-24,Hybrid regression test selection.,,,,
ICSE-2018-25,Fine-grained test minimization.,https://github.com/saltlab/Testler,True,c,r
ICSE-2018-26,FAST approaches to scalable similarity-based test case prioritization.,https://github.com/icse18-fast/FAST,True,o,f
ICSE-2018-27,Towards refactoring-aware regression test selection.,http://eclipse.org/jdt,True,i,r
ICSE-2018-28,Inheritance usage patterns in open-source systems.,,,,
ICSE-2018-29,Almost there: a study on quasi-contributors in open source software projects.,https://doi.org/10.5281/zenodo.1154906;https://github.com/igorsteinmacher/ICSE_QuasiContributors/tree/master,False,o,f
ICSE-2018-31,To distribute or not to distribute?: why licensing bugs matter.,,,,
ICSE-2018-32,Augusto: exploiting popular functionalities for the generation of semantic GUI tests with Oracles.,https://github.com/danydunk/Augusto,True,i,f
ICSE-2018-33,Towards optimal concolic testing.,http://sav.sutd.edu.sg/research/smartconcolic,False,o,r
ICSE-2018-34,DeepTest: automated testing of deep-neural-network-driven autonomous cars.,https://deeplearningtest.github.io/deepTest/;https://github.com/deeplearningTest/deepTest,False,i,t
ICSE-2018-35,Precise concolic unit testing of C programs using extended units and symbolic alarm filtering.,,,,
ICSE-2018-36,Spatio-temporal context reduction: a pointer-analysis-based static approach for detecting use-after-free vulnerabilities.,,,,
ICSE-2018-37,Program splicing.,,,,
ICSE-2018-38,Chopped symbolic execution.,https://srg.doc.ic.ac.uk/projects/chopper/,True,o,t
ICSE-2018-39,Perses: syntax-guided program reduction.,,,,
ICSE-2018-40,Secure coding practices in Java: challenges and vulnerabilities.,http://people.cs.vt.edu/nm8247/icse18.xlsx,True,i,t
ICSE-2018-41,EnMobile: entity-based characterization and analysis of mobile malware.,https://sites.google.com/site/entitymobile/,True,o,r
ICSE-2018-44,Does the propagation of artifact changes across tasks reflect work dependencies?,,,,
ICSE-2018-45,Large-scale analysis of framework-specific exceptions in Android apps.,https://crashanalysis.github.io/,True,i,r
ICSE-2018-47,A large-scale empirical study on the effects of code obfuscations on Android apps and anti-malware products.,,,,
ICSE-2018-49,DeFlaker: automatically detecting flaky tests.,https://github.com/gmu-swe/deflaker,True,c,r
ICSE-2018-50,DetReduce: minimizing Android GUI test suites for regression testing.,https://github.com/wtchoi/swifthand2,True,i,t
ICSE-2018-51,Time to clean your test objectives.,http://icse18.marcozzi.net/,False,o,f
ICSE-2018-52,Prioritizing browser environments for web application test execution.,http://webeng.kaist.ac.kr/webengpress/browser-env-prio/,True,i,r
ICSE-2018-56,Accurate and efficient refactoring detection in commit history.,https://github.com/tsantalis/RefactoringMiner,True,i,r
ICSE-2018-61,How modern news aggregators help development communities shape and share knowledge.,https://www.zenodo.org/record/1167838#.WnnlJYJG1vp,True,o,r
ICSE-2018-62,Adding sparkle to social coding: an empirical study of repository badges in the npm ecosystem.,https://github.com/CMUSTRUDEL/npm-badges,True,c,s
ICSE-2018-63,"Was my contribution fairly reviewed?": a framework to study the perception of fairness in modern code reviews.,,,,
ICSE-2018-66,Are mutation scores correlated with real fault detection?: a large scale empirical study on the relationship between mutants and real faults.,,,,
ICSE-2018-67,Efficient sampling of SAT solutions for testing.,https://github.com/RafaelTupynamba/quicksampler/,True,i,t
ICSE-2018-69,Understanding developers' needs on deprecation as a language feature.,,,,
ICSE-2018-70,On the dichotomy of debugging behavior among programmers.,https://archive.org/details/debugging-replication-package,True,i,f
ICSE-2018-73,Dataflow tunneling: mining inter-request data dependencies for request-based applications.,,,,
ICSE-2018-74,Launch-mode-aware context-sensitive activity transition analysis.,,,,
ICSE-2018-75,UFO: predictive concurrency use-after-free detection.,https://github.com/parasol-aser/UFO,True,i,t
ICSE-2018-76,Collective program analysis.,,,,
ICSE-2018-77,Statistical learning of API fully qualified names in code snippets of online forums.,,,,
ICSE-2018-78,When not to comment: questions and tradeoffs with API documentation for C++ projects.,https://goo.gl/wMg3vY,True,o,r
ICSE-2018-79,Deuce: a lightweight user interface for structured editing.,http://ravichugh.github.io/sketch-n-sketch/;https://github.com/ravichugh/sketch-n-sketch,False,i,t
ICSE-2018-80,From UI design image to GUI skeleton: a neural machine translator to bootstrap mobile GUI implementation.,,,,
ICSE-2018-81,When testing meets code review: why and how developers review tests.,https://doi.org/10.5281/zenodo.1172419,True,i,r
ICSE-2018-82,Redefining prioritization: continuous prioritization for continuous integration.,,,,
ICSE-2018-88,Do programmers work at night or during the weekend?,,,,
ICSE-2018-89,Multi-granular conflict and dependency analysis in software engineering based on graph transformation.,https://github.com/KristopherBorn/multiCDA,True,o,t
ICSE-2018-90,Self-hiding behavior in Android apps: detection and characterization.,http://spruce.cs.ucr.edu/SelfHiding/,False,i,f
ICSE-2018-92,ConflictJS: finding and understanding conflicts between JavaScript libraries.,https://github.com/sola-da/ConflictJS,True,i,f
ICSE-2018-93,Debugging data flows in reactive programs.,https://doi.org/10.5281/zenodo.814981,True,c,r
ICSE-2018-94,Do you remember this source code?,https://bitbucket.org/Jacob_Krueger/icse-2018-data,True,o,f
ICSE-2018-95,Inferring hierarchical motifs from execution traces.,https://github.com/saltlab/sabalan,True,o,r
ICSE-2018-97,Identifying patch correctness in test-based program repair.,https://github.com/Ultimanecat/DefectRepairing,True,o,s
ICSE-2018-98,How not to structure your database-backed web applications: a study of performance bugs in the wild.,http://hyperloop.cs.uchicago.edu/,True,i,r
ICSE-2018-99,Speedoo: prioritizing performance optimization opportunities.,,,,
ICSE-2018-101,The evolution of requirements practices in software startups.,,,,
ICSE-2018-102,Traceability in the wild: automatically augmenting incomplete trace links.,,,,
ICSE-2018-103,A temporal permission analysis and enforcement framework for Android.,https://sites.google.com/view/terminator18,True,i,r
ICSE-2018-105,RFC-directed differential testing of certificate validation in SSL/TLS implementations.,,,,
ICSE-2018-106,Symbolic verification of regular properties.,,,,
ICSE-2018-111,Are code examples on an online Q&A forum reliable?: a study of API misuse on stack overflow.,http://web.cs.ucla.edu/~tianyi.zhang/examplecheck.html,False,o,f
ICSE-2018-113,Propagating configuration decisions with modal implication graphs.,https://github.com/FeatureIDE/FeatureIDE,True,i,f
ICSE-2018-114,A combinatorial approach for exposing off-nominal behaviors.,,,,
ICSE-2018-115,Identifying design problems in the source code: a grounded theory.,https://ssousaleo.github.io/ICSE2018/,False,o,r
ICSE-2018-117,Deep code search.,https://github.com/guxd/deep-code-search,True,c,f
ICSE-2018-119,FaCoY: a code-to-code search engine.,https://github.com/facoy/facoy,True,o,f
ICSE-2018-120,Generalized data structure synthesis.,https://cozy.uwplse.org;https://github.com/CozySynthesizer/cozy,False,i,t
ICSE-2018-121,A graph solver for the automated generation of consistent domain-specific models.,https://github.com/viatra/VIATRA-Generator,True,c,r
ICSE-2018-122,Automatically finding bugs in a commercial cyber-physical system development tool chain with SLforge.,https://github.com/verivital/slsf_randgen/code,False,o,r
ICSE-2018-123,Context-aware conversational developer assistants.,,,,
ICSE-2018-124,Open source barriers to entry, revisited: a sociotechnical perspective.,,,,
ICSE-2018-125,Testing vision-based control systems using learnable evolutionary algorithms.,https://sites.google.com/site/adasexperimentsdata/,True,i,r
ICSE-2018-126,To preserve or not to preserve invalid solutions in search-based software engineering: a case study in software product lines.,https://github.com/jmguo/balanceValidity/,True,i,t
ICSE-2018-127,Nemo: multi-criteria test-suite minimization with integer nonlinear programming.,http://www.ics.uci.edu/~seal/projects/nemo/index.html;https://github.com/jwlin/Nemo,False,i,r
ICSE-2018-128,Is "better data" better than "better data miners"?: on the benefits of tuning SMOTE for defect prediction.,http://tiny.cc/smotuned;https://github.com/ai-se/Smote_tune,False,i,t
ICSE-2018-133,CCAligner: a token based large-gap clone detector.,,,,
ICSE-2018-134,HireBuild: an automatic approach to history-driven repair of build scripts.,https://sites.google.com/site/buildfix2017/,True,o,f
ICSE-2018-135,The road to live programming: insights from the practice.,https://doi.org/10.5281/zenodo.1171117;https://github.com/JurajKubelka/ExploratoryStudyInPharo/tree/master,False,o,r
ICSE-2018-136,Assessing the threat of untracked changes in software evolution.,https://github.com/andrehora/rastreability,False,o,f
ICSE-2018-137,Programming not only by example.,,,o,t
ICSE-2018-138,Goal-conflict likelihood assessment based on model counting.,,,,
ICSE-2018-140,A static verification framework for message passing in Go using behavioural types.,,,,
ICSE-2018-141,Inferring and asserting distributed system invariants.,,,,
ICSE-2018-142,DroidStar: callback typestates for Android classes.,https://github.com/cuplv/droidstar,True,i,t
ICSE-2018-143,Debugging with intelligence via probabilistic inference.,,,,
ICSE-2018-144,Reducer-based construction of conditional verifiers.,https://doi.org/10.5281/zenodo.1172228,True,o,r
ASE-2017-102,ANDROFLEET: testing WiFi peer-to-peer mobile apps in the large.,https://youtu.be/gJ5_Ed7XL04,True,a,t
ASE-2017-103,FEMIR: a tool for recommending framework extension examples.,https://asaduzzamanparvez.wordpress.com/femir,True,a,t
ASE-2017-105,Opiner: an opinion search and summarization engine for APIs.,https://youtu.be/XAXpfmg5Lqs,True,a,t
ASE-2017-106,Defaultification refactoring: a tool for automatically converting Java methods to default.,http://youtu.be/YZHIy0yePh8,True,a,t
ASE-2017-107,Kobold: web usability as a service.,http://autorefactoring.lifia.info.unlp.edu.ar/;https://youtu.be/c-myYPMUh0Q,False,a,t
ICSE-2019-0,Learning to spot and refactor inconsistent method names.,https://github.com/TruX-DTF/debug-method-name,True,c,t
ICSE-2019-1,Harnessing evolution for multi-hunk program repair.,,,,
ICSE-2019-2,On learning meaningful code changes via neural machine translation.,https://sites.google.com/view/learning-codechanges,True,i,r
ICSE-2019-3,Natural software revisited.,https://github.com/CESEL/CodeEntropyReplication,True,a,r
ICSE-2019-4,Towards automating precision studies of clone detectors.,http://www.inspectorclone.org,False,i,t
ICSE-2019-5,Leopard: identifying vulnerable code for vulnerability assessment through program metrics.,https://sites.google.com/site/leopardsite2017/,True,o,r
ICSE-2019-6,Smoke: scalable path-sensitive memory leak detection for millions of lines of code.,https://smokeml.github.io/,True,o,f
ICSE-2019-7,Reasonably-most-general clients for JavaScript library analysis.,,,,
ICSE-2019-8,Resource-aware program analysis via online abstraction coarsening.,https://github.com/ropas/sparrow,True,o,r
ICSE-2019-9,Automated reporting of anti-patterns and decay in continuous integration.,https://doi.org/10.5281/zenodo.2566032,True,o,r
ICSE-2019-10,A system identification based Oracle for control-CPS software fault localization.,,,,
ICSE-2019-11,ReCDroid: automatically reproducing Android application crashes from bug reports.,https://github.com/AndroidTestBugReport/ReCDroid,True,i,r
ICSE-2019-12,Mining historical test logs to predict bugs and localize faults in the test logs.,,,,
ICSE-2019-13,Dlfinder: characterizing and detecting duplicate logging code smells.,,,,
ICSE-2019-14,The seven sins: security smells in infrastructure as code scripts.,https://doi.org/10.6084/m9.figshare.6943316,True,o,r
ICSE-2019-15,DifFuzz: differential fuzzing for side-channel analysis.,https://github.com/isstac/diffuzz,True,o,t
ICSE-2019-16,Automatically generating precise Oracles from structured natural language specifications.,https://github.com/LASER-UMASS/Swami,True,i,t
ICSE-2019-17,The product backlog.,,,,
ICSE-2019-18,Easy modelling and verification of unpredictable and preemptive interrupt-driven systems.,,,,
ICSE-2019-19,Towards understanding and reasoning about Android interoperations.,,,,
ICSE-2019-20,Zero-overhead path prediction with progressive symbolic execution.,https://hub.docker.com/r/naegling/icse19-zop2,True,i,r
ICSE-2019-21,Mimic: UI compatibility testing system for Android apps.,,,,
ICSE-2019-22,IconIntent: automatic identification of sensitive UI widgets based on icon classification for Android apps.,,,,
ICSE-2019-23,Practical GUI testing of Android applications via model abstraction and refinement.,https://github.com/tianxiaogu/ape,True,i,f
ICSE-2019-24,AutoTap: synthesizing and repairing trigger-action programs using LTL properties.,https://github.com/zlfben/autotap,True,i,t
ICSE-2019-25,Active inductive logic programming for code search.,https://github.com/AishwaryaSivaraman/ALICE-ILP-for-Code-Search,True,i,f
ICSE-2019-26,NL2Type: inferring JavaScript function types from natural language information.,https://github.com/sola-da/NL2Type,True,o,t
ICSE-2019-27,Analyzing and supporting adaptation of online code examples.,https://github.com/tianyi-zhang/ExampleStack-ICSE-Artifact,True,i,f
ICSE-2019-28,DockerizeMe: automatic inference of environment dependencies for python code snippets.,https://github.com/dockerizeme/dockerizeme,True,i,t
ICSE-2019-29,BugSwarm: mining and continuously growing a dataset of reproducible failures and fixes.,,,,
ICSE-2019-30,ActionNet: vision-based workflow action recognition from programming screencasts.,,,,
ICSE-2019-31,How C++ developers use immutability declarations: an empirical study.,,,,
ICSE-2019-32,Latent patterns in activities: a field study of how developers manage context.,https://sarmaresearch.github.io/ICSE19-LatentPatternsInActivities/,False,o,f
ICSE-2019-33,Developer reading behavior while summarizing Java methods: size and context matters.,https://doi.org/10.5281/zenodo.2550768,True,o,t
ICSE-2019-34,Distilling neural representations of data structure manipulation using fMRI and fNIRS.,http://web.eecs.umich.edu/∼weimerw/fmri.html,False,o,f
ICSE-2019-35,FastLane: test minimization for rapidly deployed large-scale online services.,,,,
ICSE-2019-36,Scalable approaches for test suite reduction.,,,,
ICSE-2019-37,A framework for checking regression test selection tools.,http://cozy.ece.utexas.edu/rtscheck/,False,i,t
ICSE-2019-38,Supporting analysts by dynamic extraction and classification of requirements-related knowledge.,,,,
ICSE-2019-39,Analysis and detection of information types of open source software issue discussions.,https://git.io/fhQTt;https://github.com/deekshaarya4/Info_Types_in_OSS_Issue_Discussions,True,o,f
ICSE-2019-40,Do developers discover new tools on the toilet?,,,,
ICSE-2019-41,Tool choice matters: JavaScript quality assurance tools and usage outcomes in GitHub projects.,,,,
ICSE-2019-42,Hunting for bugs in code coverage tools via randomized differential testing.,,,,
ICSE-2019-43,Rotten green tests.,,,,
ICSE-2019-44,VFix: value-flow-guided precise program repair for null pointer dereferences.,,,,
ICSE-2019-45,On reliability of patch correctness assessment.,https://github.com/anonymousICSE2019/patchcorrectness,True,o,r
ICSE-2019-46,How reliable is the crowdsourced knowledge of security implementation?,https://github.com/mileschen360/Higgs,True,i,t
ICSE-2019-47,Pattern-based mining of opinions in Q&A websites.,https://pome-repo.github.io/,True,i,r
ICSE-2019-48,Detection and repair of architectural inconsistencies in Java.,https://sites.google.com/view/darcy-project/home,True,i,r
ICSE-2019-49,Could I have a stack trace to examine the dependency conflict issue?,https://github.com/skillwind/RIDDLE,True,i,f
ICSE-2019-50,Investigating the impact of multiple dependency structures on software defects.,https://github.com/cuidi34/ICSE19-Data,True,i,f
ICSE-2019-51,StoryDroid: automated generation of storyboard for Android apps.,https://sites.google.com/view/storydroid,True,o,f
ICSE-2019-52,Statistical algorithmic profiling for randomized approximate programs.,https://axprof.org/,True,i,t
ICSE-2019-53,Safe automated refactoring for intelligent parallelization of Java 8 streams.,,,,
ICSE-2019-54,Detecting atomicity violations for event-driven Node.js applications.,,,,
ICSE-2019-55,Parallel refinement for multi-threaded program verification.,https://github.com/yinliangze/yogar-cbmc-parallel,True,o,t
ICSE-2019-56,Mining software defects: should we consider affected releases?,https://doi.org/10.5281/zenodo.2549359,True,i,r
ICSE-2019-57,Class imbalance evolution and verification latency in just-in-time software defect prediction.,http://doi.org/10.5281/zenodo.2555695,True,o,t
ICSE-2019-58,FLOSS participants' perceptions about gender and inclusiveness: a survey.,,,,
ICSE-2019-59,Going farther together: the impact of social capital on sustained participation in open source.,https://doi.org/10.5281/zenodo.2550931,True,o,s
ICSE-2019-60,Investigating the effects of gender bias on GitHub.,https://figshare.com/s/de8412ceac89a3687510,True,o,f
ICSE-2019-61,SLF: fuzzing without valid seed inputs.,,,,
ICSE-2019-62,Superion: grammar-aware greybox fuzzing.,https://github.com/zhunki/Superion,True,i,f
ICSE-2019-63,Grey-box concolic testing on binary code.,https://github.com/SoftSec-KAIST/Eclipser,True,i,t
ICSE-2019-64,RESTler: stateful REST API fuzzing.,,,,
ICSE-2019-65,Training binary classifiers as data structure invariants.,,,,
ICSE-2019-66,Graph embedding based familial analysis of Android malware using unsupervised learning.,,,,
ICSE-2019-67,A novel neural source code representation based on abstract syntax tree.,https://github.com/zhangj1994/astnn,True,c,t
ICSE-2019-68,A neural model for generating natural language summaries of program subroutines.,https://bit.ly/2MLSxFg;https://github.com/mcmillco/funcom,True,o,s
ICSE-2019-69,The list is the process: reliable pre-integration tracking of commits on mailing lists.,https://github.com/lfd/PaStA,True,i,f
ICSE-2019-70,Graph-based mining of in-the-wild, fine-grained, semantic code change patterns.,https://nguyenhoan.github.io/CPatMiner/index.html,True,i,t
ICSE-2019-71,Intention-based integration of software variants.,https://sites.google.com/view/incline-online/,True,o,r
ICSE-2019-72,Supporting the statistical analysis of variability models.,https://github.com/rheradio/VMStatAnal,True,o,t
ICSE-2019-73,Multifaceted automated analyses for variability-intensive embedded systems.,,,,
ICSE-2019-74,Exposing library API misuses via mutation analysis.,,,,
ICSE-2019-75,Pivot: learning API-device correlations to facilitate Android compatibility issue detection.,https://github.com/FICIssuePivot/Pivot,True,i,r
ICSE-2019-76,SafeCheck: safety enhancement of Java unsafe API.,,,,
ICSE-2019-77,CTRAS: crowdsourced test report aggregation and summarization.,https://github.com/iris-42/CTRAS,True,i,f
ICSE-2019-78,iSENSE: completion-aware crowdtesting management.,https://github.com/wangjunjieISCAS/CM,True,o,f
ICSE-2019-79,How practitioners perceive coding proficiency.,,,,
ICSE-2019-80,Socio-technical work-rate increase associates with changes in work patterns in online projects.,,,,
ICSE-2019-81,Why do episodic volunteers stay in FLOSS communities?,,,,
ICSE-2019-82,When code completion fails: a case study on real-world completions.,https://doi.org/10.5281/zenodo.2562249;https://github.com/VHellendoorn/Completion-Artifact/tree/0.1,True,a,t
ICSE-2019-83,Interactive production performance feedback in the IDE.,https://github.com/sealuzh/PerformanceHat,True,o,r
ICSE-2019-84,Redundant loads: a software inefficiency indicator.,,,,
ICSE-2019-85,View-centric performance optimization for database-backed web applications.,https://hyperloop-rails.github.io/panorama/;https://github.com/hyperloop-rails/panorama-static-analyzer/,True,o,r
ICSE-2019-86,Adjust: runtime mitigation of resource abusing third-party online ads.,,,,
ICSE-2019-87,Symbolic repairs for GR(1) specifications.,http://smlab.cs.tau.ac.il/syntech/repair/,True,c,f
ICSE-2019-88,CRADLE: cross-backend validation to detect and localize bugs in deep learning libraries.,,,,
ICSE-2019-89,Guiding deep learning system testing using surprise adequacy.,https://github.com/coinse/sadl,True,i,f
ICSE-2019-90,FOCUS: a recommender system for mining API function calls and usage patterns.,,,,
ICSE-2019-91,Test-driven code review: an empirical study.,https://doi.org/10.5281/zenodo.2553139,True,a,t
ICSE-2019-92,Why does code review work for open source software communities?,,,,
ICSE-2019-93,Distance-based sampling of software configuration spaces.,https://github.com/se-passau/Distance-Based_Data,True,i,f
ICSE-2019-94,DeepPerf: performance prediction for configurable software with deep sparse neural network.,https://github.com/DeepPerf/DeepPerf,True,c,t
ICSE-2019-95,GreenBundle: an empirical study on the energy impact of bundled processing.,https://github.com/shaifulcse/GreenBundle-Data-Code,True,i,r
ICSE-2019-96,Search-based energy testing of Android.,,,,
ICSE-2019-97,Global optimization of numerical programs via prioritized stochastic algebraic transformations.,https://seg.nju.edu.cn/eytang/numopt/,True,o,f
ICSE-2019-98,Type migration in ultra-large-scale codebases.,,,,
ICSE-2019-99,Dynamic slicing for Android.,https://github.com/archer29m/AndroidSlicer,True,a,f
ICSE-2019-100,Recovering variable names for minified code with usage contexts.,https://mrstarrynight.github.io/JSNeat/,True,i,r
ICSE-2019-101,Gigahorse: thorough, declarative decompilation of smart contracts.,https://contract-library.com;https://library.dedaub.com/contracts/hottest,True,i,t
ICSE-2019-102,Probabilistic disassembly.,,,,
ICSE-2019-103,Software documentation issues unveiled.,http://bit.ly/2wokNDJ;https://github.com/acid-state/acid-state/,True,o,r
ICSE-2019-104,9.6 million links in source code comments: purpose, evolution, and decay.,https://github.com/NAIST-SE/9.6MillionLinks,True,o,t
ICSE-2019-105,Leveraging artifact trees to evolve and reuse safety cases.,https://github.com/SAREC-Lab/SAFA-Artifacts,True,a,f
ICSE-2019-106,Detecting incorrect build rules.,https://github.com/nandor/mkcheck,True,i,t
ICSE-2019-107,Adversarial sample detection for deep neural network through model mutation testing.,https://github.com/dgl-prc/m_testing_adversatial_sample,True,i,r
ICSE-2019-108,Deep differential testing of JVM implementations.,,,,
ICSE-2020-0,Learning-to-rank vs ranking-to-learn: strategies for regression testing in continuous integration.,https://github.com/icse20/RT-CI,True,o,f
ICSE-2020-1,A cost-efficient approach to building in continuous integration.,https://doi.org/10.5281/zenodo.2667377,False,o,s
ICSE-2020-2,Practical fault detection in puppet programs.,https://github.com/AUEB-BALab/fsmove/,True,i,t
ICSE-2020-3,Learning from, understanding, and supporting DevOps artifacts for docker.,,,,
ICSE-2020-4,Adapting requirements models to varying environments.,,,,
ICSE-2020-5,Comparing formal tools for system design: a judgment study.,,,,
ICSE-2020-6,Debugging inputs.,https://tinyurl.com/debugging-inputs-icse-2020,True,o,t
ICSE-2020-7,Causal testing: understanding defects' root causes.,http://holmes.cs.umass.edu/,False,a,t
ICSE-2020-8,Impact analysis of cross-project bugs on software ecosystems.,,,,
ICSE-2020-9,Taming behavioral backward incompatibilities via cross-project testing and analysis.,,,,
ICSE-2020-10,Watchman: monitoring dependency conflicts for Python library ecosystem.,,,,
ICSE-2020-11,One size does not fit all: a grounded theory and online survey study of developer preferences for security warning types.,,,,
ASE-2017-108,IntPTI: automatic integer error repair with proper-type inference.,https://youtu.be/9Tgd4A_FgZM,True,a,t
ICSE-2020-13,How software practitioners use informal local meetups to share software engineering knowledge.,,,,
ICSE-2020-14,Predicting developers' negative feelings about code review.,,,,
ICSE-2020-15,Near-duplicate detection in web app model inference.,https://github.com/NDStudyICSE2019/NDStudy. GitHub Repository,False,i,r
ICSE-2020-16,Extracting taint specifications for JavaScript libraries.,http://brics.dk/taser/,True,o,t
ICSE-2020-17,SLACC: simion-based language agnostic code clones.,https://github.com/DynamicCodeSearch/SLACC/tree/ICSE20,True,c,r
ICSE-2020-18,Finding client-side business flow tampering vulnerabilities.,https://github.com/yirugi/JSFlowTamper,True,o,f
ICSE-2020-19,Securing unsafe rust programs with XRust.,https://github.com/parasol-aser/XRust,True,c,t
ICSE-2020-20,Is rust used safely by software developers?,https://github.com/ananevans/icse2020,True,o,t
ICSE-2020-21,Burn after reading: a shadow stack with microsecond-level runtime rerandomization for protecting return addresses.,,,,
ICSE-2020-22,SAVER: scalable, precise, and safe memory-error repair.,https://github.com/kupl/SAVER_public/,True,i,f
ICSE-2020-23,Revealing injection vulnerabilities by leveraging existing tests.,https://doi.org/10.6084/m9.figshare.11592033;https://github.com/gmu-swe/rivulet,True,c,r
ICSE-2020-24,RoScript: a visual script driven truly non-intrusive robotic testing system for touch screen applications.,,,,
ICSE-2020-25,Translating video recordings of mobile app usages into replayable scenarios.,,,,
ICSE-2020-26,Unblind your apps: predicting natural-language labels for mobile GUI components by deep learning.,,,,
ICSE-2020-27,SLEMI: equivalence modulo input (EMI) based mutation of CPS models for finding compiler bugs in Simulink.,https://github.com/shafiul/slemi,True,i,f
ICSE-2020-28,DeepBillboard: systematic physical-world testing of autonomous driving systems.,https://github.com/deepbillboard/DeepBillboard,True,o,t
ICSE-2020-29,Misbehaviour prediction for autonomous driving systems.,https://github.com/testingautomated-usi/selforacle/,True,i,r
ICSE-2020-30,Approximation-refinement testing of compute-intensive cyber-physical models: an approach based on system identification.,https://github.com/SNTSVV/ARIsTEO,True,i,r
ICSE-2020-31,A comprehensive study of autonomous vehicle bugs.,http://tiny.cc/cps_bug_analysis,True,i,r
ICSE-2020-32,Studying the use of Java logging utilities in the wild.,https://www.eecs.yorku.ca/~chenfsd/resources/icse2020_replication.zip,False,i,r
ICSE-2020-33,A study on the prevalence of human values in software engineering publications, 2015 - 2018.,,,,
ICSE-2020-34,Explaining pair programming session dynamics from knowledge gaps.,,,,
ICSE-2020-35,Engineering gender-inclusivity into software: ten teams' tales from the trenches.,,,,
ASE-2017-89,SEALANT: a detection and visualization tool for inter-app security vulnerabilities in Android.,https://youtu.be/E4lLQonOdUw,True,a,t
ICSE-2020-37,Multiple-entry testing of Android applications by constructing activity launching contexts.,,,,
ICSE-2020-38,ComboDroid: generating high-quality test inputs for Android apps via use case combinations.,https://github.com/skull591/ComboDroid-Artifact,True,o,f
ICSE-2020-39,Time-travel testing of Android apps.,https://github.com/DroidTest/TimeMachine,True,i,t
ICSE-2020-40,HeteroRefactor: refactoring for heterogeneous computing with FPGA.,https://github.com/heterorefactor/heterorefactor,True,i,t
ICSE-2020-41,HARP: holistic analysis for refactoring Python-based analytics programs.,,,,
ICSE-2020-42,CC2Vec: distributed representations of code changes.,https://github.com/CC2Vec/CC2Vec,True,c,t
ICSE-2020-43,Empirical review of automated analysis tools on 47, 587 Ethereum smart contracts.,https://github.com/smartbugs/smartbugs,True,o,r
ICSE-2020-44,Gap between theory and practice: an empirical study of security patches in solidity.,https://github.com/sjmini/icse2020-Solidity,True,i,f
ICSE-2020-45,An investigation of cross-project learning in online just-in-time software defect prediction.,https://zenodo.org/record/2594681,True,o,t
ICSE-2020-46,Understanding the automated parameter optimization on transfer learning for cross-project defect prediction: an empirical study.,https://github.com/COLA-Laboratory/icse2020/,True,i,f
ICSE-2020-47,Software visualization and deep transfer learning for effective software defect prediction.,https://zenodo.org/record/3373409#.XV0Oy5Mza35,True,a,t
ICSE-2020-48,Software documentation: the practitioners' perspective.,https://github.com/USI-INF-Software/Conf-ReplicationPackage-ICSE2020,True,o,r
ICSE-2020-49,DLFix: context-based code transformation learning for automated program repair.,https://github.com/ICSE-2019-AUTOFIX/ICSE-2019-AUTOFIX,True,i,r
ICSE-2020-50,On the efficiency of test suite based program repair: A Systematic Assessment of 16 Automated Repair Systems for Java Programs.,https://github.com/SerVal-DTF/APR-Efficiency.git,True,o,f
ICSE-2020-51,Caspar: extracting and synthesizing user stories of problems from app reviews.,hguo5.github.io/Caspar,True,o,f
ICSE-2020-52,Detection of hidden feature requests from massive chat messages via deep siamese network.,https://github.com/FRMiner/FRMiner,True,i,f
ICSE-2020-53,A tale from the trenches: cognitive biases and software development.,https://epiclab.github.io/ICSE20-CogBias/,True,o,f
ICSE-2020-54,Recognizing developers' emotions while programming.,https://figshare.com/articles/_/9206474,True,i,f
ICSE-2020-55,Neurological divide: an fMRI study of prose and code writing.,https://web.eecs.umich.edu/~weimerw/fmri.html,True,i,f
ICSE-2020-56,Here we go again: why is it difficult for developers to learn another programming language?,https://go.ncsu.edu/cross-lang-study,False,o,f
ICSE-2020-57,Importance-driven deep learning system testing.,https://deepimportance.github.io/;https://github.com/DeepImportance/deepimportance_code_release,True,i,t
ICSE-2020-58,ReluDiff: differential verification of deep neural networks.,,,,
ICSE-2020-59,Dissector: input validation for deep learning applications by crossing-layer dissection.,,,,
ICSE-2020-60,Towards characterizing adversarial defects of deep learning software from the lens of uncertainty.,,,,
ICSE-2020-61,Gang of eight: a defect taxonomy for infrastructure as code scripts.,https://figshare.com/s/b2633bd4b1929267a451,False,o,r
ICSE-2020-62,MemLock: memory usage guided fuzzing.,https://icse2020-memlock.github.io/,True,o,r
ICSE-2020-63,sFuzz: an efficient adaptive fuzzer for solidity smart contracts.,https://sfuzz.github.io/,True,o,t
ICSE-2020-64,Targeted greybox fuzzing with static lookahead analysis.,https://github.com/Practical-Formal-Methods/bran,True,o,f
ICSE-2020-65,Planning for untangling: predicting the difficulty of merge conflicts.,,,,
ICSE-2020-66,Conquering the extensional scalability problem for value-flow analysis frameworks.,,,,
ICSE-2020-67,Tailoring programs for static analysis via program transformation.,https://doi.org/10.5281/zenodo.3629098,True,o,f
ICSE-2020-68,Pipelining bottom-up data flow analysis.,,,,
ICSE-2020-69,A novel approach to tracing safety requirements and state-based design models.,,,,
ICSE-2020-70,Establishing multilevel test-to-code traceability links.,https://github.com/RRGWhite/icse20-main-1069-data,True,i,f
ICSE-2020-71,Improving the effectiveness of traceability link recovery using hierarchical bayesian networks.,https://semeru-code-public.gitlab.io/Project-Websites/comet-website,True,i,r
ICSE-2020-72,How Android developers handle evolution-induced API compatibility issues: a large-scale study.,,,,
ICSE-2020-73,An empirical study on API parameter rules.,https://github.com/drzhonghao/parameterstudy,True,o,t
ICSE-2020-74,When APIs are intentionally bypassed: an exploratory study of API workarounds.,https://github.com/senseconcordia/API-Workarounds,True,o,f
ICSE-2020-75,Demystify official API usage directives with crowdsourced API misuse scenarios, erroneous code examples and patches.,https://github.com/goodchar/public-package-about-Official-API-Usage-Directives-Demysitification-Report,True,o,h
ICSE-2020-76,Simulee: detecting CUDA synchronization bugs via memory-access modeling.,,,,
ICSE-2020-77,White-box fairness testing through adversarial sampling.,https://github.com/pxzhang94/ADF,True,i,f
ICSE-2020-78,Structure-invariant testing for machine translation.,,,,
ICSE-2020-79,Automatic testing and improvement of machine translation.,https://github.com/zysszy/TransRepair,True,o,r
ICSE-2020-80,TRADER: trace divergence analysis and embedding regulation for debugging recurrent neural networks.,https://github.com/trader-rnn/TRADER,True,o,r
ICSE-2020-81,Typestate-guided fuzzer for discovering use-after-free vulnerabilities.,,,,
ICSE-2020-82,JVM fuzzing for JIT-induced side-channel detection.,,,,
ICSE-2020-83,Ankou: guiding grey-box fuzzing towards combinatorial difference.,https://github.com/SoftSec-KAIST/Ankou,True,i,t
ICSE-2020-84,BCFA: bespoke control flow analysis for CFA at scale.,,,,
ICSE-2020-85,On the recall of static call graph construction in practice.,,,,
ICSE-2020-86,Heaps'n leaks: how heap snapshots improve Android taint analysis.,https://bit.ly/38F5tUH,True,c,t
ICSE-2020-87,Big code != big vocabulary: open-vocabulary models for source code.,https://github.com/giganticode/codeprep,True,c,t
ICSE-2020-88,Improving data scientist efficiency with provenance.,https://doi.org/10.5281/zenodo.3628097,True,o,r
ICSE-2020-89,Managing data constraints in database-backed web applications.,https://hyperloop-rails.github.io/vibranium/,True,i,r
ICSE-2020-90,Taxonomy of real faults in deep learning systems.,https://github.com/dlfaults/dl_faults,True,o,r
ICSE-2020-91,Testing DNN image classifiers for confusion & bias errors.,https://github.com/ARiSE-Lab/DeepInspect,True,i,t
ICSE-2020-92,Repairing deep neural networks: fix patterns and challenges.,,,,
ICSE-2020-93,Fuzz testing based data augmentation to improve robustness of deep neural networks.,https://sensei-2020.github.io,True,o,f
ICSE-2020-94,An empirical study on program failures of deep learning jobs.,,,,
ICSE-2020-95,Primers or reminders?: the effects of existing review comments on code review.,,,,
ICSE-2020-96,Mitigating turnover with code review recommendation: balancing expertise, workload, and knowledge distribution.,https://github.com/cesel/relationalgit,True,i,r
ICSE-2020-97,How do companies collaborate in open source ecosystems?: an empirical study of OpenStack.,,,,
ICSE-2020-98,How to not get rich: an empirical study of donations in open source.,https://github.com/CMUSTRUDEL/oss-donations,True,o,s
ICSE-2020-99,Scaling open source communities: an empirical study of the Linux kernel.,https://archive.softwareheritage.org/swh:1:dir:33d1a7540c8dc449b90d4771f6dd52ba45e26879/,True,c,t
ICSE-2020-100,SpecuSym: speculative symbolic execution for cache timing leak detection.,,,,
ICSE-2020-101,Symbolic verification of message passing interface programs.,https://mpi-sv.github.io;https://github.com/mpi-sv/mpi-sv-src,True,a,f
ICSE-2020-102,Efficient generation of error-inducing floating-point inputs via symbolic execution.,https://github.com/ucd-plse/FPGen,True,o,f
ICSE-2020-103,HyDiff: hybrid differential software analysis.,https://doi.org/10.5281/zenodo.3627893,True,o,t
ICSE-2020-104,Seenomaly: vision-based linting of GUI animation effects against design-don't guidelines.,https://github.com/DehaiZhao/Seenomaly,True,i,f
ICSE-2020-105,Low-overhead deadlock prediction.,,,,
ICSE-2020-106,An empirical assessment of security risks of global Android banking apps.,,,,
ICSE-2020-107,Accessibility issues in Android apps: state of affairs, sentiments, and ways forward.,https://github.com/Abdulaziz89/accessibility_eval/,True,c,r
ASE-2017-90,Visualization support for requirements monitoring in systems of systems.,https://youtu.be/iv7kWzeNkdk,True,a,t
ASE-2017-92,TREM: a tool for mining timed regular specifications from system traces.,youtu.be/cSd_aj3_LH8,True,a,t
ASE-2017-93,ModelWriter: text and model-synchronized document engineering platform.,https://itea3.org/project/modelwriter.html,True,a,t
ASE-2017-94,Incrementally slicing editable submodels.,http://pi.informatik.uni-siegen.de/projects/SiLift/ase2017,True,a,t
ASE-2017-95,DSSynth: an automated digital controller synthesis tool for physical plants.,https://youtu.be/ hLQslRcee8,True,a,t
ASE-2017-96,A static analysis tool with optimizations for reachability determination.,https://www.youtube.com/watch?v=5c3ARhFclHA&t=2s,True,a,t
ASE-2017-97,CogniCrypt: supporting developers in using cryptography.,youtube.com/watch?v=JUq5mRHfAWY,True,a,t
ASE-2017-98,BProVe: tool support for business process verification.,https://youtu.be/iF5OM7vKtDA,True,a,t
ASE-2017-99,taco: a tool to generate tensor algebra kernels.,tensor-compiler.org/ase2017,False,a,t
ASE-2018-27,SEEDE: simultaneous execution and editing in a development environment.,https://github.com/StevenReiss/seed;https://www.youtube.com/watch?v=GpibSxX3Wlw,True,c,t
ASE-2018-73,Continuous code quality: are we (really) doing that?,http://doi.org/10.5281/zenodo.1341015,True,a,t
ASE-2018-74,RUDSEA: recommending updates of Dockerfiles via software environment analysis.,https://sites.google.com/site/rudseaproject/,False,o,f
ASE-2018-75,Delta debugging microservice systems.,,,,
ASE-2018-76,Personalized teammate recommendation for crowdsourced software developers.,https://github.com/yeluting/KaggleDataset,True,o,f
ASE-2018-77,S-gram: towards semantic-aware security auditing for Ethereum smart contracts.,https://github.com/njaliu/sgram-artifact,True,o,t
ASE-2018-78,An evolutionary approach for analyzing Alloy specifications.,https://sites.google.com/site/evoalloy2018/,True,o,f
ASE-2018-79,A neural framework for retrieval and summarization of source code.,,,,
ASE-2018-80,An empirical investigation into learning bug-fixing patches in the wild via neural machine translation.,https://sites.google.com/view/learning-fixes,True,i,f
ASE-2018-81,Loop path reduction by state pruning.,,,,
ASE-2018-82,node2defect: using network embedding to improve software defect prediction.,,,,
ASE-2018-83,Towards automating disambiguation of regulations: using the wisdom of crowds.,,,,
ICSE-2021-0,Playing Planning Poker in Crowds: Human Computation of Software Effort Estimates.,https://issues.apache.org/jira/browse,True,i,f
ICSE-2021-1,JEST: N+1 -version Differential Testing of Both JavaScript Engines and Specification.,,,,
ICSE-2021-2,Unrealizable Cores for Reactive Systems Specifications.,http://smlab.cs.tau.ac.il/syntech/unrealcores/,True,o,r
ICSE-2021-3,Verifying Determinism in Sequential Programs.,https://github.com/t-rasmud/checker-framework/tree/nondet-checker,True,o,t
ICSE-2021-4,Domain-Specific Fixes for Flaky Tests with Wrong Assumptions on Underdetermined Specifications.,,,,
ICSE-2021-5,Studying Test Annotation Maintenance in the Wild.,https://github.com/SPEAR-SE/TestAnnotationMaintenance_Data,True,o,f
ICSE-2021-6,Semantic Patches for Adaptation of JavaScript Programs to Evolving Libraries.,,,,
ICSE-2021-7,DepOwl: Detecting Dependency Bugs to Prevent Compatibility Failures.,https://github.com/ZhouyangJia/DepOwl,True,o,f
ICSE-2021-8,HERO: On the Chaos When PATH Meets Modules.,http://www.hero-go.com/,True,i,f
ICSE-2021-9,SOAR: A Synthesis Approach for Data Science API Refactoring.,,,,
ICSE-2021-10,Are Machine Learning Cloud APIs Used Correctly?,,,,
ICSE-2021-11,Siri, Write the Next Method.,,,,
ICSE-2021-12,Code Prediction by Feeding Trees to Transformers.,https://github.com/facebookresearch/code-prediction-transformer,True,o,t
ICSE-2021-13,Towards Automating Code Review Activities.,https://github.com/RosaliaTufano/code_review,True,o,s
ICSE-2021-14,Resource-Guided Configuration Space Reduction for Deep Learning Models.,,,,
ICSE-2021-15,An Evolutionary Study of Configuration Design and Implementation in Cloud Systems.,https://github.com/xlab-uiuc/open-cevo,True,i,t
ICSE-2021-16,AutoCCAG: An Automated Approach to Constrained Covering Array Generation.,https://github.com/chuanluocs/AutoCCAG,True,o,f
ICSE-2021-17,What helped, and what did not? An Evaluation of the Strategies to Improve Continuous Integration.,,,,
ICSE-2021-18,Distribution-Aware Testing of Neural Networks Using Generative Models.,https://github.com/swa112003/DistributionAwareDNNTesting,True,o,t
ICSE-2021-19,An Empirical Study of Refactorings and Technical Debt in Machine Learning Systems.,,,,
ICSE-2021-20,DeepLocalize: Fault Localization for Deep Neural Networks.,,,,
ICSE-2021-21,DeepPayload: Black-box Backdoor Attack on Deep Learning Models through Neural Payload Injection.,,,,
ICSE-2021-22,Reducing DNN Properties to Enable Falsification with Adversarial Attacks.,https://github.com/dlshriver/DNNF,True,o,f
ICSE-2021-23,Graph-based Fuzz Testing for Deep Learning Inference Engines.,https://github.com/gbftdlie/Graph-based-fuzz-testing,True,i,t
ICSE-2021-24,RobOT: Robustness-Oriented Testing for Deep Learning Systems.,https://github.com/SmallkeyChen/RobOT,True,i,r
ICSE-2021-25,Scalable Quantitative Verification For Deep Neural Networks.,teobaluta.github.io/provero,False,a,f
ICSE-2021-26,Traceability Transformed: Generating more Accurate Links with Pre-Trained BERT Models.,https://github.com/github/CodeSearchNet,True,o,f
ICSE-2021-27,Studying the Usage of Text-To-Text Transfer Transformer to Support Code-Related Tasks.,https://github.com/antonio-mastropaolo/T5-learning-ICSE_2021,True,c,r
ICSE-2021-28,Operation is the hardest teacher: estimating DNN accuracy looking for mispredictions.,https://github.com/dessertlab/DeepEST,True,o,f
ICSE-2021-29,AUTOTRAINER: An Automatic DNN Training Problem Detection and Repair System.,,,,
ICSE-2021-30,Self-Checking Deep Neural Networks in Deployment.,https://github.com/self-checker/SelfChecker,True,i,f
ICSE-2021-31,Measuring Discrimination to Boost Comparative Testing for Multiple Deep Learning Models.,https://github.com/Testing-Multiple-DL-Models/SDS,True,o,s
ICSE-2021-32,Prioritizing Test Inputs for Deep Neural Networks via Mutation Analysis.,https://github.com/sail-repos/PRIMA,True,o,t
ICSE-2021-33,Testing Machine Translation via Referential Transparency.,,,,
ICSE-2021-34,Automatic Web Testing Using Curiosity-Driven Reinforcement Learning.,,,,
ICSE-2021-35,Evaluating SZZ Implementations Through a Developer-informed Oracle.,,,,
ICSE-2021-36,Early Life Cycle Software Defect Prediction. Why? How?,https://doi.org/10.5281/zenodo.4459561,True,i,f
ICSE-2021-37,IoT Bugs and Development Challenges.,,,,
ICSE-2021-38,How Developers Optimize Virtual Reality Applications: A Study of Optimization Commits in Open Source Unity Projects.,http://sites.google.com/view/vroptstudy2020/,True,i,f
ICSE-2021-39,"Do this! Do that!, And nothing will happen" Do specifications lead to securely stored passwords?,,,,
ICSE-2021-40,Why Don't Developers Detect Improper Input Validation? '; DROP TABLE Papers; -.,https://doi.org/10.5281/zenodo.3996696,True,a,t
ICSE-2021-41,The Mind Is a Powerful Place: How Showing Code Comprehensibility Metrics Influences Code Understanding.,,,,
ICSE-2021-42,Program Comprehension and Code Complexity Metrics: An fMRI Study.,https://github.com/brains-on-code/fMRI-complexity-metrics-icse2021/,True,i,f
ICSE-2021-43,Do you really code? Designing and Evaluating Screening Questions for Online Surveys with Programmers.,,,,
ICSE-2021-44,How Gamification Affects Software Developers: Cautionary Evidence from a Natural Experiment on GitHub.,https://github.com/lukasmoldon/GHStreaksThesis,True,o,t
ICSE-2021-45,IdBench: Evaluating Semantic Representations of Identifier Names in Source Code.,https://github.com/sola-st/IdBench,True,o,f
ICSE-2021-46,A Context-based Automated Approach for Method Name Consistency Checking and Suggestion.,,,,
ICSE-2021-47,On the Naming of Methods: A Survey of Professional Developers.,https://github.com/KSU-SDML/Method-Naming-Standards-Artifact,True,c,t
ICSE-2021-48,Relating Reading, Visualization, and Coding for New Programmers: A Neuroimaging Study.,https://github.com/CelloCorgi/ICSE_fNIRS2021,True,o,f
ICSE-2021-49,A Case Study of Onboarding in Software Teams: Tasks and Strategies.,https://zenodo.org/record/4455937#.YCOQCs_0lFd.,True,a,t
ICSE-2021-50,"How Was Your Weekend?" Software Development Teams Working From Home During COVID-19.,,,,
ICSE-2021-51,FLACK: Counterexample-Guided Fault Localization for Alloy Models.,,,,
ICSE-2021-52,Improving Fault Localization by Integrating Value and Predicate Based Causal Inference Techniques.,,,,
ICSE-2021-53,Fault Localization with Code Coverage Representation Learning.,,,,
ICSE-2021-54,An Empirical Study on Deployment Faults of Deep Learning Based Mobile Applications.,,,,
ICSE-2021-55,Extracting Concise Bug-Fixing Patches from Human-Written Patches in Version Control Systems.,,,,
FSE-2017-76,When program analysis meets mobile security: an industrial study of misusing Android internet sockets.,,,,
ICSE-2021-57,Fuzzing Symbolic Expressions.,https://season-lab.github.io/fuzzolic/,True,i,t
ICSE-2021-58,Growing A Test Corpus with Bonsai Fuzzing.,https://github.com/vasumv/bonsai-fuzzing,True,i,t
ICSE-2021-59,We'll Fix It in Post: What Do Bug Fixes in Video Game Update Notes Tell Us?,https://github.com/truelova/ICSE_2021_UpdateNotes,True,i,r
ICSE-2021-60,GUIGAN: Learning to Generate GUI Designs Using Generative Adversarial Networks.,https://github.com/GUIDesignResearch/GUIGAN,True,o,f
ICSE-2021-61,Don't Do That! Hunting Down Visual Design Smells in Complex UIs against Design Guidelines.,,,,
ICSE-2021-62,Same File, Different Changes: The Potential of Meta-Maintenance on GitHub.,https://github.com/NAIST-SE/MetaMaintenancePotential,True,o,s
ICSE-2021-63,Can Program Synthesis be Used to Learn Merge Conflict Resolutions? An Empirical Analysis.,,,,
ICSE-2021-64,Abacus: Precise Side-Channel Analysis.,https://github.com/s3team/Abacus,True,o,s
ICSE-2021-65,Data-Driven Synthesis of Provably Sound Side Channel Analyses.,,,,
ICSE-2021-66,IMGDroid: Detecting Image Loading Defects in Android Applications.,https://github.com/wsong-nj/IMGDroid,True,i,f
ICSE-2021-67,Fast Parametric Model Checking through Model Fragmentation.,https://github.com/xinwei2124/fPMC_ICSE,True,o,t
ICSE-2021-68,Trace-Checking CPS Properties: Bridging the Cyber-Physical Gap.,https://github.com/SNTSVV/ThEodorE,True,o,s
ICSE-2021-69,Centris: A Precise and Scalable Approach for Identifying Modified Open-Source Software Reuse.,https://github.com/wooseunghoon/Centris-public,True,o,s
ICSE-2021-70,Interpretation-enabled Software Reuse Detection Based on a Multi-Level Birthmark Model.,https://github.com/ISRD2020/ISRD,True,i,r
ICSE-2021-71,Fast Outage Analysis of Large-scale Production Clouds with Service Correlation Mining.,,,,
ICSE-2021-72,MuDelta: Delta-Oriented Mutation Testing at Commit Time.,https://rml464.github.io/mutantlearning/,True,i,f
ICSE-2021-73,Does mutation testing improve testing practices?,,,,
ICSE-2021-74,Identifying Key Features from App User Reviews.,https://github.com/GIST-NJU/KEFE,True,o,t
ICSE-2021-75,CHAMP: Characterizing Undesired App Behaviors from User Comments based on Market Policies.,https://github.com/UBCFinder/UBCFinder,True,i,r
ICSE-2021-76,Prioritize Crowdsourced Test Reports via Deep Screenshot Understanding.,https://sites.google.com/view/deepprior,True,i,f
ICSE-2021-77,It Takes Two to TANGO: Combining Visual and Textual Information for Detecting Duplicate Video-Based Bug Reports.,https://github.com/ncoop57/tango,True,i,r
ICSE-2021-78,Automatically Matching Bug Reports With Related App Reviews.,https://mast.informatik.uni-hamburg.de/replication-packages/,True,i,f
ICSE-2021-79,What Makes a Great Maintainer of Open Source Projects?,,,,
ICSE-2021-80,Representation of Developer Expertise in Open Source Software.,https://doi.org/10.5281/zenodo.4457108,True,i,r
ICSE-2021-81,Extracting Rationale for Open Source Software Development Decisions - A Study of Python Email Archives.,,,,
ICSE-2021-82,Leaving My Fingerprints: Motivations and Challenges of Contributing to OSS for Social Good.,https://doi.org/10.5281/zenodo.4536791,True,o,r
ICSE-2021-83,Onboarding vs. Diversity, Productivity, and Quality - Empirical Study of the OpenStack Ecosystem.,http://doi.org/10.5281/zenodo.4457683,True,o,r
ICSE-2021-84,The Shifting Sands of Motivation: Revisiting What Drives Contributors in Open Source.,https://doi.org/10.5281/zenodo.4453904,True,o,f
ICSE-2021-85,White-Box Performance-Influence Models: A Profiling and Learning Approach.,https://git.io/JtnTa,True,i,f
ICSE-2021-86,White-Box Analysis over Machine Learning: Modeling Performance of Configurable Systems.,https://bit.ly/3bbbgG8;https://github.com/miguelvelezmj25/icse21-sm,True,i,r
ICSE-2021-87,An Empirical Assessment of Global COVID-19 Contact Tracing Applications.,https://covid-guardian.github.io/index.html,True,i,f
ICSE-2021-88,Sustainable Solving: Reducing The Memory Footprint of IFDS-Based Data Flow Analyses Using Intelligent Garbage Collection.,,,,
ICSE-2021-89,Synthesizing Object State Transformers for Dynamic Software Updates.,,,,
ICSE-2021-90,Fast and Precise On-the-fly Patch Validation for All.,https://github.com/lingming/UniAPR;https://github.com/lingming/UniAPR,True,i,r
ICSE-2021-91,Bounded Exhaustive Search of Alloy Specification Repairs.,https://sites.google.com/view/beafixevaluation,True,o,s
ICSE-2021-92,Shipwright: A Human-in-the-Loop System for Dockerfile Repair.,https://github.com/STAR-RG/shipwright,True,i,t
ICSE-2021-93,CURE: Code-Aware Neural Machine Translation for Automatic Program Repair.,https://github.com/lin-tan/CURE,True,i,f
ICSE-2021-94,A Differential Testing Approach for Evaluating Abstract Syntax Tree Mapping Algorithms.,http://doi.org/10.5281/zenodo.4281091,True,i,r
ICSE-2021-95,InferCode: Self-Supervised Learning of Code Representations by Predicting Subtrees.,https://github.com/bdqnghi/infercode,True,a,t
ICSE-2021-96,Efficient Compiler Autotuning via Bayesian Optimization.,https://github.com/BOCA313/BOCA,True,o,t
ICSE-2021-97,TRANSREGEX: Multi-modal Regular Expression Synthesis by Generate-and-Repair.,,,,
ICSE-2021-98,EvoSpex: An Evolutionary Algorithm for Learning Postconditions.,https://sites.google.com/view/evospex,True,o,r
ICSE-2021-99,Interface Compliance of Inline Assembly: Automatically Check, Patch and Refine.,https://binsec.github.io/nutshells/icse-21.html,True,i,r
ICSE-2021-100,Enabling Software Resilience in GPGPU Applications via Partial Thread Protection.,,,,
ICSE-2021-101,Automatic Extraction of Opinion-based Q&A from Online Developer Chats.,https://tinyurl.com/y3qth6s3,True,i,f
ICSE-2021-102,Automated Query Reformulation for Efficient Search based on Query Logs From Stack Overflow.,https://github.com/kbcao/sequer,True,i,f
ICSE-2021-103,Automatic Solution Summarization for Crash Bugs.,http://tiny.cc/qzhqsz,False,c,t
ICSE-2021-104,Supporting Quality Assurance with Automated Process-Centric Quality Constraints Checking.,https://figshare.com/articles/dataset/Supporting_Online_Material_for_ICSE2021/12840053/1,True,o,s
ICSE-2021-105,Understanding Bounding Functions in Safety-Critical UAV Software.,https://github.com/SUNY-BU-Software-Systems-Research-Group/PaparazziBF,True,c,f
ICSE-2021-106,Enhancing Genetic Improvement of Software with Regression Test Selection.,https://doi.org/10.5522/04/12890792;https://rdr.ucl.ac.uk/articles/dataset/Replication_Package_for_Enhancing_Genetic_Improvement_of_Software_with_Regression_Test_Selection_/12890792,True,o,s
ICSE-2021-107,Containing Malicious Package Updates in npm with a Lightweight Permission System.,https://github.com/gabrielcsf/malicious-updates-icse2021,True,i,t
ICSE-2021-108,Too Quiet in the Library: An Empirical Study of Security Updates in Android Apps' Native Code.,https://github.com/salmanee/Librarian,True,i,r
ICSE-2021-109,If It's Not Secure, It Should Not Compile: Preventing DOM-Based XSS in Large-Scale Web Development with API Hardening.,https://github.com/google/tsec,True,o,s
ICSE-2021-110,Why Security Defects Go Unnoticed during Code Reviews? A Case-Control Study of the Chromium OS Project.,https://zenodo.org/record/4539891,True,i,t
ICSE-2021-111,Technical Leverage in a Software Ecosystem: Development Opportunities and Security Risks.,https://techleverage.eu/,True,a,t
ICSE-2021-112,RAICC: Revealing Atypical Inter-Component Communication in Android Apps.,https://github.com/Trustworthy-Software/RAICC,True,o,f
ICSE-2021-113,Smart Contract Security: a Practitioners' Perspective.,http://doi.org/10.5281/zenodo.4005112,True,i,f
ICSE-2021-114,AID: An automated detector for gender-inclusivity bugs in OSS project pages.,https://doi.org/10.5281/zenodo.4007579,True,o,r
ICSE-2021-115,"Ignorance and Prejudice" in Software Fairness.,https://doi.org/10.6084/m9.figshare.12887249.v1,True,o,r
ICSE-2021-116,Semi-supervised Log-based Anomaly Detection via Probabilistic Label Estimation.,https://github.com/YangLin-George/PLELog,True,o,f
ICSE-2021-117,DeepLV: Suggesting Log Levels Using Ordinal Based Neural Networks.,https://github.com/SPEAR-SE/ICSE2021_Log_Level_Data,True,i,f
ICSE-2021-118,How to Identify Boundary Conditions with Contrasty Metric?,,,,
ICSE-2021-119,Using Domain-specific Corpora for Improved Handling of Ambiguity in Requirements.,https://github.com/SNTSVV/MAANA,True,i,t
ICSE-2021-120,On Indirectly Dependent Documentation in the Context of Code Evolution: A Study.,https://github.com/pag-iiitd/DocDependency,True,o,f
ICSE-2021-121,CodeShovel: Constructing Method-Level Source Code Histories.,https://github.com/ataraxie/codeshovel/tree/master/misc,True,o,f
ICSE-2021-122,Evaluating Unit Testing Practices in R Packages.,https://tinyurl.com/y9ymuv8j,False,o,f
ICSE-2021-123,Data-Oriented Differential Testing of Object-Relational Mapping Systems.,https://github.com/theosotr/cynthia,True,i,t
ICSE-2021-124,Automatic Unit Test Generation for Machine Learning Libraries: How Far Are We?,,,,
ICSE-2021-125,Layout and Image Recognition Driving Cross-Platform Automated Mobile Testing.,https://sites.google.com/view/lit2020,True,i,t
ICSE-2021-126,FlakeFlagger: Predicting Flakiness Without Rerunning Tests.,https://github.com/AlshammariA/FlakeFlagger,True,i,r
ICSE-2021-127,An Empirical Analysis of UI-based Flaky Tests.,https://ui-flaky-test.github.io/,True,c,t
ICSE-2021-128,GenTree: Using Decision Trees to Learn Interactions for Configurable Software.,https://github.com/dynaroars/gentree,True,o,s
ICSE-2021-129,Semantic Web Accessibility Testing via Hierarchical Visual Analysis.,https://github.com/msbajammal/icse2021,True,o,r
ICSE-2021-130,Restoring Execution Environments of Jupyter Notebooks.,https://github.com/SMAT-Lab/SnifferDog,True,c,t
ICSE-2021-131,PyART: Python API Recommendation in Real-Time.,https://github.com/PYART0/PyART,True,i,f
ICSE-2021-132,PyCG: Practical Call Graph Generation in Python.,https://github.com/vitsalis/pycg,True,i,t
ICSE-2021-133,Seamless Variability Management With the Virtual Platform.,https://bitbucket.org/easelab/2021-icse-vponlineappendix,True,i,r
ICSE-2021-134,Fine with "1234"? An Analysis of SMS One-Time Password Randomness in Android Apps.,,,,
ICSE-2021-135,App's Auto-Login Function Security Testing via Android OS-Level Virtualization.,https://github.com/VPDroid/Dev,True,i,t
ICSE-2021-136,ATVHUNTER: Reliable Version Detection of Third-Party Libraries for Vulnerability Identification in Android Applications.,,,,
ICSE-2021-137,JUSTGen: Effective Test Generation for Unspecified JNI Behaviors on JVMs.,https://github.com/sjmini/justgen,True,i,f
FSE-2017-77,File-level vs. module-level regression test selection for .NET.,https://github.com/marko-vasic/ekstaziSharp,True,i,t
FSE-2017-78,Record and replay for Android: are we there yet in industrial cases?,,,,
ICSE-2022-4,SPT-Code: Sequence-to-Sequence Pre-Training for Learning Source Code Representations.,https://github.com/NougatCA/SPT-Code,True,c,t
ICSE-2022-5,A Grounded Theory Based Approach to Characterize Software Attack Surfaces.,,,,
ICSE-2022-6,A Grounded Theory of Coordination in Remote-First and Hybrid Software Teams.,https://figshare.com/account/home#/projects/132197,True,o,s
ICSE-2022-7,A Scalable t-wise Coverage Estimator.,https://github.com/meelgroup/approxcov,True,i,f
ICSE-2022-8,A Universal Data Augmentation Approach for Fault Localization.,https://github.com/ICSE2022FL/ICSE2022FLCode,True,o,f
ICSE-2022-9,Adaptive Performance Anomaly Detection for Online Service Systems via Pattern Sketching.,https://github.com/OpsPAI/ADSketch,True,i,f
ICSE-2022-10,Adaptive Test Selection for Deep Neural Networks.,https://github.com/SATE-Lab/ATS,True,i,f
ICSE-2022-11,An Exploratory Study of Deep learning Supply Chain.,https://github.com/SunflowerPKU/ICSE22_SC_Data,True,i,t
ICSE-2022-12,An Exploratory Study of Productivity Perceptions in Software Teams.,,,,
ICSE-2022-13,Analyzing User Perspectives on Mobile App Privacy at Scale.,,,,
ICSE-2022-14,APER: Evolution-Aware Runtime Permission Misuse Detection for Android Apps.,https://aper-project.github.io/,True,i,t
ICSE-2022-15,ARCLIN: Automated API Mention Resolution for Unformatted Texts.,https://github.com/YintongHuo/ARCLIN,True,i,f
ICSE-2022-16,AST-Trans: Code Summarization with Efficient Tree-Structured Attention.,https://github.com/zetang94/ICSE2022_AST_Trans.git,True,a,f
ICSE-2022-17,Automated Assertion Generation via Information Retrieval and Its Integration with Deep learning.,https://github.com/yh1105/Artifact-of-Assertion-ICSE22,True,o,r
ICSE-2022-18,Automated Detection of Password Leakage from Public GitHub Repositories.,,,,
ICSE-2022-19,Automated Handling of Anaphoric Ambiguity in Requirements: A Multi-solution Study.,,,,
ICSE-2022-20,Automated Patching for Unreproducible Builds.,https://rezilla.bitbucket.io/repfix,True,i,t
ICSE-2022-21,Automated Testing of Software that Uses Machine Learning APIs.,https://alert.cs.uchicago.edu/#release,True,o,r
ICSE-2022-22,Automatic Detection of Performance Bugs in Database Systems using Equivalent Queries.,https://bit.ly/3I995jL,True,i,r
ICSE-2022-23,AutoTransform: Automated Code Transformation to Support Modern Code Review Process.,https://github.com/awsm-research/AutoTransform-Replication,True,i,r
ICSE-2022-24,BEDIVFUZZ: Integrating Behavioral Diversity into Generator-based Fuzzing.,https://github.com/hub-se/BeDivFuzz,True,i,t
ICSE-2022-25,Big Data = Big Insights? Operationalising Brooks' Law in a Massive GitHub Data Set.,https://doi.org/10.5281/zenodo.5294964,True,o,f
ICSE-2022-26,Bots for Pull Requests: The Good, the Bad, and the Promising.,https://zenodo.org/record/5428540,True,o,f
ICSE-2022-27,Bridging Pre-trained Models and Downstream Tasks for Source Code Understanding.,https://github.com/wangdeze18/DACL,True,i,t
ICSE-2022-28,BugListener: Identifying and Synthesizing Bug Reports from Collaborative Live Chats.,https://github.com/BugListener/BugListener2022/,True,i,r
ICSE-2022-29,Buildsheriff: Change-Aware Test Failure Triage for Continuous Integration Builds.,https://buildsheriff.github.io/,True,o,r
ICSE-2022-30,Causality in Configurable Software Systems.,https://github.com/dubslaff/FeatCause,True,i,r
ICSE-2022-31,Causality-Based Neural Network Repair.,,,,
ICSE-2022-32,Change Is the Only Constant: Dynamic Updates for Workflows.,https://doi.org/10.5281/zenodo.5864684,True,i,r
ICSE-2022-33,Characterizing and Detecting Bugs in WeChat Mini-Programs.,https://github.com/tao2years/WeBug,True,i,t
ICSE-2022-34,CLEAR: Contrastive Learning for API Recommendation.,https://github.com/Moshiii/CLEAR-replication,True,i,f
ICSE-2022-35,Code Search based on Context-aware Code Translation.,https://github.com/wssun/TranCS,True,i,r
ICSE-2022-36,CodeFill: Multi-token Code Completion by Jointly learning from Structure and Naming Sequences.,https://github.com/saltudelft/codefill,True,i,f
ICSE-2022-37,Collaboration Challenges in Building ML-Enabled Systems: Communication, Documentation, Engineering, and Process.,,,,
ICSE-2022-38,Combinatorial Testing of RESTful APIs.,https://github.com/GIST-NJU/RestCT,True,i,f
ICSE-2022-39,CONFETTI: Amplifying Concolic Guidance for Fuzzers.,https://github.com/neu-se/CONFETTI,True,o,r
ICSE-2022-40,Conflict-aware Inference of Python Compatible Runtime Environments with Domain Knowledge Graph.,https://github.com/nju-websoft/PyCRE,True,i,t
ICSE-2022-41,Control Parameters Considered Harmful: Detecting Range Specification Bugs in Drone Configuration Modules via Learning-Guided Search.,https://github.com/BlackJocker1995/uavga/tree/main,True,i,t
ICSE-2022-42,Controlled Concurrency Testing via Periodical Scheduling.,https://sites.google.com/view/period-cct/,True,o,f
ICSE-2022-43,Cross-Domain Deep Code Search with Meta Learning.,https://github.com/microsoft/CodeBERT,True,o,f
ICSE-2022-44,Data-Driven Loop Bound Learning for Termination Analysis.,https://doi.org/10.5281/zenodo.5442280,True,o,f
ICSE-2022-45,DEAR: A Novel Deep Learning-based Approach for Automated Program Repair.,https://github.com/AutomatedProgramRepair-2021/dear-auto-fix,True,i,r
ICSE-2022-46,Decomposing Convolutional Neural Networks into Reusable and Replaceable Modules.,,,,
ICSE-2022-47,Decomposing Software Verification into Off-the-Shelf Components: An Application to CEGAR.,https://doi.org/10.5281/zenodo.5301636,True,o,s
ICSE-2022-48,DeepAnalyze: Learning to Localize Crashes at Scale.,,,,
ICSE-2022-49,DeepDiagnosis: Automatically Diagnosing Faults and Recommending Actionable Fixes in Deep Learning Programs.,https://github.com/DeepDiagnosis/ICSE2022,True,i,r
ICSE-2022-50,DeepFD: Automated Fault Diagnosis and Localization for Deep Learning Programs.,https://github.com/ArabelaTso/DeepFD,True,i,r
ICSE-2022-51,DeepStability: A Study of Unstable Numerical Methods and Their Solutions in Deep Learning.,https://deepstability.github.io/,True,i,f
ICSE-2022-52,DeepState: Selecting Test Suites to Enhance the Robustness of Recurrent Neural Networks.,https://github.com/SATE-Lab/DeepState,True,i,f
ICSE-2022-53,DeepSTL - From English Requirements to Signal Temporal Logic.,https://github.com/JieHE-2020/DeepSTL,True,i,f
ICSE-2022-54,DeepTraLog: Trace-Log Combined Microservice Anomaly Detection through Graph-based Deep Learning.,https://fudanselab.github.io/DeepTraLog/;https://github.com/FudanSELab/DeepTraLog,True,o,s
ICSE-2022-55,Default: Mutual Information-based Crash Triage for Massive Crashes.,https://github.com/zxhree/default,True,i,f
ICSE-2022-56,Demystifying Android Non-SDK APls: Measurement and Understanding.,,,,
ICSE-2022-57,Demystifying the Dependency Challenge in Kernel Fuzzing.,https://www.doi.org/10.5281/zenodo.5348989;https://www.doi.org/10.5281/zenodo.5441138,False,o,s
ICSE-2022-58,Demystifying the Vulnerability Propagation and Its Evolution via Dependency Trees in the NPM Ecosystem.,https://sites.google.com/view/npm-vulnerability-study/,True,i,f
ICSE-2022-59,DescribeCtx: Context-Aware Description Synthesis for Sensitive Behaviors in Mobile Apps.,https://github.com/DescribeCTX/DescribeCTX,True,i,r
ICSE-2022-60,Detecting False Alarms from Automatic Static Analysis Tools: How Far are We?,https://github.com/soarsmu/SA_retrospective,True,c,t
ICSE-2022-61,"Did You Miss My Comment or What?" Understanding Toxicity in Open Source Discussions.,,,,
ICSE-2022-62,Difuzer: Uncovering Suspicious Hidden Sensitive Operations in Android Apps.,https://github.com/Trustworthy-Software/Difuzer,True,i,t
ICSE-2022-63,Discovering Repetitive Code Changes in Python ML Systems.,https://mlcodepatterns.github.io/,True,i,r
ICSE-2022-64,Domain-Specific Analysis of Mobile App Reviews Using Keyword-Assisted Topic Models.,,,,
ICSE-2022-65,DrAsync: Identifying and Visualizing Anti-Patterns in Asynchronous JavaScript.,https://doi.org/10.5281/zenodo.5428997;https://doi.org/10.5281/zenodo.5915257,False,o,s
ICSE-2022-66,Dynamic Update for Synthesized GR(1) Controllers.,http://smlab.cs.tau.ac.il/syntech/dupdate/,True,i,r
ICSE-2022-67,EAGLE: Creating Equivalent Graphs to Test Deep Learning Libraries.,https://github.com/lin-tan/eagle,True,i,f
ICSE-2022-68,Efficient Online Testing for DNN-Enabled Systems using Surrogate-Assisted and Many-Objective Optimization.,https://doi.org/10.6084/m9.figshare.16468530,True,o,s
ICSE-2022-69,Eflect: Porting Energy-Aware Applications to Shared Environments.,https://github.com/pl-eflect,True,i,t
ICSE-2022-70,EREBA: Black-box Energy Testing of Adaptive Neural Networks.,,,,
ICSE-2022-71,Evaluating and Improving Neural Program-Smoothing-based Fuzzing.,,,,
ICSE-2022-72,ExAIS: Executable AI Semantics.,https://github.com/rschumi0/ExAIS,True,o,r
ICSE-2022-73,Explanation-Guided Fairness Testing through Genetic Algorithm.,https://github.com/waving7799/ExpGA,True,i,f
ICSE-2022-74,Exploiting Input Sanitization for Regex Denial of Service.,https://doi.org/10.5281/zenodo.5916441,True,o,s
ICSE-2022-75,FADATest: Fast and Adaptive Performance Regression Testing of Dynamic Binary Translation Systems.,https://github.com/fadatestdbt/fadatest.git,True,o,t
ICSE-2022-76,Fairness-aware Configuration of Machine Learning Libraries.,https://github.com/Tizpaz/Parfait-ML,True,i,t
ICSE-2022-77,Fairneuron: Improving Deep Neural Network Fairness with Adversary Games on Selective Neurons.,https://github.com/Antimony5292/FairNeuron,True,i,r
ICSE-2022-78,Fast and Precise Application Code Analysis using a Partial Library.,https://doi.org/10.5281/zenodo.5551128,True,o,r
ICSE-2022-79,Fast Changeset-based Bug Localization with BERT.,https://anonymous.4open.science/r/fbl-bert-D567/README.md,False,o,r
ICSE-2022-80,Fault Localization via Efficient Probabilistic Modeling of Program Semantics.,https://github.com/toledosakasa/SMARTFL,True,c,t
ICSE-2022-81,FIRA: Fine-Grained Graph-Based Code Change Representation for Automated Commit Message Generation.,https://github.com/DJjjjhao/FIRA-ICSE,True,i,t
ICSE-2022-82,FlakiMe: Laboratory-Controlled Test Flakiness Impact Assessment.,https://github.com/serval-uni-lu/flakime,True,o,f
ICSE-2022-83,Free Lunch for Testing: Fuzzing Deep-Learning Libraries from Open Source.,https://github.com/ise-uiuc/FreeFuzz,True,o,r
ICSE-2022-84,Fuzzing Class Specifications.,https://sites.google.com/view/specfuzzer,True,i,r
ICSE-2022-85,Garbage Collection Makes Rust Easier to Use: A Randomized Controlled Trial of the Bronze Garbage Collector.,https://crates.io/crates/bronze_gc,True,o,f
ICSE-2022-86,Generating and Visualizing Trace Link Explanations.,https://trace-exp-study.github.io/pages,True,o,t
ICSE-2022-87,GIFdroid: Automated Replay of Visual Bug Reports for Android Apps.,https://github.com/sidongfeng/gifdroid,True,o,f
ICSE-2022-88,GitHub Sponsors: Exploring a New Way to Contribute to Open Source.,https://github.com/NAIST-SE/GHSponsors,True,o,s
ICSE-2022-89,GraphFuzz: Library API Fuzzing with Lifetime-aware Dataflow Graphs.,https://github.com/ForAllSecure/GraphFuzz,True,o,t
ICSE-2022-90,Green AI: Do Deep Learning Frameworks Have Different Costs?,https://github.com/stefanos1316/ICSE_2022_artifact,True,o,r
ICSE-2022-91,Guidelines for Assessing the Accuracy of Log Message Template Identification Techniques.,https://doi.org/10.6084/m9.figshare.18858332,True,o,r
ICSE-2022-92,Hashing It Out: A Survey of Programmers' Cannabis Usage, Perception, and Motivation.,https://github.com/CelloCorgi/HashingItOut_ICSE2022,True,o,f
ICSE-2022-93,Hiding Critical Program Components via Ambiguous Translation.,,,,
ICSE-2022-94,History-Driven Test Program Synthesis for JVM Testing.,https://github.com/JavaTailor/CFSynthesis,True,o,r
ICSE-2022-95,If a Human Can See It, So Should Your System: Reliability Requirements for Machine Vision Components.,https://carolineeeeeee.github.io/automating_requirements,True,o,f
ICSE-2022-96,Imperative versus Declarative Collection Processing: An RCT on the Understandability of Traditional Loops versus the Stream API in Java.,https://github.com/nilsmehlhorn/loop-stream-rct/releases,True,o,f
ICSE-2022-97,Improving Fault Localization and Program Repair with Deep Semantic Features and Transferred Knowledge.,https://github.com/mxx1219/TRANSFER,True,c,t
ICSE-2022-98,Improving Machine Translation Systems via Isotopic Replacement.,https://github.com/zysszy/CAT,True,i,t
ICSE-2022-99,Inference and Test Generation Using Program Invariants in Chemical Reaction Networks.,https://doi.org/10.5281/zenodo.5915597,True,o,f
ICSE-2022-100,Inferring and Applying Type Changes.,https://typechange.github.io/index.html,False,i,r
ICSE-2022-101,Jigsaw: Large Language Models meet Program Synthesis.,,,,
ICSE-2022-102,JuCify: A Step Towards Android Code Unification for Enhanced Static Analysis.,https://github.com/JordanSamhi/JuCify,True,i,t
ICSE-2022-103,Knowledge-Based Environment Dependency Inference for Python Programs.,https://github.com/PyEGo/PyEGo,True,o,s
ICSE-2022-104,Large-scale Security Measurements on the Android Firmware Ecosystem.,https://github.com/chicharitomu14/AndScanner,True,i,t
ICSE-2022-105,Learning and Programming Challenges of Rust: A Mixed-Methods Study.,https://bit.ly/3uNAe88;https://github.com/system-pclub/rust-programming-challenges,True,i,t
ICSE-2022-106,Learning Probabilistic Models for Static Analysis Alarms.,,,,
ICSE-2022-107,Learning to Recommend Method Names with Global Context.,,,,
ICSE-2022-108,Learning to Reduce False Positives in Analytic Bug Detectors.,,,,
ICSE-2022-109,Less is More: Supporting Developers in Vulnerability Detection during Code Review.,https://doi.org/10.5281/zenodo.6026291,True,a,t
ICSE-2022-110,Lessons from Eight Years of Operational Data from a Continuous Integration Service: An Exploratory Case Study of CircleCI.,https://doi.org/10.6084/m9.figshare.16569630,True,c,f
ICSE-2022-111,Linear-time Temporal Logic guided Greybox Fuzzing.,https://github.com/ltlfuzzer/LTL-Fuzzer,True,i,t
ICSE-2022-112,Log-based Anomaly Detection with Deep Learning: How Far Are We?,https://github.com/LogIntelligence/LogADEmpirical,True,c,t
ICSE-2022-113,Manas: Mining Software Repositories to Assist AutoML.,https://github.com/giangnm58/Manas,True,i,r
ICSE-2022-114,Modeling Review History for Reviewer Recommendation: A Hypergraph Approach.,https://doi.org/10.6084/m9.figshare.19199981.v1,True,o,f
ICSE-2022-115,ModX: Binary Level Partially Imported Third-Party Library Detection via Program Modularization and Semantic Matching.,,,,
ICSE-2022-116,Morest: Model-based RESTful API Testing with Execution Feedback.,https://sites.google.com/view/restful-morest/home,True,i,t
ICSE-2022-117,Muffin: Testing Deep Learning Libraries via Neural Architecture Fuzzing.,https://github.com/library-testing/Muffin,True,o,f
ICSE-2022-118,Multi-Intention-Aware Configuration Selection for Performance Tuning.,https://github.com/TimHe95/SafeTune,True,i,t
ICSE-2022-119,Multilingual training for Software Engineering.,,,,
ICSE-2022-120,MVD: Memory-Related Vulnerability Detection Based on Flow-Sensitive Graph Neural Networks.,https://github.com/MVDetection/MVD,True,o,f
ICSE-2022-121,Nalin: learning from Runtime Behavior to Find Name-Value Inconsistencies in Jupyter Notebooks.,https://github.com/sola-st/Nalin,True,c,t
ICSE-2022-122,Natural Attack for Pre-trained Models of Code.,https://github.com/soarsmu/attack-pretrain-models-of-code,True,c,t
ICSE-2022-123,Nessie: Automatically Testing JavaScript APIs with Asynchronous Callbacks.,https://zenodo.org/record/5874851,True,o,s
ICSE-2022-124,Neural Program Repair with Execution-based Backpropagation.,https://github.com/SophieHYe/RewardRepair,True,i,r
ICSE-2022-125,NeuronFair: Interpretable White-Box Fairness Testing through Biased Neuron Identification.,https://github.com/haibinzheng/NeuronFair,True,a,t
ICSE-2022-126,NPEX: Repairing Java Null Pointer Exceptions without Tests.,https://github.com/kupl/npex,True,i,f
ICSE-2022-127,Nufix: Escape From NuGet Dependency Maze.,http://www.nufix-dependency-maze.com/,True,i,t
ICSE-2022-128,OJXPERF: Featherlight Object Replica Detection for Java Programs.,https://github.com/Xuhpclab/jxperf,True,c,t
ICSE-2022-129,On Debugging the Performance of Configurable Software Systems: Developer Needs and Tailored Tool Support.,https://bit.ly/35HUvl9,True,o,r
ICSE-2022-130,On the Benefits and Limits of Incremental Build of Software Configurations: An Exploratory Study.,https://doi.org/10.5281/zenodo.5915116,True,o,f
ICSE-2022-131,On the Evaluation of Neural Code Summarization.,https://github.com/DeepSoftwareAnalytics/CodeSumEvaluation,True,o,f
ICSE-2022-132,On the Importance of Building High-quality Training Datasets for Neural Code Search.,https://github.com/v587su/NLQF,True,i,t
ICSE-2022-133,On the Reliability of Coverage-Based Fuzzer Benchmarking.,https://github.com/icse22data,True,o,t
ICSE-2022-134,One Fuzzing Strategy to Rule Them All.,,,,
ICSE-2022-135,Online Summarizing Alerts through Semantic and Behavior Information.,https://doi.org/10.5281/zenodo.5336985,True,o,t
ICSE-2022-136,Path Transitions Tell More: Optimizing Fuzzing Schedules via Runtime Program States.,https://github.com/truzz-fuzz/truzz-fuzz,True,o,s
ICSE-2022-137,PerfSig: Extracting Performance Bug Signatures via Multi-modality Causal Analysis.,https://github.com/jhe16/PerfSig,True,o,s
ICSE-2022-138,Practical Automated Detection of Malicious npm Packages.,https://github.com/githubnext/amalfi-artifact,True,i,t
ICSE-2022-139,Practitioners' Expectations on Automated Code Comment Generation.,https://github.com/xing-hu/Practitioners-Expectations-on-Automated-Code-Comment-Generation,True,o,r
ICSE-2022-140,PREACH: A Heuristic for Probabilistic Reachability to Identify Hard to Reach Statements.,https://zenodo.org/record/5915206,True,o,r
ICSE-2022-141,Precise Divide-By-Zero Detection with Affirmative Evidence.,https://github.com/yiyuaner/ICSE-2022-Wit-data,True,o,t
ICSE-2022-142,Preempting Flaky Tests via Non-Idempotent-Outcome Tests.,https://sites.google.com/view/nio-tests,True,i,r
ICSE-2022-143,Prioritizing Mutants to Guide Mutation Testing.,https://doi.org/10.6084/m9.figshare.19074428,True,o,s
ICSE-2022-144,PROMAL: Precise Window Transition Graphs for Android via Synergy of Program Analysis and Machine Learning.,https://github.com/promal-android/Promal,True,i,r
ICSE-2022-145,PROPR: Property-Based Automatic Program Repair.,https://github.com/Tritlo/PropR,True,o,s
ICSE-2022-146,PUS: A Fast and Highly Efficient Solver for Inclusion-based Pointer Analysis.,https://coderrect.com/openscan/,True,i,t
ICSE-2022-147,Push-Button Synthesis of Watch Companions for Android Apps.,https://sites.google.com/view/jigsaw-wapp,True,i,t
ICSE-2022-148,Quantifying Permissiveness of Access Control Policies.,https://github.com/vlab-cs-ucsb/quacky,True,o,f
ICSE-2022-149,R2Z2: Detecting Rendering Regressions in Web Browsers through Differential Fuzz Testing.,https://doi.org/10.6084/m9.figshare.16569561.v1,True,o,s
ICSE-2022-150,Recommending Good First Issues in GitHub OSS Projects.,https://zenodo.org/record/5881117#.YeliUEBBwlI,True,i,t
ICSE-2022-151,REFTY: Refinement Types for Valid Deep Learning Models.,,,,
ICSE-2022-152,ReMoS: Reducing Defect Inheritance in Transfer Learning via Relevant Model Slicing.,,,,
ICSE-2022-153,Repairing Brain-Computer Interfaces with Fault-Based Data Acquisition.,,,,
ICSE-2022-154,Repairing Order-Dependent Flaky Tests via Test Generation.,https://github.com/UT-SE-Research/ODRepair,True,o,s
ICSE-2022-155,Retrieving Data Constraint Implementations Using Fine-Grained Code Patterns.,https://doi.org/10.5281/zenodo.5915650,True,i,r
ICSE-2022-156,RoPGen: Towards Robust Code Authorship Attribution via Automatic Coding Style Transformation.,https://github.com/RoPGen/RoPGen,True,i,t
ICSE-2022-157,Rotten Apples Spoil the Bunch: An Anatomy of Google Play Malware.,https://resess.github.io/artifacts/GooglePlayMalwareAnalysis,True,i,r
ICSE-2022-158,SAPIENTML: Synthesizing Machine Learning Pipelines by Learning from Human-Written Solutions.,,,,
ICSE-2022-159,Search-based Diverse Sampling from Real-world Software Product Lines.,https://github.com/YiXiangScut/NSbS,True,o,f
ICSE-2022-160,Semantic Image Fuzzing of AI Perception Systems.,https://github.com/less-lab-uva/perception_fuzzing,True,o,f
ICSE-2022-161,ShellFusion: Answer Generation for Shell Programming Tasks via Knowledge Fusion.,https://github.com/nengz/ShellFusion,True,i,r
ICSE-2022-162,SnR: Constraint-Based Type Inference for Incomplete Java Code Snippets.,https://doi.org/10.5281/zenodo.5843327,True,i,t
ICSE-2022-163,Social Science Theories in Software Engineering Research.,https://doi.org/10.5281/zenodo.6036076,True,o,s
ICSE-2022-164,Static Inference Meets Deep learning: A Hybrid Type Inference Approach for Python.,,,,
ICSE-2022-165,Static Stack-Preserving Intra-Procedural Slicing of WebAssembly Binaries.,https://github.com/acieroid/wassail/tree/icse2022,True,i,f
ICSE-2022-166,Striking a Balance: Pruning False-Positives from Static Call Graphs.,https://doi.org/10.5281/zenodo.5177161,False,o,r
ICSE-2022-167,SugarC: Scalable Desugaring of Real-World Preprocessor Usage into Pure C.,https://doi.org/10.5281/zenodo.5915048,True,i,r
ICSE-2022-168,SYMTUNER: Maximizing the Power of Symbolic Execution by Adaptively Tuning External Parameters.,https://github.com/skkusal/symtuner,True,i,f
ICSE-2022-169,Testing Time Limits in Screener Questions for Online Surveys with Programmers.,,,,
ICSE-2022-170,The Art and Practice of Data Science Pipelines: A Comprehensive Study of Data Science Pipelines In Theory, In-The-Small, and In-The-Large.,,,,
ICSE-2022-171,The Extent of Orphan Vulnerabilities from Code Reuse in Open Source Software.,,,,
ICSE-2022-172,"This Is Damn Slick!" Estimating the Impact of Tweets on Open Source Project Popularity and New Contributors.,https://doi.org/10.5281/zenodo.6321448,True,i,t
ICSE-2022-173,TOGA: A Neural Method for Test Oracle Generation.,https://github.com/microsoft/toga,True,i,t
ICSE-2022-174,Towards Automatically Repairing Compatibility Issues in Published Android Apps.,https://zenodo.org/record/5430715,True,i,r
ICSE-2022-175,Towards Bidirectional Live Programming for Incomplete Programs.,https://github.com/xingzhang-pku/BidirectionalPreview,True,i,f
ICSE-2022-176,Towards Boosting Patch Execution On-the-Fly.,,,,
ICSE-2022-177,Towards language-independent Brown Build Detection.,https://github.com/ubisoft/ubisoft-laforge-brownbuild,True,i,r
ICSE-2022-178,Towards Practical Robustness Analysis for DNNs based on PAC-Model Learning.,https://github.com/CAS-LRJ/DeepPAC,True,o,f
ICSE-2022-179,Towards Training Reproducible Deep Learning Models.,https://github.com/nemo9cby/ICSE2022Rep,True,i,r
ICSE-2022-180,Training Data Debugging for the Fairness of Machine Learning Software.,https://github.com/fairnesstest/LTDD,True,o,s
ICSE-2022-181,Trust Enhancement Issues in Program Repair.,https://doi.org/10.5281/zenodo.5908381,True,o,r
ICSE-2022-182,Type4Py: Practical Deep Similarity Learning-Based Type Inference for Python.,https://doi.org/10.5281/zenodo.5913787,True,i,f
ICSE-2022-183,Unleashing the Power of Compiler Intermediate Representation to Enhance Neural Program Embeddings.,https://sites.google.com/view/irgen,True,i,r
ICSE-2022-184,Use of Test Doubles in Android Testing: An In-Depth Investigation.,https://doi.org/10.5281/zenodo.6000372,True,i,r
ICSE-2022-185,Using Deep Learning to Generate Complete Log Statements.,https://github.com/antonio-mastropaolo/LANCE,True,i,r
ICSE-2022-186,Using Pre-Trained Models to Boost Code Review Automation.,https://github.com/RosaliaTufano/code_review_automation,True,i,r
ICSE-2022-187,Using Reinforcement Learning for Load Testing of Video Games.,https://github.com/RosaliaTufano/rlgameauthors,True,o,r
ICSE-2022-188,Utilizing Parallelism in Smart Contracts on Decentralized Blockchains by Taming Application-Inherent Conflicts.,,,,
ICSE-2022-189,VarCLR: Variable Semantic Representation Pre-training via Contrastive Learning.,https://github.com/squaresLab/VarCLR,True,i,f
ICSE-2022-190,Verification of ORM-based Controllers by Summary Inference.,https://doi.org/10.6084/m9.figshare.19087814,True,o,r
ICSE-2022-191,V-SZZ: Automatic Identification of Version Ranges Affected by CVE Vulnerabilities.,https://github.com/baolingfeng/V-SZZ,True,o,s
ICSE-2022-192,VulCNN: An Image-inspired Scalable Vulnerability Detection System.,https://github.com/CGCL-codes/VulCNN,True,i,f
ICSE-2022-193,What Do They Capture? - A Structural Analysis of Pre-Trained Language Models for Source Code.,https://github.com/CGCL-codes/naturalcc,True,c,t
ICSE-2022-194,What Makes a Good Commit Message?,,,,
ICSE-2022-195,What Makes Effective Leadership in Agile Software Development Teams?,https://doi.org/10.5281/zenodo.5816890,True,o,s
ICSE-2022-196,What the Fork? Finding Hidden Code Clones in npm.,https://osf.io/jfk3n/?view_only=6f930d1de870,True,i,t
ICSE-2022-197,Where is Your App Frustrating Users?,https://github.com/MeloFancy/SIRA,True,i,t
ICSE-2022-198,Windranger: A Directed Greybox Fuzzer driven by Deviation Basic Blocks.,https://sites.google.com/view/windranger-directed-fuzzing/,True,i,t
ASE-2017-3,Systematically testing background services of mobile apps.,,,,
ASE-2017-4,Crowd intelligence enhances automated mobile testing.,,,,
ASE-2017-5,EHBDroid: beyond GUI testing for Android applications.,https://github.com/wsong-nj/EHBDroid,True,i,f
ASE-2017-6,Sketch-guided GUI test generation for mobile applications.,,,,
ASE-2017-7,Saying 'hi!' is not enough: mining inputs for effective test generation.,https://github.com/lucadt/testminer,True,o,r
ASE-2017-8,Learn&Fuzz: machine learning for input fuzzing.,,,,
ASE-2017-9,The impact of continuous integration on other software development practices: a large-scale empirical study.,,,,
ASE-2017-10,Perceived language complexity in GitHub issue discussions and their effect on issue resolution.,https://github.com/normative-team/normative,True,i,f
ASE-2017-11,Can automated pull requests encourage software developers to upgrade out-of-date dependencies?,https://github.com/alt-code/Research/,False,o,f
ASE-2017-12,Are developers aware of the architectural impact of their changes?,https://mhepaixao.github.io/architecture_awareness/,True,o,r
ASE-2017-13,SentiCR: a customized sentiment analysis tool for code review interactions.,https://github.com/senticr/SentiCR/,True,i,t
ASE-2017-14,Detecting fragile comments.,http://www.cs.mcgill.ca/∼swevo/Fraco,False,i,f
ASE-2017-15,Improving software text retrieval using conceptual knowledge in source code.,,,,
ASE-2017-16,Automatically generating commit messages from diffs using neural machine translation.,https://sjiang1.github.io/commitgen,False,o,s
ASE-2017-17,Improving missing issue-commit link recovery using positive and unlabeled data.,,,,
ASE-2017-18,APIBot: question answering bot for API documentation.,,,,
ASE-2017-19,Automatic summarization of API reviews.,,,,
ASE-2017-20,iCoq: regression proof selection for large-scale verification projects.,http://cozy.ece.utexas.edu/icoq,False,i,t
ASE-2017-21,More effective interpolations in software model checking.,,,,
ASE-2017-22,Proof-based coverage metrics for formal verification.,https://github.com/elaghs/Working/,True,o,r
ASE-2017-23,Model checker execution reports.,,,,
ASE-2017-24,Modular verification of interrupt-driven software.,https://github.com/sch8906/intAbs,True,o,r
ASE-2017-25,BProVe: a formal verification framework for business process models.,http://pros.unicam.it/tools/bprove,False,o,f
ASE-2017-26,Static detection of asymptotic resource side-channel vulnerabilities in web applications.,,,,
ASE-2017-27,PAD: programming third-party web advertisement censorship.,,,,
ASE-2017-28,All about activity injection: threats, semantics, and detection.,https://github.com/SunghoLee/AIDetector,True,o,f
ASE-2017-29,Detecting information flow by mutating input data.,https://github.com/anosubmission/mutaflow-data,True,c,s
ASE-2017-30,Automatically assessing crashes from heap overflows.,,,,
ASE-2017-31,Learning to share: engineering adaptive decision-support for online social networks.,,,,
ASE-2017-32,UI driven Android application reduction.,,,,
ASE-2017-33,SimplyDroid: efficient event sequence simplification for Android application.,https://github.com/gongbell/SimplyDroid,True,i,f
ASE-2017-34,Automated cross-platform inconsistency detection for mobile apps.,http://www.cc.gatech.edu/~orso/software/diffdroid,True,i,t
ASE-2017-35,In-memory fuzzing for binary code similarity analysis.,,,,
ASE-2017-36,DSIbin: identifying dynamic data structures in C/C++ binaries.,https://github.com/kdudka/predator,True,o,r
ASE-2017-37,Towards robust instruction-level trace alignment of binary code.,,,,
ASE-2017-38,Testing intermediate representations for binary analysis.,https://github.com/SoftSec-KAIST/MeanDiff,True,i,r
ASE-2017-39,Comprehensive failure characterization.,,,,
ASE-2017-40,TrEKer: tracing error propagation in operating system kernels.,,,,
ASE-2017-41,RuntimeSearch: Ctrl+F for a running program.,https://github.com/sulir/runtimesearch,True,i,f
ASE-2017-42,Mining implicit design templates for actionable code reuse.,http://acf-framework.gitlab.io/,True,o,t
ASE-2017-43,Exploring regular expression comprehension.,https://github.com/wangpeipei90/RegexSmells,True,i,r
ASE-2017-44,Automatically assessing code understandability: how far are we?,,,,
ASE-2017-45,Improved query reformulation for concept location using CodeRank and document structures.,,,,
ASE-2017-46,Understanding feature requests by leveraging fuzzy method and linguistic analysis.,http://goo.gl/aWOvIX,False,i,t
ASE-2017-47,O2O service composition with social collaboration.,https://o2oservice.wixsite.com/o2o-service-sample,False,o,f
ASE-2017-48,Gremlin-ATL: a scalable model transformation framework.,https://github.com/atlanmod/Mogwai,True,o,f
ASE-2017-49,Diagnosing assumption problems in safety-critical products.,,,,
ASE-2017-50,Software performance self-adaptation through efficient model predictive control.,,,,
ASE-2017-51,Transfer learning for performance modeling of configurable systems: an exploratory analysis.,https://github.com/pooyanjamshidi/ase17,True,i,t
ASE-2017-52,A comprehensive study of real-world numerical bug characteristics.,,,,
ASE-2017-53,A comprehensive study on real world concurrency bugs in Node.js.,http://www.tcse.cn/~wsdou/project/NodeCB,True,i,t
ASE-2017-54,Generating simpler AST edit scripts by considering copy-and-paste.,http://sdl.ist.osaka--u.ac.jp/~higo/ase2017/,False,o,f
ASE-2017-55,Renaming and shifted code in structured merging: looking ahead for precision and performance.,https://www.infosun.fim.uni-passau.de/se/papers/lookahead/,True,i,f
ASE-2017-56,Semantics-assisted code review: an efficient toolchain and a user study.,,,,
ASE-2017-57,Detecting unknown inconsistencies in web applications.,http://ece.ubc.ca/∼frolino/projects/holocron/,False,o,f
ASE-2017-58,Why and how JavaScript developers use linters.,https://facebook.github.io/react,True,o,r
ASE-2017-59,Automatic testing of symbolic execution engines via program generation and differential testing.,,,,
ASE-2017-60,Floating-point symbolic execution: a case study in n-version programming.,https://github.com/delcypher/symex-fp-bench;https://github.com/danielschemmel/fp-benchmarks-aachen;https://github.com/delcypher/fp-benchmarks-imperial;https://github.com/srg-imperial/klee-float;https://github.com/comsys/klee-float,False,i,r
ASE-2017-61,Rethinking pointer reasoning in symbolic execution.,https://github.com/season-lab/memsight,True,o,f
ASE-2017-62,Leveraging abstract interpretation for efficient dynamic symbolic execution.,,,,
ASE-2017-63,Tortoise: interactive system configuration repair.,http://plasma.cs.umass.edu/tortoise,True,i,t
ASE-2017-64,Contract-based program repair without the contracts.,https://bitbucket.org/maxpei/jaid,True,i,t
ASE-2017-65,ELIXIR: effective object oriented program repair.,https://github.com/bugs-dot-jar/bugs-dot-jar,True,i,r
ASE-2017-66,Leveraging syntax-related code for automated program repair.,https://github.com/qixin5/ssFix,True,i,t
ASE-2017-67,Boosting complete-code tool for partial program.,,,,
ASE-2017-68,A language model for statements of software code.,https://github.com/yangyixiaof/CodeCompletionPlugin,True,o,r
ASE-2017-69,Context-aware integrated development environment command recommender systems.,https://gitlab.inf.unibz.it/tural-gurbanov/ide_rs,True,o,t
ASE-2017-70,Predicting relevance of change recommendations.,,,,
ASE-2017-71,AnswerBot: automated generation of answer summary to developersź technical questions.,http://bit.ly/2qBEUhi,False,o,f
ASE-2017-72,Recommending crowdsourced software developers in consideration of skill improvement.,https://github.com/crowdintelligence/LCTopcoder,False,o,f
ASE-2017-73,The rise of the (modelling) bots: towards assisted modelling via social networks.,,,,
ASE-2017-74,UNDEAD: detecting and preventing deadlocks in production software.,https://github.com/UTSASRG/UnDead,True,c,t
ASE-2017-75,Promoting secondary orders of event pairs in randomized scheduling using a randomized stride.,,,,
ASE-2017-76,Parallel bug-finding in concurrent programs via reduced interleaving instances.,http://users.ecs.soton.ac.uk/gp4/cseq/,True,o,f
ASE-2017-77,Understanding and overcoming parallelism bottlenecks in ForkJoin applications.,https://github.com/gustavopinto/fjdetector,True,i,f
ASE-2017-78,Quick verification of concurrent programs by iteratively relaxed scheduling.,,,,
ASE-2017-79,Automatic loop-invariant generation and refinement through selective sampling.,https://github.com/lijiaying/zilu,False,i,r
ASE-2017-80,FiB: squeezing loop invariants by interpolation between Forward/Backward predicate transformers.,https://github.com/spencerxiao/ase2017-results-and-tools,True,o,r
ASE-2017-81,SymInfer: inferring program invariants using symbolic states.,,,,
ASE-2017-82,Parsimony: an IDE for example-guided synthesis of lexers and parsers.,https://github.com/parsimony-ide/ase2017-extra,True,o,t
ASE-2017-83,Mining constraints for event-based monitoring in systems of systems.,,,,
ASE-2017-84,Programming bots by synthesizing natural language expressions into API invocations.,,,,
ASE-2017-85,Test suite parallelization in open-source projects: a study on its usage and impact.,https://jeandersonbc.github.io/testsuite-parallelization/,False,i,t
ASE-2017-86,Systematic reduction of GUI test sequences.,,,,
ASE-2017-87,Automatically reducing tree-structured test inputs.,https://github.com/sherfert/GTR,True,i,f
ASE-2017-88,Synthetic data generation for statistical testing.,,,,
FSE-2017-79,Model-driven software engineering in practice: privacy-enhanced filtering of network traffic.,https://github.com/NCSC-NL/PEF,False,i,f
FSE-2017-80,Strong agile metrics: mining log data to determine predictive power of software metrics for continuous delivery teams.,,,,
ASE-2017-91,A demonstration of simultaneous execution and editing in a development environment.,https://sites.google.com/view/craftdroid/;https://github.com/StevenReiss/seede,True,i,r
FSE-2017-81,Screening heuristics for project gating systems.,,,,
FSE-2017-82,Natural language querying in SAP-ERP platform.,,,,
FSE-2017-83,Serverless computing: economic and architectural impact.,,,,
FSE-2017-84,What do software engineers care about? gaps between research and practice.,,,,
FSE-2017-85,Reference architectures and Scrum: friends or foes?,,,,
FSE-2017-86,Guidelines for adopting frontend architectures and patterns in microservices-based systems.,,,,
FSE-2017-87,Improving understanding of dynamically typed software developed by agile practitioners.,https://github.com/jairud-garcia/rails-model-extractor,True,o,f
FSE-2017-88,Automated identification of security issues from commit messages and bug reports.,,,,
FSE-2017-89,LaChouTi: kernel vulnerability responding framework for the fragmented Android devices.,,,,
FSE-2017-90,Applying deep learning based automatic bug triager to industrial projects.,,,,
FSE-2017-91,Static analysis for optimizing big data queries.,https://github.com/Microsoft/rudder,True,i,f
FSE-2017-92,Automated testing of hybrid Simulink/Stateflow controllers: industrial case studies.,,,,
FSE-2018-71,Software fairness.,,,,
FSE-2018-77,Modeling and testing a family of surgical robots: an experience report.,https://sites.google.com/view/FSESurgeryRobots/,True,o,r
FSE-2018-78,Efficient static checking of library updates.,,,,
FSE-2018-79,Are mobile banking apps secure? what can be improved?,,,,
ASE-2018-4,On adopting linters to deal with performance concerns in Android apps.,,,,
ASE-2018-5,PerfLearner: learning from bug reports to understand and generate performance test frames.,https://github.com/xha225/PerfLearner,True,c,t
ASE-2018-6,AutoConfig: automatic configuration tuning for distributed message systems.,https://github.com/sselab/autoconfig,True,o,t
ASE-2018-7,Is this class thread-safe? inferring documentation using graph-based learning.,https://github.com/sola-da/TSFinder,True,o,f
ASE-2018-8,A large-scale study of test coverage evolution.,http://www.code-coverage.org,True,i,t
ASE-2018-9,Effectiveness and challenges in generating concurrent tests for thread-safe classes.,http://star.inf.usi.ch/star/software/contest2018/index.htm,False,i,r
ASE-2018-10,Scalable incremental building with dynamic task dependencies.,https://github.com/metaborg/pie;https://github.com/metaborg/spoofax-pie,False,o,f
ASE-2018-11,Noise and heterogeneity in historical build data: an empirical study of Travis CI.,,,,
ASE-2018-12,Automated directed fairness testing.,https://github.com/sakshiudeshi/Aequitas,True,c,s
ASE-2018-13,Concolic testing for deep neural networks.,https://github.com/TrustAI/DeepConcolic,True,i,f
ASE-2018-14,DeepGauge: multi-granularity testing criteria for deep learning systems.,,,,
ASE-2018-15,DeepRoad: GAN-based metamorphic testing and input validation framework for autonomous driving systems.,,,,
ASE-2018-16,Testing autonomous cars for feature interaction failures using many-objective search.,,,,
ASE-2018-17,Tackling combinatorial explosion: a study of industrial needs and practices for analyzing highly configurable systems.,https://sites.google.com/view/planalysis/,True,i,r
ASE-2018-18,Understanding and detecting evolution-induced compatibility issues in Android apps.,,,,
ASE-2018-19,Characterizing the natural language descriptions in software logging statements.,https://github.com/logpai/LoggingDescriptions,True,i,r
ASE-2018-20,Assessing the type annotation burden.,https://doi.org/10.5281/zenodo.1311901,True,o,t
ASE-2018-21,Mining file histories: should we consider branches?,https://github.com/vovak/branches,True,i,r
ASE-2018-22,Tell them apart: distilling technology differences from crowd-scale comparison discussions.,https://difftech.herokuapp.com/,False,i,f
ASE-2018-23,ReScue: crafting regular expression DoS attacks.,https://2bdenny.github.io/ReScue/;https://github.com/2bdenny/ReScue,False,o,f
ASE-2018-24,TDroid: exposing app switching attacks in Android with control flow specialization.,https://tdroidtool.github.io/,True,i,t
ASE-2018-25,Model-driven run-time enforcement of complex role-based access control policies.,,,,
ASE-2018-26,ContractFuzzer: fuzzing smart contracts for vulnerability detection.,https://github.com/gongbell/ContractFuzzer,True,t,f
FSE-2018-80,VulSeeker-pro: enhanced semantic learning based binary vulnerability seeker with emulation.,https://github.com/buptsseGJ/VulSeeker-Pro,False,o,f
ASE-2018-28,Effective API recommendation without historical software repositories.,,,,
ASE-2018-29,API method recommendation without worrying about the task-API knowledge gap.,https://github.com/tkdsheep/BIKERASE2018,False,i,f
ASE-2018-30,An automated approach to estimating code coverage measures via execution logs.,https://hbase.apache.org/,True,o,r
ASE-2018-31,How many of all bugs do we find? a study of static bug detectors.,https://github.com/sola-da/StaticBugCheckers,True,i,f
ASE-2018-32,TRIMMER: application specialization for code debloating.,,,,
ASE-2018-33,A unified lattice model and framework for purity analyses.,https://www.opal-project.de/Opium.html,True,c,t
ASE-2018-34,Control flow-guided SMT solving for program verification.,,,,
ASE-2018-35,PaMpeR: proof method recommendation system for Isabelle/HOL.,https://github.com/data61/PSL/releases/tag/v0.1.1,True,i,r
ASE-2018-36,Neural-machine-translation-based commit message generation: how far are we?,https://goo.gl/63B976,True,o,r
ASE-2018-37,Deep learning based feature envy detection.,https://github.com/liuhuigmail/FeatureEnvy,True,o,t
ASE-2018-38,Improving automatic source code summarization via deep reinforcement learning.,,,,
ASE-2018-39,Template-guided concolic testing via online learning.,https://github.com/kupl/ConTest,True,i,f
ASE-2018-40,Android testing via synthetic symbolic execution.,,,,
ASE-2018-41,PARTI: a multi-interval theory solver for symbolic execution.,,,,
ASE-2018-42,Client-specific equivalence checking.,,,,
ASE-2018-43,Replay without recording of production bugs for service oriented applications.,https://github.com/Programming-Systems-Lab/Parikshan,True,o,r
ASE-2018-44,Reducing interactive refactoring effort via clustering-based multi-objective search.,https://sites.google.com/view/ase2018,True,o,r
ASE-2018-45,FairFuzz: a targeted mutation strategy for increasing greybox fuzz testing coverage.,https://github.com/carolemieux/afl-rb,True,i,f
ASE-2018-46,Efficiently manifesting asynchronous programming errors in Android apps.,,,,
ASE-2018-47,Expandable group identification in spreadsheets.,,,,
ASE-2018-48,Break the dead end of dynamic slicing: localizing data and control omission bug.,https://github.com/llmhyy/tregression,True,o,r
ASE-2018-49,A genetic algorithm for goal-conflict identification.,https://dc.exa.unrc.edu.ar/staff/rdegiovanni/ASE2018.html,True,o,f
ASE-2018-50,Understanding and detecting callback compatibility issues for Android applications.,https://cideranalyzer.github.io/,True,i,r
ASE-2018-51,Detecting and summarizing GUI changes in evolving mobile apps.,https://research-appendix.com/gcat,True,i,r
ASE-2018-52,Empirically assessing opportunities for prefetching and caching in mobile apps.,https://github.com/felicitia/PALOMA-Analysis/tree/empirical,True,o,r
ASE-2018-53,Safe stream-based programming with refinement types.,,,,
ASE-2018-54,Automated model repair for Alloy.,https://github.com/kaiyuanw/ARepair,True,i,t
ASE-2018-55,PFix: fixing concurrency bugs based on memory access patterns.,https://github.com/PFixConcurrency/Fix,True,o,r
ASE-2018-56,Generating reusable web components from mockups.,https://github.com/msbajammal/vizmod,False,o,r
ASE-2018-57,Semantic crash bucketing.,https://github.com/squaresLab/SemanticCrashBucketing,True,i,f
ASE-2018-58,A symbolic model checking approach to the analysis of string and length constraints.,https://github.com/NTU-ALComLab/SLENT,True,i,r
ASE-2018-59,Domain-independent multi-threaded software model checking.,https://www.sosy-lab.org/research/bam-parallel/,True,i,f
ASE-2018-60,Scheduling constraint based abstraction refinement for weak memory models.,,,,
ASE-2018-61,Datalog-based scalable semantic diffing of concurrent programs.,https://github.com/ChunghaSung/EC-Diff,True,i,f
ASE-2018-62,αDiff: cross-version binary code similarity detection with DNN.,,,,
ASE-2018-63,ClDiff: generating concise linked code differences.,https://github.com/FudanSELab/CLDIFF,True,o,r
ASE-2018-64,Characterizing and identifying misexposed activities in Android applications.,https://github.com/AndroidMist/Mist,True,i,t
ASE-2018-65,A tale of two cities: how WebView induces bugs to Android applications.,https://home.cse.ust.hk/~jhuao/wDroid.html,True,i,r
ASE-2018-66,Dual-force: understanding WebView malware via cross-language forced execution.,,,,
ASE-2018-67,Self-protection of Android systems from inter-component communication attacks.,https://www.ics.uci.edu/seal/projects/salma/index.html,False,o,r
ASE-2018-68,An empirical study of Android test generation tools in industrial cases.,,,,
ASE-2018-69,Achieving test automation with testers without coding skills: an industrial report.,,,,
ASE-2018-70,Navigating the maze: the impact of configurability in bioinformatics software.,https://github.com/mikacashman/ASE18SupResources,True,o,f
ASE-2018-71,Automatically testing implementations of numerical abstract domains.,,,,
ASE-2018-72,Experiences applying automated architecture analysis tool suites.,,,,
FSE-2018-81,PAFL: extend fuzzing optimizations of single mode to industrial parallel mode.,,,,
FSE-2018-82,Software development challenges with air-gap isolation.,,,,
FSE-2018-83,Design and validation of precooked developer dashboards.,,,,
FSE-2018-84,Testing and validating end user programmed calculated fields.,,,,
FSE-2018-85,Automated refactoring of nested-IF formulae in spreadsheets.,https://github.com/sei-pku/nestif,True,o,f
FSE-2018-86,FACTS: automated black-box testing of FinTech systems.,,,,
FSE-2018-87,Regression test selection for TizenRT.,,,,
FSE-2018-88,Building lean continuous integration and delivery pipelines by applying DevOps principles: a case study at Varidesk.,,,,
FSE-2018-89,The impact of failing, flaky, and high failure tests on the number of crash reports associated with Firefox builds.,,,,
FSE-2019-77,FinExpert: domain-specific test generation for FinTech systems.,,,,
FSE-2019-78,Design diagrams as ontological source.,https://anonymous.4open.science/repository/b74e25f5-6753-4f28-96d7-3422950f2eb9/,True,i,r
ASE-2019-0,Assessing the Generalizability of Code2vec Token Embeddings.,https://github.com/code2vec-critique/generalizability,True,i,f
ASE-2019-1,Multi-modal Attention Network Learning for Semantic Source Code Retrieval.,,,,
ASE-2019-2,Experience Paper: Search-Based Testing in Automated Driving Control Applications.,,,,
ASE-2019-4,Test Transfer Across Mobile Apps Through Semantic Mapping.,https://sites.google.com/view/craftdroid/,True,i,r
ASE-2019-5,Test Migration Between Mobile Apps with Similar Functionality.,https://sites.google.com/view/apptestmigrator/,True,i,r
ASE-2019-6,DaPanda: Detecting Aggressive Push Notifications in Android Apps.,https://github.com/DaPANDA2019/DaPANDA,True,i,t
ASE-2019-7,Automatic Self-Validation for Code Coverage Profilers.,,,,
ASE-2019-8,Efficient Test Generation Guided by Field Coverage Criteria.,,,,
ASE-2019-9,A Qualitative Analysis of Android Taint-Analysis Results.,https://github.com/secure-software-engineering/COVA.git,True,i,t
ASE-2019-10,Goal-Driven Exploration for Android Applications.,https://resess.github.io/PaperAppendices/GoalExplorer/,True,i,r
ASE-2019-11,RANDR: Record and Replay for Android Applications via Targeted Runtime Instrumentation.,,,,
ASE-2019-12,MalScan: Fast Market-Wide Mobile Malware Scanning by Social-Network Centrality Analysis.,https://github.com/malscan-android/,True,o,f
ASE-2019-13,Discovering, Explaining and Summarizing Controversial Discussions in Community Q&A Sites.,https://github.com/goodchar/Controversy-summary-of-Stack-Overflow-posts,True,i,f
ASE-2019-14,Automating App Review Response Generation.,https://github.com/ReMine-Lab/RRGen,True,i,f
ASE-2019-15,Automatic Generation of Pull Request Descriptions.,https://github.com/Tbabm/PRSummarizer,True,o,r
ASE-2019-16,Systematically Covering Input Structure.,https://github.com/havrikov/covering-input-structure,True,c,t
ASE-2019-17,SEGATE: Unveiling Semantic Inconsistencies between Code and Specification of String Inputs.,https://github.com/pag-iiitd/Segate,True,o,f
ASE-2019-18,Detecting Error-Handling Bugs without Error Specification Input.,,,,
ASE-2019-20,Emotions Extracted from Text vs. True Emotions-An Empirical Evaluation in SE Context.,,,,
ASE-2019-21,Learning from Examples to Find Fully Qualified Names of API Elements in Code Snippets.,,,,
ASE-2019-22,Inferring Program Transformations From Singular Examples via Big Code.,https://github.com/xgdsmileboy/GenPat,True,i,t
ASE-2019-23,Performance-Boosting Sparsification of the IFDS Algorithm with Applications to Taint Analysis.,,,,
ASE-2019-24,Characterizing Android App Signing Issues.,,,,
ASE-2019-25,OAUTHLINT: An Empirical Study on OAuth Bugs in Android Applications.,,,,
ASE-2019-26,History-Guided Configuration Diversification for Compiler Test-Program Generation.,https://github.com/JunjieChen/HiCOND,True,i,t
ASE-2019-27,ReduKtor: How We Stopped Worrying About Bugs in Kotlin Compiler.,,,,
ASE-2019-28,Targeted Example Generation for Compilation Errors.,https://github.com/umairzahmed/tegcer,True,i,f
ASE-2019-29,Understanding Exception-Related Bugs in Large-Scale Cloud Systems.,https://hanseychen.github.io/eBugs/,True,i,r
ASE-2019-30,iFeedback: Exploiting User Feedback for Real-Time Issue Detection in Large-Scale Online Service Systems.,,,,
ASE-2019-31,Continuous Incident Triage for Large-Scale Online Service Systems.,,,,
ASE-2019-32,Apricot: A Weight-Adaptation Approach to Fixing Deep Learning Models.,,,,
ASE-2019-33,Re-Factoring Based Program Repair Applied to Programming Assignments.,https://github.com/githubhuyang/refactory,True,i,t
ASE-2019-34,InFix: Automatically Repairing Novice Program Inputs.,,,,
ASE-2019-36,Regexes are Hard: Decision-Making, Difficulties, and Risks in Programming Regular Expressions.,http://doi.org/10.5281/zenodo.3424069,True,o,t
ASE-2019-37,Testing Regex Generalizability And Its Implications: A Large-Scale Many-Language Measurement Study.,https://doi.org/10.5281/zenodo.3424960,True,o,s
ASE-2019-38,Accurate String Constraints Solution Counting with Weighted Automata.,https://github.com/BoiseState/string-constraint-counting,True,o,f
ASE-2019-39,Subformula Caching for Model Counting and Quantitative Program Analysis.,https://github.com/vlab-cs-ucsb/ABC,True,o,f
ASE-2019-40,ACTGAN: Automatic Configuration Tuning for Software Systems with Generative Adversarial Networks.,https://github.com/anon4review/ACTGAN,True,o,t
ASE-2019-41,V2: Fast Detection of Configuration Drift in Python.,https://github.com/v2-project/v2,True,i,t
ASE-2019-42,Feature-Interaction Aware Configuration Prioritization for Configurable Code.,,,,
ASE-2019-43,Combining Spectrum-Based Fault Localization and Statistical Debugging: An Empirical Study.,https://github.com/xgdsmileboy/StateCoverLocator,True,o,t
ASE-2019-44,SCMiner: Localizing System-Level Concurrency Faults from Large System Call Traces.,https://github.com/TarannumZaman/Scminer,True,i,r
ASE-2019-45,Root Cause Localization for Unreproducible Builds via Causality Analysis Over System Call Tracing.,,,,
ASE-2019-46,Mutation Analysis for Coq.,,,,
ASE-2019-47,Verifying Arithmetic in Cryptographic C Programs.,,,,
ASE-2019-48,Model Checking Embedded Control Software using OS-in-the-Loop CEGAR.,,,,
ASE-2019-49,Get Rid of Inline Assembly through Verification-Oriented Lifting.,,,,
ASE-2019-50,CodeKernel: A Graph Kernel Based Approach to the Selection of API Usage Examples.,https://guxd.github.io/codekernelpre/preliminary.html,True,o,f
ASE-2019-51,Machine Learning Based Recommendation of Method Names: How Far are We.,https://github.com/Method-Name-Recommendation/HeMa,True,o,r
ASE-2019-52,MARBLE: Mining for Boilerplate Code to Identify API Usability Problems.,https://doi.org/10.5281/zenodo.3408715,True,i,r
ASE-2019-53,DIRE: A Neural Approach to Decompiled Identifier Naming.,https://doi.org/10.5281/zenodo.3403077,True,a,f
ASE-2019-54,Accurate Modeling of Performance Histories for Evolving Software Systems.,,,,
ASE-2019-55,An Industrial Experience Report on Performance-Aware Refactoring on a Database-Centric Web Application.,,,,
ASE-2019-57,An Experience Report of Generating Load Tests Using Log-Recovered Workloads at Varying Granularities of User Behaviour.,https://github.com/senseconcordia/ASE2019Data,True,o,f
ASE-2019-59,Predicting Licenses for Changed Source Code.,,,,
ASE-2019-60,Empirical Evaluation of the Impact of Class Overlap on Software Defect Prediction.,https://github.com/glnmzx888/class-overlap,True,o,f
ASE-2019-61,Combining Program Analysis and Statistical Language Model for Code Statement Completion.,,,,
ASE-2019-62,MAP-Coverage: A Novel Coverage Criterion for Testing Thread-Safe Classes.,https://github.com/MAPCoverage/Map-Coverage,True,o,f
ASE-2019-63,Automating Non-Blocking Synchronization In Concurrent Data Abstractions.,,,,
ASE-2019-64,Automating CUDA Synchronization via Program Transformation.,https://github.com/aucs2019/AuCS,True,o,f
ASE-2019-65,Efficient Transaction-Based Deterministic Replay for Multi-threaded Programs.,https://github.com/testrepo007/TPLAY,False,o,f
ASE-2019-66,Wuji: Automatic Online Combat Game Testing Using Evolutionary Deep Reinforcement Learning.,,,,
ASE-2019-67,A Study of Oracle Approximations in Testing Deep Learning Libraries.,,,,
ASE-2019-68,Property Inference for Deep Neural Networks.,,,,
ASE-2019-69,An Empirical Study Towards Characterizing Deep Learning Development and Deployment Across Different Frameworks and Platforms.,https://sites.google.com/view/dnnstudy/,True,i,r
ASE-2019-70,RefBot: Intelligent Software Refactoring Bot.,,,,
ASE-2019-71,Automated Refactoring to Reactive Programming.,,,,
ASE-2019-73,Statistical Log Differencing.,http://smlab.cs.tau.ac.il/xlog/#ASE19b,True,o,r
ASE-2019-74,Logzip: Extracting Hidden Structures via Iterative Clustering for Log Compression.,https://github.com/logpai/logzip,True,i,f
ASE-2019-75,Code-First Model-Driven Engineering: On the Agile Adoption of MDE Tooling.,https://emf-syncer.github.io,True,o,f
ASE-2019-76,Size and Accuracy in Model Inference.,http://smlab.cs.tau.ac.il/xlog/#ASE19a,True,o,r
ASE-2019-77,Debreach: Mitigating Compression Side Channels via Static Analysis and Transformation.,,,,
ASE-2019-78,Fine-Grain Memory Object Representation in Symbolic Execution.,,,,
ASE-2019-79,RENN: Efficient Reverse Execution with Neural-Network-Assisted Alias Analysis.,,,,
ASE-2019-80,Batch Alias Analysis.,https://github.com/jyothivedurada/BatchAnalyzer.git,True,o,r
ASE-2019-81,Improving the Decision-Making Process of Self-Adaptive Systems by Accounting for Tactic Volatility.,https://tacticvolatility.github.io/,True,i,t
ASE-2019-82,Learning-Guided Network Fuzzing for Testing Cyber-Physical System Defences.,http://sav.sutd.edu.sg/?page id=3666,False,o,r
ASE-2019-83,Cautious Adaptation of Defiant Components.,,,,
ASE-2019-84,Active Hotspot: An Issue-Oriented Model to Monitor Software Evolution and Degradation.,,,,
ASE-2019-86,The Impact of Structure on Software Merging: Semistructured Versus Structured Merge.,https://spgroup.github.io/s3m/svj.html;https://github.com/spgroup/s3m,True,i,r
ASE-2019-87,Semistructured Merge in JavaScript Systems.,https://ase2019author.github.io,True,o,r
ASE-2019-88,CLCDSA: Cross Language Code Clone Detection using Syntactical Features and API Documentation.,https://github.com/Kawser-nerd/CLCDSA,True,i,r
ASE-2019-89,B2SFinder: Detecting Open-Source Software Reuse in COTS Software.,https://github.com/1dayto0day/B2SFinder,True,a,f
ASE-2019-90,CoRA: Decomposing and Describing Tangled Code Changes for Reviewer.,,,,
ASE-2020-2,Accelerating All-SAT Computation with Short Blocking Clauses.,,,,
ASE-2020-3,A Predictive Analysis for Detecting Deadlock in MPI Programs.,,,,
ASE-2020-4,Learning to Handle Exceptions.,https://github.com/zhangj111/nexgen,True,c,t
ASE-2020-5,BUILDFAST: History-Aware Build Outcome Prediction for Fast Feedback and Reduced Cost in Continuous Integration.,,,,
ASE-2020-6,LEGION: Best-First Concolic Testing.,,,,
ASE-2020-7,Plug the Database & Play With Automatic Testing: Improving System Testing by Exploiting Persistent Data.,https://gitlab.com/DBInputs/dbinputs,True,i,t
ASE-2020-8,Enhanced Compiler Bug Isolation via Memoized Search.,https://github.com/haoyang9804/RecBi,True,o,t
ASE-2020-9,M3: Semantic API Migrations.,,,,
ASE-2020-10,The Impact of Generic Data Structures: Decoding the Role of Lists in the Linux Kernel.,,,,
ASE-2020-11,Pending Constraints in Symbolic Execution for Better Exploration and Seeding.,https://doi.org/10.6084/m9.figshare.12865973,True,o,t
ASE-2020-12,Broadening Horizons of Multilingual Static Analysis: Semantic Summary Extraction from C Code for JNI Program Analysis.,https://github.com/SunghoLee/c-summary,True,i,f
ASE-2020-13,Assessing and Restoring Reproducibility of Jupyter Notebooks.,https://github.com/Osiris-Jupyter/Osiris,True,c,t
ASE-2020-14,Verified from Scratch: Program Analysis for Learners' Programs.,https://github.com/se2p/bastet,True,c,t
ASE-2020-15,Interval Change-Point Detection for Runtime Probabilistic Model Checking.,https://github.com/x-y-zhao/iCPD,True,o,t
ASE-2020-16,UNCHARTIT: An Interactive Framework for Program Recovery from Charts.,http://sat.inesc-id.pt/unchartit/;https://github.com/danieltrt/Distinguisher,True,c,f
ASE-2020-17,Demystifying Diehard Android Apps.,,,,
ASE-2020-18,UI Obfuscation and Its Effects on Automated UI Analysis for Android Apps.,,,,
ASE-2020-19,Good Things Come In Threes: Improving Search-based Crash Reproduction With Helper Objectives.,https://doi.org/10.5281/zenodo.3979097,True,i,r
ASE-2020-20,Subdomain-Based Generality-Aware Debloating.,https://sites.google.com/view/domgad/,True,i,t
ASE-2020-21,Revisiting the Relationship Between Fault Detection, Test Adequacy Criteria, and Test Set Size.,,,,
ASE-2020-22,Synthesis of Infinite-State Systems with Random Behavior.,,,,
ASE-2020-23,Demystifying Loops in Smart Contracts.,,,,
ASE-2020-24,Patching as Translation: the Data and the Metaphor.,https://github.com/ARiSE-Lab/Patch-as-translation,True,a,t
ASE-2020-25,DeepTC-Enhancer: Improving the Readability of Automatically Generated Tests.,https://github.com/devjeetr/DeepTC-Enhancer-Improving-the-Readability-of-Automatically-Generated-Tests,True,i,f
ASE-2020-26,Hybrid Deep Neural Networks to Infer State Models of Black-Box Systems.,https://github.com/sea-lab/hybrid-net,True,i,f
ASE-2020-27,Representing and Reasoning about Dynamic Code.,https://github.com/skdebray/ASE-2020/,True,o,t
ASE-2020-28,ER Catcher: A Static Analysis Framework for Accurate and Scalable Event-Race Detection in Android.,https://github.com/seal-hub/ERCatcher,True,o,r
ASE-2020-29,A Deep Multitask Learning Approach for Requirements Discovery and Annotation from Open Forum.,https://github.com/DEMAR-requirements/DEMAR,True,i,f
ASE-2020-30,Retrieve and Refine: Exemplar-based Neural Comment Generation.,,,,
ASE-2020-31,Where Shall We Log? Studying and Suggesting Logging Locations in Code Blocks.,https://github.com/SPEAR-SE/ASE2020_Logging_Location_Data,True,i,f
ASE-2020-32,How Incidental are the Incidents? Characterizing and Prioritizing Incidents for Large-Scale Online Service Systems.,https://github.com/JunjieChen/DeepIP,True,o,t
ASE-2020-33,Stay Professional and Efficient: Automatically Generate Titles for Your Bug Reports.,,,,
ASE-2020-34,Owl Eyes: Spotting UI Display Issues via Visual Understanding.,https://github.com/20200501/OwlEye,True,o,f
ASE-2020-35,Multiple-Boundary Clustering and Prioritization to Promote Neural Network Retraining.,https://github.com/actionabletest/MCP,True,o,s
ASE-2020-36,Marble: Model-based Robustness Analysis of Stateful Deep Learning Systems.,https://doi.org/10.21979/N9/TTTSFK;https://researchdata.ntu.edu.sg/dataset.xhtml?persistentId=doi:10.21979/N9/TTTSFK,True,o,r
ASE-2020-37,MockSniffer: Characterizing and Recommending Mocking Decisions for Unit Tests.,https://doi.org/10.5281/zenodo.3783869,True,i,t
ASE-2020-38,Defect Prediction Guided Search-Based Software Testing.,https://github.com/SBST-DPG/sbst-dpg,True,i,t
ASE-2020-39,API-Misuse Detection Driven by Fine-Grained API-Constraint Knowledge Graph.,,,,
ASE-2020-40,Multi-task Learning based Pre-trained Language Model for Code Completion.,,,,
ASE-2020-41,Audee: Automated Testing for Deep Learning Frameworks.,,,,
ASE-2020-42,Towards Interpreting Recurrent Neural Networks through Probabilistic Abstraction.,https://github.com/dgl-prc/rnn2automata,True,o,r
ASE-2020-43,Continuous Compliance.,https://doi.org/10.5281/zenodo.3976221,False,o,t
ASE-2020-44,SADT: Syntax-Aware Differential Testing of Certificate Validation in SSL/TLS Implementations.,,,,
ASE-2020-45,CoFI: Consistency-Guided Fault Injection for Cloud Systems.,https://hanseychen.github.io/CoFI/;https://github.com/hanseychen/CoFI,True,i,f
ASE-2020-46,ChemTest: An Automated Software Testing Framework for an Emerging Paradigm.,https://github.com/LavaOps/ChemTest,True,o,f
ASE-2020-47,Automatic Extraction of Cause-Effect-Relations from Requirements Artifacts.,,,,
ASE-2020-48,BiLO-CPDP: Bi-Level Programming for Automated Model Discovery in Cross-Project Defect Prediction.,https://github.com/COLA-Laboratory/ase2020,True,o,f
ASE-2020-49,Automating Just-In-Time Comment Updating.,https://github.com/tbabm/CUP,True,o,r
ASE-2020-50,Automated Implementation of Windows-related Security-Configuration Guides.,https://github.com/tum-i22/CIS-Benchmark-Evaluation,True,i,r
ASE-2020-51,Identifying Software Performance Changes Across Variants and Versions.,https://github.com/AI-4-SE/Changepoints-Across-Variants-And-Versions/,True,i,f
ASE-2020-52,CP-Detector: Using Configuration-related Performance Properties to Expose Performance Bugs.,https://github.com/TimHe95/CP-Detector,True,i,f
ASE-2020-53,Just-In-Time Reactive Synthesis.,,,,
ASE-2020-54,JISET: JavaScript IR-based Semantics Extraction Toolchain.,https://github.com/kaist-plrg/jiset,True,o,f
ASE-2020-55,FlashRegex: Deducing Anti-ReDoS Regexes from Examples.,https://github.com/EasyRegex/FlashRegex,True,o,f
ASE-2020-56,Inferring and Applying Def-Use Like Configuration Couplings in Deployment Descriptors.,,,,
ASE-2020-57,Mastering Uncertainty in Performance Estimations of Configurable Software Systems.,,,,
ASE-2020-58,Team Discussions and Dynamics During DevOps Tool Adoptions in OSS Projects.,https://github.com/lkyin/tool_adoptions,True,a,t
ASE-2020-59,TestMC: Testing Model Counters using Differential and Metamorphic Testing.,https://github.com/muhammadusman93/TestMC-ASE2020,False,o,f
ASE-2020-60,BigFuzz: Efficient Fuzz Testing for Data Analytics Using Framework Abstraction.,,,,
ASE-2020-61,Scaling Client-Specific Equivalence Checking via Impact Boundary Search.,,,,
ASE-2020-62,Code to Comment "Translation": Data, Metrics, Baselining & Evaluation.,https://bit.ly/3lBDegY,True,o,f
ASE-2020-63,Exploring the Architectural Impact of Possible Dependencies in Python Software.,https://github.com/jinwuxia/ASE2020data,True,i,f
ASE-2020-64,Problems and Opportunities in Training Deep Learning Software Systems: An Analysis of Variance.,https://github.com/lin-tan/dl-variance,True,i,f
ASE-2020-65,NEURODIFF: Scalable Differential Verification of Neural Networks using Fine-Grained Approximation.,,,,
ASE-2020-66,Identifying and Describing Information Seeking Tasks.,,,,
ASE-2020-67,Predicting Code Context Models for Software Development Tasks.,https://github.com/zhiyuan-wan/ASE_2020_predicting_code_context,True,i,f
ASE-2020-68,SCDetector: Software Functional Clone Detection Based on Semantic Tokens Analysis.,https://github.com/SCDetector/SCDetector,True,i,f
ASE-2020-69,Generating Concept based API Element Comparison Using a Knowledge Graph.,https://fudanselab.github.io/Research-ASE2020-APIComp/;https://github.com/FudanSELab/Research-ASE2020-APIComp,True,o,r
ASE-2020-70,Multiplex Symbolic Execution: Exploring Multiple Paths by Solving Once.,,,,
ASE-2020-71,Zeror: Speed Up Fuzzing with Coverage-sensitive Tracing and Scheduling.,,,,
ASE-2020-72,Detecting and Explaining Self-Admitted Technical Debts with Attention-based Neural Networks.,,,,
ASE-2020-73,OCoR: An Overlapping-Aware Code Retriever.,https://github.com/anyone546/OCoR,True,o,f
ASE-2020-74,Understanding Performance Concerns in the API Documentation of Data Science Libraries.,https://doi.org/10.5281/zenodo.3972069,True,i,r
ASE-2020-75,On the Effectiveness of Unified Debugging: An Extensive Study on 16 Program Repair Systems.,https://github.com/ProdigyXable/UnifiedDebuggingStudy,True,i,r
ASE-2020-76,Automated Third-Party Library Detection for Android Applications: Are We There Yet?,https://sites.google.com/view/libdetect/,True,o,f
ASE-2020-77,CCGraph: a PDG-based code clone detector with approximate graph matching.,https://github.com/BorgwardtLab/GraphKernels,True,o,f
ASE-2020-78,Towards Generating Thread-Safe Classes Automatically.,,,,
ASE-2020-79,No Strings Attached: An Empirical Study of String-related Software Bugs.,https://github.com/sola-st/string-bugs,True,o,f
ASE-2020-80,Automated Patch Correctness Assessment: How Far are We?,http://doi.org/10.5281/zenodo.3730599,True,o,t
ASE-2020-81,Evaluating Representation Learning of Code Changes for Predicting Patch Correctness in Program Repair.,https://github.com/SerVal-DTF/DL4PatchCorrectness,True,o,f
ASE-2020-82,Scalable Multiple-View Analysis of Reactive Systems via Bidirectional Model Transformations.,http://dsg.tuwien.ac.at/staff/ctsigkanos/ase20,True,o,r
ASE-2020-83,Trace-Checking Signal-based Temporal Properties: A Model-Driven Approach.,https://github.com/SNTSVV/SB-TemPsy,True,o,t
ASE-2020-84,Attend and Represent: A Novel View on Algorithm Selection for Software Verification.,https://github.com/cedricrupb/cst_transform,True,i,f
ASE-2020-85,Cross-Contract Static Analysis for Detecting Practical Reentrancy Vulnerabilities in Smart Contracts.,https://toolman-demo.readthedocs.io/en/latest/index.html,True,i,r
ASE-2020-86,Cats Are Not Fish: Deep Learning Testing Calls for Out-Of-Distribution Awareness.,,,,
ASE-2020-87,Metamorphic Object Insertion for Testing Object Detection Systems.,https://github.com/MetaOD/MetaOD,True,i,r
ASE-2020-88,Seven Reasons Why: An In-Depth Study of the Limitations of Random Test Input Generation for Android.,https://sites.google.com/view/studymonkeylimitations/,True,i,r
ASE-2020-89,Test Automation in Open-Source Android Apps: A Large-Scale Empirical Study.,https://github.com/seal-hub/ASE20Empirical,True,i,r
ASE-2020-90,Synthesis-Based Resolution of Feature Interactions in Cyber-Physical Systems.,https://github.com/cps-sei/cps-synth-resolultion,True,o,t
ASE-2020-91,MoFuzz: A Fuzzer Suite for Testing Model-Driven Software Engineering Tools.,https://github.com/hub-se/MoFuzz,True,o,t
ASE-2020-92,Prober: Practically Defending Overflows with Page Protection.,,,,
ASE-2020-93,MinerRay: Semantics-Aware Analysis for Ever-Evolving Cryptojacking Detection.,https://miner-ray.github.io/,True,i,r
ASE-2020-94,Summary-Based Symbolic Evaluation for Smart Contracts.,,,,
ASE-2021-2,Automating User Notice Generation for Smart Contract Functions.,https://github.com/xing-hu/SmartDoc,True,o,f
ASE-2021-3,End-to-End Automation of Feedback on Student Assembly Programs.,,,,
ASE-2021-4,Is Historical Data an Appropriate Benchmark for Reviewer Recommendation Systems? : A Case Study of the Gerrit Community.,,,,
ASE-2021-5,An Empirical Study of Bugs in WebAssembly Compilers.,https://wasm-compiler-bugs.github.io/,True,c,t
ASE-2021-6,Detecting TensorFlow Program Bugs in Real-World Industrial Environment.,,,,
ASE-2021-7,Why Do Developers Remove Lambda Expressions in Java?,https://github.com/CGCL-codes/LambdaMisuse,True,i,t
ASE-2021-8,Context Debloating for Object-Sensitive Pointer Analysis.,http://www.cse.unsw.edu.au/∼corg/conch,False,o,t
ASE-2021-9,Dynamic Generation of Python Bindings for HPC Kernels.,https://github.com/EngineeringSoftware/wayout,True,i,t
ASE-2021-10,Testing Your Question Answering Software via Asking Recursively.,https://github.com/imcsq/ASE21-QAAskeR,True,i,r
ASE-2021-11,Improving Test Case Generation for REST APIs Through Hierarchical Clustering.,,,,
ASE-2021-12,VizSmith: Automated Visualization Synthesis by Mining Data-Science Notebooks.,https://github.com/rbavishi/vizsmith-demo,True,i,t
ASE-2021-13,ISPY: Automatic Issue-Solution Pair Extraction from Community Live Chats.,https://github.com/jzySaber1996/ISPY,True,i,t
ASE-2021-14,EditSum: A Retrieve-and-Edit Framework for Source Code Summarization.,,,,
ASE-2021-15,Interactive Cross-language Code Retrieval with Auto-Encoders.,,,,
ASE-2021-16,Data-Driven Design and Evaluation of SMT Meta-Solving Strategies: Balancing Performance, Accuracy, and Cost.,https://doi.org/10.5281/zenodo.5226127;https://github.com/tudo-aqua/paper-reproduction-package-ase2021/tree/ASE_2021_AEC,True,i,r
ASE-2021-17,Reducing Bug Triaging Confusion by Learning from Mistakes with a Bug Tossing Knowledge Graph.,https://github.com/SuYanqi/LR-BKG,True,i,f
ASE-2021-18,ASE: A Value Set Decision Procedure for Symbolic Execution.,,,,
ASE-2021-19,CorbFuzz: Checking Browser Security Policies with Fuzzing.,,,,
ASE-2021-20,SMARTIAN: Enhancing Smart Contract Fuzzing with Static and Dynamic Data-Flow Analyses.,https://github.com/SoftSec-KAIST/Smartian,True,o,t
ASE-2021-21,Restoring the Executability of Jupyter Notebooks by Automatic Upgrade of Deprecated APIs.,https://sites.google.com/view/relancer;https://github.com/Chenguang-Zhu/relancer,True,i,t
ASE-2021-22,Adversarial Attacks to API Recommender Systems: Time to Wake Up and Smell the Coffeeƒ.,https://doi.org/10.5281/zenodo.5105955;https://github.com/MDEGroup/APIRecSys-AML/tree/ASE_AE,True,i,r
ASE-2021-23,REPFINDER: Finding Replacements for Missing APIs in Library Update.,https://github.com/repfinder/repfinder.github.io,True,o,t
ASE-2021-24,Targeting Requirements Violations of Autonomous Driving Systems by Dynamic Evolutionary Search.,,,,
ASE-2021-25,On the Real-World Effectiveness of Static Bug Detectors at Finding Null Pointer Exceptions.,https://github.com/ucd-plse/Static-Bug-Detectors-ASE-Artifact,True,o,f
ASE-2021-26,Subtle Bugs Everywhere: Generating Documentation for Data Wrangling Code.,https://github.com/malusamayo/notebooks-analysis,True,o,f
ASE-2021-27,Distribution Models for Falsification and Verification of DNNs.,https://zenodo.org/record/5347675#.YsvQsOhBxPY,True,o,s
ASE-2021-28,SATune: A Study-Driven Auto-Tuning Approach for Configurable Software Verification Tools.,https://zenodo.org/record/5218510;https://github.com/amordahl/satune/tree/v1.3,True,i,t
ASE-2021-29,Efficient SMT-Based Model Checking for Signal Temporal Logic.,,,,
ASE-2021-30,DeepMetis: Augmenting a Deep Learning Test Set to Increase its Mutation Score.,,,,
ASE-2021-31,Efficient state synchronisation in model-based testing through reinforcement learning.,https://figshare.com/articles/software/CodeAndData/14478132,True,o,f
ASE-2021-32,Faster Mutation Analysis with Fewer Processes and Smaller Overheads.,https://github.com/winmutase21/WinMutASE21Artifact,True,i,t
ASE-2021-33,FRUGAL: Unlocking Semi-Supervised Learning for Software Analytics.,https://github.com/SE-Efforts/SE_SSL,True,i,t
ASE-2021-34,PyExplainer: Explaining the Predictions of Just-In-Time Defect Models.,https://github.com/awsm-research/PyExplainer,True,a,t
ASE-2021-35,Groot: An Event-graph-based Approach for Root Cause Analysis in Industrial Settings.,,,,
ASE-2021-36,Graph-based Incident Aggregation for Large-Scale Online Service Systems.,https://github.com/OpsPAI/grlia,True,i,r
ASE-2021-37,On Multi-Modal Learning of Editing Source Code.,,,,
ASE-2021-38,Learning Highly Recursive Input Grammars.,https://github.com/neil-kulkarni/arvada,True,i,t
ASE-2021-39,Automated Testing for Machine Translation via Constituency Invariance.,,,,
ASE-2021-40,Race Detection for Event-Driven Node.js Applications.,https://github.com/tcse-iscas/nrace,True,i,t
ASE-2021-41,Log-based Anomaly Detection Without Log Parsing.,https://github.com/vanhoanglepsa/NeuralLog,True,c,t
ASE-2021-42,Finding the Missing Piece: Permission Specification Analysis for Android NDK.,https://github.com/moonZHH/PSGen,True,i,t
ASE-2021-43,Characterizing and Detecting Configuration Compatibility Issues in Android Apps.,https://sites.google.com/view/confdroid,True,i,r
ASE-2021-44,Where to Start: Studying Type Annotation Practices in Python.,,,,
ASE-2021-45,APIzation: Generating Reusable APIs from StackOverflow Code Snippets.,https://doi.org/10.5281/zenodo.5236305;https://github.com/pasqualesalza/apization/tree/v1.0.0,True,i,r
ASE-2021-46,FIGCPS: Effective Failure-inducing Input Generation for Cyber-Physical Systems with Deep Reinforcement Learning.,https://github.com/noisysilence-max/Failure-Inducing-Input-Generation,True,o,f
ASE-2021-47,InstruGuard: Find and Fix Instrumentation Errors for Coverage-based Greybox Fuzzing.,https://github.com/Marsman1996/instruguard,True,i,t
ASE-2021-48,RULF: Rust Library Fuzzing via API Dependency Graph Traversal.,https://github.com/Artisan-Lab/RULF,True,i,f
ASE-2021-49,PyNose: A Test Smell Detector For Python.,https://github.com/JetBrains-Research/PyNose,True,i,t
ASE-2021-50,JSTAR: JavaScript Specification Type Analyzer using Refinement.,,,,
ASE-2021-51,Can Neural Clone Detection Generalize to Unseen Functionalitiesƒ.,https://github.com/thousfeet/Functionality-generalization,True,a,f
ASE-2021-52,Characterizing Transaction-Reverting Statements in Ethereum Smart Contracts.,https://github.com/transaction-reverting-statements/Characterizing-require-statement-in-Ethereum-Smart-Contract,True,i,r
ASE-2021-53,"What makes my queries slow?": Subgroup Discovery for SQL Workload Analysis.,https://github.com/RemilYoucef/sd-4sql,True,i,f
ASE-2021-54,AID: Efficient Prediction of Aggregated Intensity of Dependency in Large-scale Cloud Systems.,https://github.com/OpsPAI/aid,True,o,f
ASE-2021-55,Performance Testing for Cloud Computing with Dependent Data Bootstrapping.,https://doi.org/10.5281/zenodo.5093934;https://github.com/sen-he/Metior/tree/v1.0.0,True,o,t
ASE-2021-56,Nekara: Generalized Concurrency Testing.,https://github.com/microsoft/coyote-scheduler,False,i,f
ASE-2021-57,QDiff: Differential Testing of Quantum Software Stacks.,https://github.com/wjy99-c/QDiff,True,i,t
ASE-2021-58,Finding A Needle in a Haystack: Automated Mining of Silent Vulnerability Fixes.,https://github.com/2021-CONFDATA/2021-CONF-DATA,True,i,r
ASE-2021-59,DeepCVA: Automated Commit-level Vulnerability Assessment with Deep Multi-task Learning.,https://github.com/lhmtriet/DeepCVA,True,i,r
ASE-2021-60,Automated Repair of Size-Based Inaccessibility Issues in Mobile Applications.,,,,
ASE-2021-61,Mining Cross-Domain Apps for Software Evolution: A Feature-based Approach.,https://github.com/mycoderesearch/CDFRecommendation,True,o,t
ASE-2021-62,UI Test Migration Across Mobile Platforms.,https://github.com/ase-test-migration/test-migration,True,i,r
ASE-2021-63,Intelligent Change Operators for Multi-Objective Refactoring.,https://sites.google.com/view/asedependency,True,i,r
ASE-2021-64,Refactorings and Technical Debt in Docker Projects: An Empirical Study.,https://sites.google.com/view/ase21-docker-refactorings,True,i,r
ASE-2021-65,FirmGuide: Boosting the Capability of Rehosting Embedded Linux Kernels through Model-Guided Kernel Execution.,https://github.com/cyruscyliu/firmguide,True,i,r
ASE-2021-66,IFIZZ: Deep-State and Efficient Fault-Scenario Generation to Test IoT Firmware.,https://github.com/decentL/iFIZZ-ASE21,True,i,r
ASE-2021-67,Learning Patterns in Configuration.,,,,
ASE-2021-68,Transcode: Detecting Status Code Mapping Errors in Large-Scale Systems.,,,,
ASE-2021-69,Evolutionary-Guided Synthesis of Verified Pareto-Optimal MDP Policies.,https://github.com/gerasimou/MDPSynthesis,True,i,t
ASE-2021-70,Automating Developer Chat Mining.,https://github.com/panshengyi/F2Chat,True,i,r
ASE-2021-71,Thinking Like a Developer? Comparing the Attention of Humans with Neural Models of Code.,https://github.com/MattePalte/thinking-like-a-developer,True,i,t
ASE-2021-72,Detecting Memory-Related Bugs by Tracking Heap Memory Management of C++ Smart Pointers.,,,,
ASE-2021-73,Understanding and Detecting Performance Bugs in Markdown Compilers.,https://github.com/cuhk-seclab/mdperffuzz,True,i,t
ASE-2021-74,Deep GUI: Black-box GUI Input Generation with Deep Learning.,https://github.com/Feri73/deep-gui,True,i,f
ASE-2021-75,Towards Exploring the Limitations of Active Learning: An Empirical Study.,https://github.com/code4papers/ALempirical,True,o,f
ASE-2021-76,Learning Domain-Specific Edit Operations from Model Repositories with Frequent Subgraph Mining.,,,,
ASE-2021-77,Unsupervised Labeling and Extraction of Phrase-based Concepts in Vulnerability Descriptions.,https://bitbucket.org/Materakemia/concept_labeling/src/master/,True,i,t
ASE-2021-78,A Compositional Deadlock Detector for Android Java.,,,,
ASE-2021-79,Binary Diffing as a Network Alignment Problem via Belief Propagation.,,,,
ASE-2021-80,CiFi: Versatile Analysis of Class and Field Immutability.,https://github.com/opalj/CiFi-Benchmark,True,o,f
ASE-2021-81,Modeling Team Dynamics for the Characterization and Prediction of Delays in User Stories.,,,,
ASE-2021-82,DeepMemory: Model-based Memorization Analysis of Deep Neural Language Models.,,,,
ASE-2021-83,Automated Verification of Go Programs via Bounded Model Checking.,,,,
ASE-2021-147,Property-based Test for Part-of-Speech Tagging Tool.,,,,
ASE-2021-155,Adaptation2: Adapting Specification Learners in Assured Adaptive Systems.,,,,
ASE-2021-162,Defeating Program Analysis Techniques via Ambiguous Translation.,,,,
ISSTA-2017-0,One test to rule them all.,,,,
ISSTA-2017-1,Reinforcement learning for automatic test case prioritization and selection in continuous integration.,https://bitbucket.org/helges/retecs,True,o,f
ISSTA-2017-2,PerfRanker: prioritization of performance regression tests for collection-intensive software.,https://sites.google.com/site/perfranker2017/,True,o,r
ISSTA-2017-3,Compiler-assisted test acceleration on GPUs for embedded software.,https://github.com/wyaneva/ParTeCL-CodeGen,True,o,t
ISSTA-2017-4,Targeted property-based testing.,,,,
ISSTA-2017-5,Generating unit tests with descriptive names or: would you name your children thing1 and thing2?,,,,
ISSTA-2017-6,Accelerating array constraints in symbolic execution.,https://srg.doc.ic.ac.uk/projects/klee-array/,True,o,f
ISSTA-2017-7,Improving the cost-effectiveness of symbolic testing techniques for transport protocol implementations under packet dynamics.,,,,
ISSTA-2017-8,Combining symbolic execution and search-based testing for programs with complex heap inputs.,https://github.com/pietrobraione/sushi,True,o,f
ISSTA-2017-9,Efficient computation of happens-before relation for event-driven programs.,,,,
ISSTA-2017-10,Automatic detection and validation of race conditions in interrupt-driven embedded software.,,,,
ISSTA-2017-11,Monitoring decentralized specifications.,https://gitlab.inria.fr/monitoring/themis,True,i,r
ISSTA-2017-12,Effective online software anomaly detection.,,,,
ISSTA-2017-13,Semi-automated discovery of server-based information oversharing vulnerabilities in Android applications.,https://github.com/BUseclab/hush,True,o,r
ISSTA-2017-14,CPR: cross platform binary code reuse via platform independent trace program.,,,,
ISSTA-2017-15,An actionable performance profiler for optimizing the order of evaluations.,,,,
ISSTA-2017-16,Testing and analysis of web applications using page models.,,,,
ISSTA-2017-17,Automated layout failure detection for responsive web pages without an explicit oracle.,http://redecheck.org/issta17/,True,o,r
ISSTA-2017-18,Test execution checkpointing for web applications.,http://www.infsec.ethz.ch/research/software/webcheck.html,False,o,f
ISSTA-2017-19,Experience paper: a study on behavioral backward incompatibilities of Java software libraries.,https://sites.google.com/site/incompemp2017/,True,o,f
ISSTA-2017-20,Identifying test-suite-overfitted patches through test case generation.,https://github.com/qixin5/DiffTGen,True,i,t
ISSTA-2017-21,Impact of tool support in patch construction.,https://goo.gl/f1mRMM,True,c,t
ISSTA-2017-22,Automated repair of layout cross browser issues using search-based techniques.,https://github.com/sonalmahajan/xfix,True,o,r
ISSTA-2017-23,Boosting spectrum-based fault localization using PageRank.,https://bitbucket.org/zms0617/prfl,True,o,t
ISSTA-2017-24,FLUCCS: using code and change metrics to improve fault localization.,https://bitbucket.org/teamcoinse/_x001E_uccs,False,i,f
ISSTA-2017-25,Inferring mutant utility from program context.,,,,
ISSTA-2017-26,Faster mutation analysis via equivalence modulo states.,https://github.com/wangbo15/accmut,True,o,f
ISSTA-2017-27,Just-in-time static analysis.,https://blogs.uni-paderborn.de/sse/tools/cheetah-just-in-time-analysis/,True,i,r
ISSTA-2017-28,Refining interprocedural change-impact analysis using equivalence relations.,https://symdi_x001D_.codeplex.com/,False,o,t
ISSTA-2017-29,Boosting the precision of virtual call integrity protection with partial pointer analysis for C++.,,,,
ISSTA-2017-30,Lightweight detection of physical unit inconsistencies without program annotations.,http://nimbus.unl.edu/tools,False,i,t
ISSTA-2018-1,Lightweight verification of array indexing.,https://checkerframework.org/,True,i,t
ISSTA-2018-2,Eliminating timing side-channel leaks using program repair.,,,,
ISSTA-2018-3,Symbolic path cost analysis for side-channel detection.,https://github.com/vlab-cs-ucsb/coco-channel,False,o,r
ISSTA-2018-4,Safe and sound program analysis with Flix.,http://flix.github.io;http://github.com/flix/flix,False,o,f
ISSTA-2018-5,Test case prioritization for acceptance testing of cyber physical systems: a multi-objective search-based approach.,https://github.com/seungyeob/issta2018-mosis,True,o,s
ISSTA-2018-6,Bench4BL: reproducibility study on the performance of IR-based bug localization.,https://github.com/exatoa/Bench4BL,True,o,t
ISSTA-2018-7,Automated test mapping and coverage for network topologies.,,,,
ISSTA-2018-8,Evaluating test-suite reduction in real software evolution.,,,,
ISSTA-2018-9,Compiler fuzzing through deep learning.,https://chriscummins.cc/deepsmith;https://github.com/ChrisCummins/phd/,False,i,f
ISSTA-2018-10,Deep specification mining.,https://github.com/lebuitienduy/DSM,False,c,t
ISSTA-2018-11,Identifying implementation bugs in machine learning based image classifiers using metamorphic testing.,https://github.com/verml/VerifyML,True,i,f
ISSTA-2018-12,An empirical study on TensorFlow program bugs.,https://github.com/ForeverZyh/TensorFlow-Program-Bugs,True,o,f
ISSTA-2018-13,Automatically translating bug reports into test cases for mobile apps.,http://www.cc.gatech.edu/~orso/software/yakusu,True,i,r
ISSTA-2018-14,CiD: automating the detection of API-related compatibility issues in Android apps.,,,,
ISSTA-2018-15,Test migration for efficient large-scale assessment of mobile app coding assignments.,https://sites.google.com/view/testmigration/,True,i,r
ISSTA-2018-16,Analyzing the analyzers: FlowDroid/IccTA, AmanDroid, and DroidSafe.,https://resess.github.io/PaperAppendices/ISSTA2018.html,True,i,r
ISSTA-2018-17,Repositioning of static analysis alarms.,,,,
ISSTA-2018-18,Shooting from the heap: ultra-scalable static analysis with heap snapshots.,,,,
ISSTA-2018-19,Static analysis of Java dynamic proxies.,,,,
ISSTA-2018-20,Practical detection of concurrency issues at coding time.,http://parallel-checker.com;https://github.com/blaeser/parallelchecker,False,c,s
ISSTA-2018-21,Tests from traces: automated unit test extraction for R.,https://github.com/fikovnik/ISSTA18-Artifact,True,i,f
ISSTA-2018-22,Translating code comments to procedure specifications.,https://github.com/albertogoffi/toradocu/releases/tag/v3.0,True,o,f
ISSTA-2018-23,PerfFuzz: automatically generating pathological inputs.,https://github.com/carolemieux/perffuzz,True,i,f
ISSTA-2018-24,Search-based detection of deviation failures in the migration of legacy spreadsheet applications.,,,,
ISSTA-2018-25,Making data-driven porting decisions with Tuscan.,https://github.com/karkhaz/tuscan,True,i,f
ISSTA-2018-26,Comparing developer-provided to user-provided tests for fault localization and automated program repair.,,,,
ISSTA-2018-27,Shaping program repair space with existing patches and similar code.,https://github.com/xgdsmileboy/SimFix,True,o,s
ISSTA-2018-28,Remove RATs from your code: automated optimization of resource inefficient database writes for mobile applications.,https://github.com/USC-SQL/RAT-TRAP,True,c,t
ISSTA-2018-29,Badger: complexity analysis with fuzzing and symbolic execution.,https://github.com/isstac/badger,True,o,t
ISSTA-2018-30,Exploiting community structure for floating-point precision tuning.,,,,
ISSTA-2018-31,piCoq: parallel regression proving for large-scale verification projects.,http://cozy.ece.utexas.edu/icoq,False,i,t
ISSTA-2019-3,Crash-avoiding program repair.,https://github.com/gaoxiang9430/fix2fit,True,i,t
ISSTA-2019-4,Practical program repair via bytecode mutation.,https://github.com/prapr/prapr,True,i,r
ISSTA-2019-5,TBar: revisiting template-based automated program repair.,https://github.com/SerVal-DTF/TBar,True,i,t
ISSTA-2019-6,History-driven build failure fixing: how far are we?,,,,
ISSTA-2019-7,LibID: reliable identification of obfuscated third-party Android libraries.,https://github.com/ucam-cl-dtg/LibID,True,i,f
ISSTA-2019-8,QADroid: regression event selection for Android applications.,http://pace.cse.iitm.ac.in/tools.php,True,i,t
ISSTA-2019-9,Mining Android crash fixes in the absence of issue- and change-tracking systems.,https://craftdroid.github.io,True,o,t
ISSTA-2019-10,Sara: self-replay augmented record and replay for Android in industrial cases.,,,,
ISSTA-2019-11,Root causing flaky tests in a large-scale industrial setting.,https://sites.google.com/view/root-causing-flaky-tests/home;https://github.com/winglam/RootFinder,True,i,r
ISSTA-2019-12,Mitigating the effects of flaky tests on mutation testing.,https://doi.org/10.6084/m9.figshare.8226332,True,i,r
ISSTA-2019-13,Assessing the state and improving the art of parallel testing for C.,,,,
ISSTA-2019-14,Failure clustering without coverage.,https://figshare.com/s/7e9ff8519340f0e7544e,True,o,f
ISSTA-2019-15,DeepHunter: a coverage-guided fuzz testing framework for deep neural networks.,https://sites.google.com/view/deephunter,True,o,r
ISSTA-2019-16,Search-based test and improvement of machine-learning-based anomaly detection systems.,https://bitbucket.org/maxcordy/idsga,True,o,f
ISSTA-2019-17,DeepFL: integrating multiple fault diagnosis dimensions for deep fault localization.,https://github.com/DeepFL/DeepFaultLocalization.git,True,o,r
ISSTA-2019-18,Codebase-adaptive detection of security-relevant methods.,https://github.com/secure-software-engineering/swan,True,i,r
ISSTA-2019-19,Effective and efficient API misuse detection via exception propagation and search-based testing.,https://github.com/mkechagia/Catcher,True,i,f
ISSTA-2019-20,Automated API-usage update for Android apps.,https://sites.google.com/view/appevolve,True,i,t
ISSTA-2019-21,A large-scale study of application incompatibilities in Android.,https://www.dropbox.com/s/k7w5f77dv2yos17/androidincompat-artefact.zip?dl=0,True,i,h
ISSTA-2019-22,Deferred concretization in symbolic execution via fuzzing.,,,,
ISSTA-2019-23,Differentially testing soundness and precision of program analyzers.,https://github.com/Practical-Formal-Methods/adiff,True,o,f
ISSTA-2019-24,Judge: identifying, understanding, and evaluating sources of unsoundness in call graphs.,,,,
ISSTA-2019-25,Adlib: analyzer for mobile ad platform libraries.,,,,
ISSTA-2019-26,Interactive metamorphic testing of debuggers.,,,,
ISSTA-2019-27,TestMig: migrating GUI test cases from iOS to Android.,https://sites.google.com/site/testmigicse2019,True,o,f
ISSTA-2019-28,Learning user interface element interactions.,https://github.com/uds-se/droidmate-bandits,True,o,s
ISSTA-2019-29,Improving random GUI testing with image-based widget detection.,https://github.com/thomasdeanwhite/GUIdance,True,o,f
ISSTA-2019-30,Automatically testing self-driving cars with search-based procedural content generation.,,,,
ISSTA-2019-31,Semantic fuzzing with zest.,https://goo.gl/GfLRzA,True,o,t
ISSTA-2019-32,Detecting memory errors at runtime with source-level instrumentation.,https://drzchen.github.io/projects/movec,False,c,t
ISSTA-2019-33,Optimal context-sensitive dynamic partial order reduction with observers.,http://costa.fdi.ucm.es/syco,True,o,t
ISSTA-2019-34,Exploiting the laws of order in smart contracts.,https://github.com/ashgeek/Ethracer,True,o,f
ISSTA-2020-0,WEIZZ: automatic grey-box fuzzing for structured binary formats.,https://github.com/andreafioraldi/weizz-fuzzer,True,i,t
ISSTA-2020-1,Active fuzzing for testing and securing cyber-physical systems.,https://github.com/yuqiChen94/Active_fuzzer,True,o,r
ISSTA-2020-2,Learning input tokens for effective fuzzing.,https://github.com/uds-se/lFuzzer,True,t,s
ISSTA-2020-3,Fast bit-vector satisfiability.,,,,
ISSTA-2020-4,Relocatable addressing model for symbolic execution.,https://www.tau.ac.il/~davivtra/projects/ram/,True,i,f
ISSTA-2020-5,Running symbolic execution forever.,https://srg.doc.ic.ac.uk/projects/moklee/,True,o,t
ISSTA-2020-6,Can automated program repair refine fault localization? a unified debugging approach.,https://github.com/yilinglou/proFL,True,i,f
ISSTA-2020-7,Automated repair of feature interaction failures in automated driving systems.,https://bitbucket.org/anonymous83/faultrepair/src/master/,True,o,r
ISSTA-2020-8,CoCoNuT: combining context-aware neural translation models using ensemble for program repair.,https://github.com/lin-tan/CoCoNut-Artifact,True,i,f
ISSTA-2020-9,Detecting and diagnosing energy issues for mobile applications.,,,,
ISSTA-2020-10,Automated classification of actions in bug reports of mobile apps.,https://github.com/sakura182/Maca,True,i,r
ISSTA-2020-11,Data loss detector: automatically revealing data loss bugs in Android apps.,https://github.com/datalossdetector/DLD,True,i,t
ISSTA-2020-12,Reinforcement learning based curiosity-driven testing of Android applications.,https://github.com/anlalalu/Q-testing,True,i,f
ISSTA-2020-13,Effective white-box testing of deep neural networks with adaptive neuron-selection strategy.,https://github.com/kupl/ADAPT,True,i,f
ISSTA-2020-14,DeepGini: prioritizing massive tests to enhance the robustness of deep neural networks.,https://github.com/deepgini/deepgini,True,o,t
ISSTA-2020-15,Detecting and understanding real-world differential performance bugs in machine learning libraries.,,,,
ISSTA-2020-16,Higher income, larger loan? monotonicity testing of machine learning models.,https://github.com/arnabsharma91/MonotonicityChecker,True,o,t
ISSTA-2020-17,Detecting flaky tests in probabilistic and machine learning applications.,https://github.com/uiuc-arc/flash,True,i,t
ISSTA-2020-18,Scaffle: bug localization on millions of files.,,,,
ISSTA-2020-19,Abstracting failure-inducing inputs.,https://github.com/vrthra/ddset,True,c,t
ISSTA-2020-20,Debugging the performance of Maven's test isolation: experience report.,,,,
ISSTA-2020-21,Feedback-driven side-channel analysis for networked applications.,,,,
ISSTA-2020-22,Scalable analysis of interaction threats in IoT systems.,https://sites.google.com/view/iotcom/home,True,i,r
ISSTA-2020-23,DeepSQLi: deep semantic learning for testing SQL injection.,https://github.com/COLA-Laboratory/issta2020,True,i,f
ISSTA-2020-24,Dependent-test-aware regression testing techniques.,https://sites.google.com/view/test-dependence-impact;https://github.com/TestingResearchIllinois/dependent-tests-impact,True,i,r
ISSTA-2020-25,Differential regression testing for REST APIs.,,,,
ISSTA-2020-26,Empirically revisiting and enhancing IR-based test-case prioritization.,https://sites.google.com/view/ir-based-tcp,True,i,r
ISSTA-2020-27,Intermittently failing tests in the embedded systems domain.,,,,
ISSTA-2020-28,Feasible and stressful trajectory generation for mobile robots.,https://hildebrandt-carl.github.io/RobotTestGenerationArtifact/;https://github.com/hildebrandt-carl/RobotTestGeneration,True,i,f
ISSTA-2020-29,Detecting cache-related bugs in Spark applications.,https://github.com/Icysandwich/cachecheck,True,i,t
ISSTA-2020-30,Patch based vulnerability matching for binary programs.,,,,
ISSTA-2020-31,Identifying Java calls in native code via binary scanning.,https://github.com/plast-lab/native-scanner,True,o,f
ISSTA-2020-32,An empirical study on ARM disassembly tools.,https://github.com/valour01/arm_disasssembler_study,True,i,t
ISSTA-2020-33,How effective are smart contract analysis tools? evaluating smart contract static analysis tools using bug injection.,https://github.com/DependableSystemsLab/SolidiFI,True,i,f
ISSTA-2020-34,A programming model for semi-implicit parallelization of static analyses.,https://github.com/phaller/reactive-async,True,i,f
ISSTA-2020-35,Recovering fitness gradients for interprocedural Boolean flags in search-based testing.,https://sites.google.com/view/evoipf/home,True,i,r
ISSTA-2020-36,Scalable build service system with smart scheduling service.,,,,
ISSTA-2020-37,Escaping dependency hell: finding build dependency errors with the unified dependency graph.,,,,
ISSTA-2020-38,How far we have come: testing decompilation correctness of C decompilers.,https://github.com/monkbai/DecFuzzer,True,i,r
ISSTA-2020-39,Discovering discrepancies in numerical libraries.,https://github.com/ucd-plse/FPDiff,True,o,t
ISSTA-2020-40,Testing high performance numerical simulation programs: experience, lessons learned, and open issues.,https://github.com/ustbsoftlang/issta2020-hpnsp,True,o,f
ISSTA-2020-41,Functional code clone detection with syntax and semantics fusion learning.,https://github.com/shiyy123/FCDetector,True,i,f
ISSTA-2020-42,Learning to detect table clones in spreadsheets.,,,,
ISSTA-2021-1,Identifying privacy weaknesses from multi-party trigger-action integration platforms.,,,,
ISSTA-2021-2,WebEvo: taming web application evolution via detecting semantic structure changes.,https://github.com/webevoexp/webevo,True,i,r
ISSTA-2021-3,Modular call graph construction for security scanning of Node.js applications.,,,,
ISSTA-2021-4,Attack as defense: characterizing adversarial examples using robustness.,,,,
ISSTA-2021-5,Exposing previously undetectable faults in deep neural networks.,,,,
ISSTA-2021-6,DeepCrime: mutation testing of deep learning systems based on real faults.,https://github.com/dlfaults/deepcrime,True,o,r
ISSTA-2021-7,DeepHyperion: exploring the feature space of deep learning-based systems through illumination search.,https://github.com/testingautomated-usi/DeepHyperion,True,i,r
ISSTA-2021-8,Automatic test suite generation for key-points detection DNNs using many-objective search (experience paper).,,,,
ISSTA-2021-9,Efficient white-box fairness testing through gradient search.,https://github.com/LingfengZhang98/EIDIG,True,i,f
ISSTA-2021-10,DialTest: automated testing for recurrent-neural-network-driven dialogue systems.,https://github.com/cicilzx/DialTest,True,i,f
ISSTA-2021-11,AdvDoor: adversarial backdoor attack of deep learning system.,https://github.com/AdvDoor/AdvDoor,True,i,f
ISSTA-2021-12,ModelDiff: testing-based DNN similarity comparison for model reuse detection.,https://github.com/ylimit/ModelDiff,True,c,t
ISSTA-2021-13,Parema: an unpacking framework for demystifying VM-based Android packers.,https://www.dropbox.com/sh/sf59dtfsfthlv5i/AAC0wQXoJ94y_0TiTqz7un0a?dl=0,True,i,t
ISSTA-2021-14,An infrastructure approach to improving effectiveness of Android UI testing tools.,https://github.com/TOLLER-Android/main,True,i,r
ISSTA-2021-15,Semantic matching of GUI events for test reuse: are we there yet?,https://doi.org/10.5281/zenodo.4725222,True,i,r
ISSTA-2021-16,GUIDER: GUI structure and vision co-guided test script repair for Android apps.,https://github.com/SEG-DENSE/Guider,True,o,t
ISSTA-2021-17,Understanding and finding system setting-related defects in Android apps.,https://github.com/setting-defect-fuzzing/home,True,c,t
ISSTA-2021-18,HomDroid: detecting Android covert malware by social-network homophily analysis.,https://github.com/CGCL-codes/HomDroid,True,i,r
ISSTA-2021-19,Seed selection for successful fuzzing.,https://datacommons.anu.edu.au/DataCommons/rest/records/anudc:6106/data/,True,o,f
ISSTA-2021-20,Gramatron: effective grammar-aware fuzzing.,https://github.com/HexHive/Gramatron,True,i,f
ISSTA-2021-21,QFuzz: quantitative fuzzing for side channels.,https://github.com/yannicnoller/qfuzz,True,o,t
ISSTA-2021-22,SAND: a static analysis approach for detecting SQL antipatterns.,https://github.com/USC-SQL/SAND,True,o,t
ISSTA-2021-23,Semantic table structure identification in spreadsheets.,,,,
ISSTA-2021-24,Runtime detection of memory errors with smart status.,https://github.com/drzchen/movec,True,o,t
ISSTA-2021-25,UAFSan: an object-identifier-based dynamic approach for detecting use-after-free vulnerabilities.,,,,
ISSTA-2021-26,Fuzzing SMT solvers via two-dimensional input space exploration.,https://smtfuzz.github.io/,True,o,t
ISSTA-2021-27,Boosting symbolic execution via constraint solving time prediction (experience paper).,https://github.com/Artisan-Lab/SMTimer,True,i,t
ISSTA-2021-28,Synthesize solving strategy for symbolic execution.,,,,
ISSTA-2021-29,Type and interval aware array constraint solving for symbolic execution.,,,,
ISSTA-2021-30,Grammar-agnostic symbolic execution by token symbolization.,https://github.com/gadse-bug/bugs,True,o,f
ISSTA-2021-31,Interval constraint-based mutation testing of numerical specifications.,https://github.com/clothildejeangoudoux/Magneto,True,i,f
ISSTA-2021-32,Predoo: precision testing of deep learning operators.,https://github.com/predoodl/predoo,True,o,f
ISSTA-2021-33,TERA: optimizing stochastic regression tests in machine learning projects.,https://github.com/uiuc-arc/tera,True,i,t
ISSTA-2021-34,Deep just-in-time defect prediction: how far are we?,https://github.com/ZZR0/ISSTA21-JIT-DP,True,i,t
ISSTA-2021-35,Fixing dependency errors for Python build reproducibility.,https://github.com/ucd-plse/PyDFix,True,o,t
ISSTA-2021-36,Test-case prioritization for configuration testing.,https://github.com/xlab-uiuc/ctest_prio_art,True,i,t
ISSTA-2021-37,The impact of tool configuration spaces on the evaluation of configurable taint analysis for Android.,https://doi.org/10.5281/zenodo.4729325,True,i,r
ISSTA-2021-38,Challenges and opportunities: an in-depth empirical study on configuration error injection testing.,https://github.com/ConfEIT-code/CeitInspector,True,i,f
ISSTA-2021-39,Empirically evaluating readily available information for regression test optimization in continuous integration.,https://doi.org/10.6084/m9.figshare.13656443,True,i,r
ISSTA-2021-40,Toward optimal mc/dc test case generation.,https://doi.org/10.6084/m9.figshare.13650242.v1,True,o,r
ISSTA-2021-41,Log-based slicing for system-level test cases.,,,,
ISSTA-2021-42,Model-based testing of networked applications.,,,,
ISSTA-2021-43,Validating static warnings via testing code fragments.,https://sites.google.com/view/helium-2021,True,i,t
ISSTA-2021-44,Continuous test suite failure prediction.,https://zenodo.org/record/4742337,True,i,f
ISSTA-2021-45,Empirical evaluation of smart contract testing: what is the best choice?,https://github.com/renardbebe/Smart-Contract-Benchmark-Suites,True,i,f
ISSTA-2021-46,iDEV: exploring and exploiting semantic deviations in ARM instruction processing.,,,,
ISSTA-2021-47,RAProducer: efficiently diagnose and reproduce data race bugs for binaries via trace analysis.,,,,
ISSTA-2021-48,A lightweight framework for function name reassignment based on large-scale stripped binaries.,,,,
ISSTA-2021-49,Finding data compatibility bugs with JSON subschema checking.,https://github.com/ibm/jsonsubschema,True,i,t
ISSTA-2021-50,Automated patch backporting in Linux (experience paper).,https://github.com/rshariffdeen/FixMorph,True,i,t
ISSTA-2021-51,Faster, deeper, easier: crowdsourcing diagnosis of microservice kernel failure from user space.,https://github.com/PanYicheng/dycause_rca,True,o,f
ISSTA-2022-0,jTrans: jump-aware transformer for binary code similarity detection.,https://github.com/vul337/jTrans,True,i,t
ISSTA-2022-1,FDG: a precise measurement of fault diagnosability gain of test cases.,https://github.com/agb94/FDG-artifact,True,i,t
ISSTA-2022-2,TeLL: log level suggestions via modeling multi-level code block information.,https://github.com/ljiahao/TeLL,True,c,t
ISSTA-2022-3,An extensive study on pre-trained models for program understanding and generation.,https://github.com/ZZR0/ISSTA22-CodeStudy,True,i,r
ISSTA-2022-4,Metamorphic relations via relaxations: an approach to obtain oracles for action-policy testing.,https://github.com/Practical-Formal-Methods/pi-fuzz,True,i,t
ISSTA-2022-5,Hunting bugs with accelerated optimal graph vertex matching.,,,,
ISSTA-2022-6,Using pre-trained language models to resolve textual and semantic merge conflicts (experience paper).,https://doi.org/10.5281/zenodo.5911767,True,o,t
ISSTA-2022-7,Combining solution reuse and bound tightening for efficient analysis of evolving systems.,https://sites.google.com/view/operation-bounder/home,True,o,f
ISSTA-2022-8,On the use of evaluation measures for defect prediction studies.,https://github.com/SOLAR-group/dpevalmeasures,True,o,r
ISSTA-2022-9,Evolution-aware detection of order-dependent flaky tests.,,,,
ISSTA-2022-10,ε-weakened robustness of deep neural networks.,https://github.com/YANG-Yuting/Epsilon-weakened-Robustness-of-Deep-Neural-Networks,True,o,f
ISSTA-2022-11,Simple techniques work surprisingly well for neural network test prioritization and active learning (replicability study).,https://github.com/testingautomated-usi/simple-tip,True,o,s
ISSTA-2022-12,Improving cross-platform binary analysis using representation learning via graph alignment.,https://github.com/yonsei-cysec/XBA;https://sites.google.com/view/xba-intro,True,o,s
ISSTA-2022-13,BET: black-box efficient testing for convolutional neural networks.,,,,
ISSTA-2022-14,DocTer: documentation-guided fuzzing for testing deep learning API functions.,https://github.com/lin-tan/DocTer,True,i,r
ISSTA-2022-15,ASRTest: automated testing for deep-neural-network-driven speech recognition systems.,https://github.com/SATE-Lab/ASRTest,True,i,r
ISSTA-2022-16,AEON: a method for automatic evaluation of NLP test cases.,https://github.com/CUHK-ARISE/AEON,True,i,f
ISSTA-2022-17,Human-in-the-loop oracle learning for semantic bugs in string processing programs.,https://github.com/charakageethal/grammar2fix,True,i,t
ISSTA-2022-18,HybridRepair: towards annotation-efficient repair for deep learning models.,https://github.com/cure-lab/HybridRepair,True,a,t
ISSTA-2022-19,Cross-lingual transfer learning for statistical type inference.,https://sites.google.com/view/cltl4sti/home,True,i,r
ISSTA-2022-20,Unicorn: detect runtime errors in time-series databases with hybrid input synthesis.,,,,
ISSTA-2022-21,On the use of mutation analysis for evaluating student test suite quality.,https://doi.org/10.5281/zenodo.6564504,True,o,r
ISSTA-2022-22,Test mimicry to assess the exploitability of library vulnerabilities.,https://github.com/soarsmu/transfer,True,o,f
ISSTA-2022-23,Automated test generation for REST APIs: no time to rest yet.,https://bit.ly/RESTTestToolsStudy;https://github.com/codingsoo/REST_GO,True,o,s
ISSTA-2022-24,Finding bugs in Gremlin-based graph database systems via Randomized differential testing.,https://github.com/tcse-iscas/Grand,True,i,t
ISSTA-2022-25,RegMiner: towards constructing a large regression dataset from code evolution history.,https://github.com/SongXueZhi/RegMiner,True,i,t
ISSTA-2022-26,One step further: evaluating interpreters using metamorphic testing.,https://zenodo.org/record/6573008#.YoxYW6hBx3j,True,i,f
ISSTA-2022-27,SnapFuzz: high-throughput fuzzing of network applications.,https://doi.org/10.5281/zenodo.6529828,True,o,s
ISSTA-2022-28,Almost correct invariants: synthesizing inductive invariants by fuzzing proofs.,https://doi.org/10.5281/zenodo.6534229,True,o,r
ISSTA-2022-29,SLIME: program-sensitive energy allocation for fuzzing.,https://github.com/diewufeihong/SLIME,True,i,t
ISSTA-2022-30,MDPFuzz: testing models solving Markov decision processes.,https://sites.google.com/view/mdpfuzz;https://github.com/Qi-Pang/MDPFuzz,True,i,t
ISSTA-2022-31,TensileFuzz: facilitating seed input generation in fuzzing via string constraint solving.,https://github.com/TensileFuzz/TensileFuzz,True,i,r
ISSTA-2022-32,PrIntFuzz: fuzzing Linux drivers via automated virtual device simulation.,https://github.com/vul337/PrIntFuzz,True,i,f
ISSTA-2022-33,Efficient greybox fuzzing of applications in Linux-based IoT devices via enhanced user-mode emulation.,https://doi.org/10.5281/zenodo.6580348,True,o,s
ISSTA-2022-34,Understanding device integration bugs in smart home system.,https://github.com/tcse-iscas/iBugs,True,i,t
ISSTA-2022-35,A large-scale empirical analysis of the vulnerabilities introduced by third-party components in IoT firmware.,https://github.com/BBge/FirmSecDataset,True,i,t
ISSTA-2022-36,Deadlock prediction via generalized dependency.,,,,
ISSTA-2022-37,Automated testing of image captioning systems.,,,,
ISSTA-2022-38,LiRTest: augmenting LiDAR point clouds for automated testing of autonomous driving systems.,https://github.com/meng2180/LiRTest,True,i,f
ISSTA-2022-39,Detecting multi-sensor fusion errors in advanced driver-assistance systems.,https://github.com/AIasd/FusED,True,i,t
ISSTA-2022-40,Precise and efficient atomicity violation detection for interrupt-driven programs via staged path pruning.,,,,
ISSTA-2022-41,Path-sensitive code embedding via contrastive learning for software vulnerability detection.,,,,
ISSTA-2022-42,A large-scale study of usability criteria addressed by static analysis tools.,https://sites.google.com/view/datatoolsurvey/,True,i,t
ISSTA-2022-43,An empirical study on the effectiveness of static C code analyzers for vulnerability detection.,https://doi.org/10.5281/zenodo.6515687,True,i,t
ISSTA-2022-44,Testing Dafny (experience paper).,https://github.com/dafny-lang/xdsmith,True,o,t
ISSTA-2022-45,Combining static analysis error traces with dynamic symbolic execution (experience paper).,https://doi.org/10.5281/zenodo.6539575,True,o,s
ISSTA-2022-46,The raise of machine learning hyperparameter constraints in Python code.,https://doi.org/10.5281/zenodo.6534173,True,o,r
ISSTA-2022-47,PermDroid: automatically testing permission-related behaviour of Android applications.,https://github.com/wsong-nj/PermDroid,True,i,f
ISSTA-2022-48,Detecting and fixing data loss issues in Android apps.,https://github.com/iFixDataLoss/iFixDataloss22,True,i,t
ISSTA-2022-49,Automatically detecting API-induced compatibility issues in Android apps: a comparative analysis (replicability study).,https://zenodo.org/record/6516441,True,i,t
ISSTA-2022-50,NCScope: hardware-assisted analyzer for native code in Android apps.,https://doi.org/10.5281/zenodo.6534525,True,i,t
ISSTA-2022-51,Detecting resource utilization bugs induced by variant lifecycles in Android.,https://github.com/SEG-DENSE/VALA,True,i,f
ISSTA-2022-52,Patch correctness assessment in automated program repair based on the impact of patches on production and test code.,https://github.com/ali-ghanbari/shibboleth,True,i,r
ISSTA-2022-53,ATR: template-based repair for Alloy specifications.,https://github.com/guolong-zheng/atmprep,True,a,t
ISSTA-2022-54,CIRCLE: continual repair across programming languages.,https://github.com/2022CIRCLE/CIRCLE,True,i,f
ISSTA-2022-55,Program vulnerability repair via inductive inference.,https://github.com/yuntongzhang/vulnfix,True,o,s
ISSTA-2022-56,WASAI: uncovering vulnerabilities in Wasm smart contracts.,https://github.com/wasai-project/wasai,True,i,t
ISSTA-2022-57,Finding permission bugs in smart contracts with role mining.,https://doi.org/10.21979/N9/MBHBCI,True,i,t
ISSTA-2022-58,eTainter: detecting gas-related vulnerabilities in smart contracts.,https://github.com/DependableSystemsLab/eTainter,True,i,r
ISSTA-2022-59,Park: accelerating smart contract vulnerability detection via parallel-fork symbolic execution.,,,,
ISSTA-2022-60,SmartDagger: a bytecode-based static analysis approach for detecting cross-contract vulnerability.,,,,
FSE-2017-3,Reflections on the REST architectural style and "principled design of the modern web architecture" (impact paper award).,,,,
FSE-2017-4,A fast causal profiler for task parallel programs.,https://github.com/rutgers-apl/TaskProf,True,c,s
FSE-2017-5,On the scalability of Linux kernel maintainers' work.,https://github.com/minghuizhou/maintainerAnalysis,True,c,s
FSE-2017-6,Modeling and verification of evolving cyber-physical spaces.,,,,
FSE-2017-7,Easy over hard: a case study on deep learning.,https://github.com/WeiFoo/EasyOverHard,True,i,f
FSE-2017-8,Finding near-optimal configurations in product lines by random sampling.,,,,
FSE-2017-9,Revisiting unsupervised learning for defect prediction.,https://github.com/WeiFoo/RevisitUnsupervised,True,o,f
FSE-2017-10,Loopster: static loop termination analysis.,https://sites.google.com/site/looptermination;https://github.com/mmjb/T2,True,o,r
FSE-2017-11,CodeCarbonCopy.,,,,
FSE-2017-12,The power of "why" and "why not": enriching scenario exploration with provenance.,http://cs.brown.edu/research/plt/dl/fse2017/,True,i,f
FSE-2017-13,Where is the bug and how is it fixed? an experiment with practitioners.,https://dbgbench.github.io;https://github.com/dbgbench/dbgbench.github.io,False,c,s
FSE-2017-14,Understanding misunderstandings in source code.,https://atomsofconfusion.com,True,i,f
FSE-2017-15,Measuring neural efficiency of program comprehension.,https://github.com/brains-on-code/paper-esec-fse-2017/,True,i,f
FSE-2017-16,Bayesian specification learning for finding API usage errors.,,,,
FSE-2017-17,Synergistic debug-repair of heap manipulations.,,,,
FSE-2017-18,Failure-directed program trimming.,https://mariachris.github.io/FSE2017/benchmarks.zip,True,o,f
FSE-2017-19,Why modern open source projects fail.,,,,
FSE-2017-20,Trade-offs in continuous integration: assurance, security, and flexibility.,http://cope.eecs.oregonstate.edu/CI_Tradeo_x001D_s,False,i,s
FSE-2017-21,µDroid: an energy-aware mutation testing framework for Android.,http://www.ics.uci.edu/~seal/projects/mu_droid/index.html,False,i,r
FSE-2017-22,PATDroid: permission-aware GUI testing of Android.,http://www.ics.uci.edu/~seal/projects/patdroid/,False,i,r
FSE-2017-23,Enabling mutation testing for Android apps.,,,,
FSE-2017-24,Guided, stochastic model-based GUI testing of Android apps.,https://tingsu.github.io/files/stoat.html;https://github.com/tingsu/Stoat,False,o,r
FSE-2017-25,Using bad learners to find good configurations.,https://github.com/ai-se/Reimplement/tree/cleaned_version,True,i,f
FSE-2017-26,Attributed variability models: outside the comfort zone.,https://github.com/se-passau/thor-avm,True,i,s
FSE-2017-27,Kmax: finding all configurations of Kbuild makefiles statically.,https://github.com/paulgazz/kmax,True,i,f
FSE-2017-28,Is there a mismatch between real-world feature models and product-line research?,https://github.com/AlexanderKnueppel/is-there-a-mismatch,True,c,f
FSE-2017-29,Adaptively generating high quality fixes for atomicity violations.,,,,
FSE-2017-30,AtexRace: across thread and execution sampling for in-house race detection.,,,,
FSE-2017-31,Symbolic execution of programmable logic controller code.,,,,
FSE-2017-32,Thread-modular static analysis for relaxed memory models.,,,,
FSE-2017-33,ARTINALI: dynamic invariant detection for cyber-physical system security.,https://github.com/karthikp-ubc/Artinali,True,o,r
FSE-2017-34,A symbolic justice violations transition system for unrealizable GR(1) specifications.,http://smlab.cs.tau.ac.il/syntech/jvts/,True,o,r
FSE-2017-35,Automated control of multiple software goals using multiple actuators.,http://www.martinamaggio.com/papers/fse17/,True,i,f
FSE-2017-36,Why do developers use trivial packages? an empirical case study on npm.,http://das.encs.concordia.ca/publications/npm-survey-data/,False,i,f
FSE-2017-37,Detecting missing information in bug descriptions.,https://seers.utdallas.edu/projects/missing-info-in-bugs,False,i,r
FSE-2017-38,Continuous variable-specific resolutions of feature interactions.,https://ece.uwaterloo.ca/~mhzibaee/fse,False,o,f
FSE-2017-39,Model-level, platform-independent debugging in the context of the model-driven development of real-time systems.,https://github.com/moji1/MDebugger,True,o,f
FSE-2017-40,Cooperative kernels: GPU multitasking for blocking algorithms.,,,,
FSE-2017-41,Toward full elasticity in distributed static analysis: the case of callgraph analysis.,https://github.com/too4words/Call-Graph-Builder-DotNet,True,o,f
FSE-2017-42,Probabilistic model checking of perturbed MDPs with applications to cloud computing.,,,,
FSE-2017-43,Understanding the impact of refactoring on smells: a longitudinal study of 23 software projects.,http://diegocedrim.github.io/fse-2017-data/,True,o,r
FSE-2017-44,Cimplifier: automatically debloating containers.,,,,
FSE-2017-45,Craig vs. Newton in software model checking.,,,,
FSE-2017-46,Fairness testing: testing software for discrimination.,https://github.com/LASER-UMASS/Themis,True,i,t
FSE-2017-47,The care and feeding of wild-caught mutants.,https://github.com/d-bingham/wildcaughtmutants,True,o,t
FSE-2017-48,QTEP: quality-aware test case prioritization.,http://asset.uwaterloo.ca/qtep/,False,o,r
FSE-2017-49,Constraint normalization and parameterized caching for quantitative program analysis.,https://github.com/vlab-cs-ucsb/cashew/,True,o,s
FSE-2017-50,Generalized observational slicing for tree-represented modelling languages.,,,,
FSE-2017-51,On evidence preservation requirements for forensic-ready systems.,https://github.com/lpasquale/kEEPER/tree/keeper_CLI,True,o,f
FSE-2017-52,BDCI: behavioral driven conflict identification.,http://www.lta.disco.unimib.it/ tools/bdci,False,i,t
FSE-2017-53,NoFAQ: synthesizing command repairs from examples.,,,,
FSE-2017-54,S3: syntax- and semantic-guided repair synthesis via programming by examples.,,,,
FSE-2017-55,Counterexample-guided approach to finding numerical invariants.,,,,
FSE-2017-56,Discovering relational specifications.,,,,
FSE-2017-57,Steelix: program-state based binary fuzzing.,,,,
FSE-2017-58,CodeMatch: obfuscation won't conceal your repackaged app.,http://www.st.informatik.tu-darmstadt.de/artifacts/codematch/,True,o,r
FSE-2017-59,A compiler and verifier for page access oblivious computation.,,,,
FSE-2017-60,Automatic generation of inter-component communication exploits for Android applications.,http://tiny.cc/letterbomb,False,i,r
FSE-2017-61,OASIS: prioritizing static analysis warnings for Android apps based on app user reviews.,,,,
FSE-2017-62,Recovering clear, natural identifiers from obfuscated JS names.,http://jsnaughty.org,False,a,t
FSE-2017-63,DESCRY: reproducing system-level concurrency failures.,,,,
FSE-2017-64,Reproducing concurrency failures from crash stacks.,,,,
FSE-2017-65,Automatically analyzing groups of crashes for finding correlations.,,,,
FSE-2017-66,Automatic inference of code transforms for patch generation.,http://groups.csail.mit.edu/pac/;patchgen/,False,i,t
FSE-2017-67,A feasibility study of using automated program repair for introductory programming assignments.,https://github.com/jyi/ITSP,True,i,t
FSE-2017-68,Automatically diagnosing and repairing error handling bugs in C.,,,,
FSE-2017-69,Are deep neural networks the best choice for modeling source code?,https://github.com/SLP-Team/SLP-Core,True,i,t
FSE-2017-70,Understanding the impact of support for iteration on code search.,,,,
FSE-2017-71,LAMP: data provenance for graph based machine learning algorithms through derivative computation.,https://github.com/PythonLAMP/LAMP,True,o,r
FSE-2017-72,More accurate recommendations for method-level changes.,https://github.com/FAU-Inf2/ARES,True,c,t
FSE-2017-73,Regression test selection across JVM boundaries.,,,,
FSE-2017-74,Measuring the cost of regression testing in practice: a study of Java projects using continuous integration.,https://github.com/rtholmes/RealTestFailures/,True,c,f
FSE-2017-75,Better test cases for better automated program repair.,http://asset.uwaterloo.ca/tests4repair,False,i,s
FSE-2019-79,Predicting pull request completion time: a case study on large scale cloud services.,,,,
FSE-2019-80,TERMINATOR: better automated UI test case prioritization.,https://github.com/ai-se/Data-for-automated-UI-testing-from-LexisNexis,True,i,f
FSE-2019-81,Risks and assets: a qualitative study of a software ecosystem in the mining industry.,,,,
FSE-2019-82,Using microservices for non-intrusive customization of multi-tenant SaaS.,,,,
FSE-2019-83,Predicting breakdowns in cloud services (with SPIKE).,,,,
FSE-2019-84,DeepDelta: learning to repair compilation errors.,,,,
FSE-2019-85,WhoDo: automating reviewer suggestions at scale.,,,,
FSE-2019-86,An IR-based approach towards automated integration of geo-spatial datasets in map-based software systems.,,,,
FSE-2019-87,Code coverage at Google.,,,,
FSE-2019-88,When deep learning met code search.,https://drive.google.com/drive/folders/1GZYLT_lzhlVczXjD6dgwVUvDDPHMB6L7,True,o,f
FSE-2019-89,FUDGE: fuzz driver generation at scale.,,,,
FSE-2019-90,Industry practice of coverage-guided enterprise Linux kernel fuzzing.,,,,
FSE-2019-91,Architectural decision forces at work: experiences in an industrial consultancy setting.,,,,
FSE-2019-92,The role of limitations and SLAs in the API industry.,,,,
FSE-2019-93,Evaluating model testing and model checking for finding requirements violations in Simulink models.,https://www.dropbox.com/sh/i9n764r1q6vjkxz/AADsgN-gvX-ystJPMDVVjYhga?dl=0,True,i,r
FSE-2019-94,Model checking a C++ software framework: a case study.,https://doi.org/10.5281/zenodo.3258225,True,i,f
FSE-2019-95,Evolving with patterns: a 31-month startup experience report.,,,,
FSE-2018-2,CloudRaid: hunting concurrency bugs in the cloud via log-mining.,,,,
FSE-2018-3,Testing multithreaded programs via thread speed control.,https://midwinter1993.github.io/Schnauzer/;https://github.com/midwinter1993/Schnauzer,False,o,f
FSE-2018-4,Data race detection on compressed traces.,https://github.com/umangm/ziptrack,True,o,r
FSE-2018-5,Practical AJAX race detection for JavaScript web applications.,http://www.brics.dk/ajaxracer/;https://github.com/cs-au-dk/ajaxracer,False,o,t
FSE-2018-6,Using finite-state models for log differencing.,http://smlab.cs.tau.ac.il/xlog/#FSE18,True,i,r
FSE-2018-7,Identifying impactful service system problems via log analysis.,https://github.com/logpai/Log3C,True,i,f
FSE-2018-8,Learning to sample: exploiting similarities across environments to learn performance models for configurable systems.,https://github.com/cmu-mars/model-learner/tree/tutorial,True,o,t
FSE-2018-9,Performance comprehension at WiredTiger.,https://goo.gl/DdwU7u,True,o,f
FSE-2018-10,MemFix: static analysis-based repair of memory deallocation errors for C.,http://prl.korea.ac.kr/MemFix,True,i,f
FSE-2018-11,RefiNym: using names to refine types.,https://github.com/askdash/refinym,True,i,t
FSE-2018-12,Darwinian data structure selection.,http://darwinianoptimiser.com,False,i,t
FSE-2018-13,Scalability-first pointer analysis with self-tuning context-sensitivity.,http://www.brics.dk/scaler/;https://github.com/silverbullettt/scaler,False,o,t
FSE-2018-14,DeepSim: deep learning code functional similarity.,https://github.com/parasol-aser/deepsim,True,i,f
FSE-2018-15,Deep learning type inference.,https://github.com/DeepTyper/DeepTyper,True,o,t
FSE-2018-16,Code vectors: understanding programs through embedded abstracted symbolic traces.,https://github.com/jjhenkel/c2ocaml;https://github.com/jjhenkel/lsee;https://github.com/jjhenkel/code-vectors-artifact,False,c,s
FSE-2018-17,MODE: automated neural network model debugging via state differential analysis and input selection.,https://github.com/dnnmode/buggymodels,True,i,r
FSE-2018-18,Towards a theory of software development expertise.,,,,
FSE-2018-19,What makes a code change easier to review: an empirical investigation on code change reviewability.,https://doi.org/10.5281/zenodo.1323659,True,o,r
FSE-2018-20,Singularity: pattern fuzzing for worst case complexity.,https://github.com/MrVPlusOne/Singularity,True,i,r
FSE-2018-21,Bug synthesis: challenging bug-finding tools with deep faults.,,,,
FSE-2018-22,Modify, enhance, select: co-evolution of combinatorial models and test plans.,http://smlab.cs.tau.ac.il/ctd/,True,o,t
FSE-2018-23,The impact of regular expression denial of service (ReDoS) in practice: an empirical study at the ecosystem scale.,https://doi.org/10.5281/zenodo.1294300,True,c,s
FSE-2018-24,FraudDroid: automated ad fraud detection for Android apps.,https://github.com/FraudDroid-mobile-ad-fraud/ExperimentResults,True,i,s
FSE-2018-25,AppFlow: using machine learning to synthesize robust, reusable UI tests.,https://github.com/columbia/appflow;https://github.com/columbia/appflow-dataset,False,i,t
FSE-2018-26,Winning the app production rally.,,,,
FSE-2018-27,One size does not fit all: an empirical study of containerized continuous deployment workflows.,https://github.com/yangzhangs/cd_replication,True,i,s
FSE-2018-28,Be careful of when: an empirical study on time-related misuse of issue tracking data.,https://github.com/fayekia/FSE_2018,True,c,s
FSE-2018-29,Do the dependency conflicts in my project matter?,https://deccadc.github.io/fse18/;https://github.com/DeccaDC/Decca,False,i,f
FSE-2018-30,Do Android taint analysis tools keep their promises?,https://foellix.github.io/ReproDroid/#droidbench;https://github.com/FoelliX/ReproDroid,True,i,f
FSE-2018-31,Neural-augmented static analysis of Android communication.,,,,
FSE-2018-32,Oreo: detection of clones in the twilight zone.,,,,
FSE-2018-33,Concurrency verification with maximal path causality.,https://github.com/parasol-aser/MPC,True,i,r
FSE-2018-34,Adversarial symbolic execution for detecting concurrency-related cache timing leaks.,,,,
FSE-2018-35,Symbolic execution with existential second-order constraints.,http://angelix.io/second-order.html,True,o,f
FSE-2018-36,Parameterized model counting for string and numeric constraints.,https://github.com/vlab-cs-ucsb/ABC,True,o,f
FSE-2018-37,NAR-miner: discovering negative association rules from code for bug detection.,,,,
FSE-2018-38,Path-based function embedding and its application to error-handling specification mining.,,,,
FSE-2018-39,Putback-based bidirectional model transformations.,https://bitbucket.org/ustbmde/morel/wiki/Home,True,o,f
FSE-2018-40,Model transformation languages under a magnifying glass: a controlled experiment with Xtend, ATL, and QVT.,,,,
FSE-2018-41,Applications of psychological science for actionable analytics.,https://github.com/ai-se/FFT_Jack,True,i,t
FSE-2018-42,A novel automated approach for software effort estimation based on data augmentation.,http://www.cs.le.ac.uk/people/llm11/,False,o,h
FSE-2018-43,Predicting Node failure in cloud service systems.,,,,
FSE-2018-44,Detecting speech act types in developer question/answer conversations during bug repair.,https://tinyurl.com/yadfpojd,True,c,s
FSE-2018-45,Visual web test repair.,https://github.com/saltlab/vista,True,i,r
FSE-2018-46,Syntax-guided synthesis of Datalog programs.,https://github.com/XujieSi/fse18-artifact-183,True,o,f
FSE-2018-47,Large-scale study of substitutability in the presence of effects.,http://design.cs.iastate.edu/papers/FSE-18/,True,i,s
FSE-2018-48,An empirical study on crash recovery bugs in large-scale distributed systems.,,,,
FSE-2018-49,Complementing global and local contexts in representing API descriptions to improve API retrieval tasks.,,,,
FSE-2018-50,Phys: probabilistic physical unit assignment and inconsistency detection.,https://zenodo.org/record/1310129,True,o,t
FSE-2018-51,Testing probabilistic programming systems.,https://probfuzz.com;https://github.com/uiuc-arc/probfuzz,False,i,t
FSE-2018-52,Verifying the long-run behavior of probabilistic system models in the presence of uncertainty.,https://github.com/mboehme/mboehme.github.io,True,o,t
FSE-2018-53,Automated patch extraction via syntax- and semantics-aware Delta debugging on source code changes.,https://hub.docker.com/r/codecontinuum/,True,c,s
FSE-2018-54,Feedback-directed differential testing of interactive debuggers.,https://github.com/sola-da/DifferentialDebuggerTesting,True,i,t
FSE-2018-55,Improving IR-based bug localization with context-aware query reformulation.,https://goo.gl/NTUqcK,False,o,r
FSE-2018-56,How should compilers explain problems to developers?,,,,
FSE-2018-57,Ecosystem-level determinants of sustained activity in open-source projects: a case study of the PyPI ecosystem.,https://zenodo.org/record/1297925,True,o,f
FSE-2018-58,Optimizing test prioritization via test distribution analysis.,https://github.com/JunjieChen/PTP,True,c,t
FSE-2018-59,How well are regular expressions tested in the wild?,,,,
FSE-2018-60,Which generated test failures are fault revealing? prioritizing failures based on inferred precondition violations using PAF.,https://github.com/PAMSE/PAFAnalysis,True,i,t
FSE-2018-61,Detection of energy inefficiencies in Android wear watch faces.,https://presto-osu.github.io/fse18,True,o,s
FSE-2018-62,Stochastic energy optimization for mobile GPS applications.,https://github.com/pl-aeneas/aeneas,True,i,s
FSE-2019-96,Bridging the gap between ML solutions and their business requirements using feature interactions.,,,,
FSE-2019-97,Design thinking in practice: understanding manifestations of design thinking in software engineering.,,,,
FSE-2020-101,A first look at the integration of machine learning models in complex autonomous driving systems: a case study on Apollo.,,,,
FSE-2020-102,Adapting bug prediction models to predict reverted commits at Wayfair.,,,,
FSE-2020-103,Can microtask programming work in industry?,,,,
FSE-2020-104,Change impact analysis in Simulink designs of embedded systems.,,,,
FSE-2020-105,Clustering test steps in natural language toward automating test automation.,,,,
FSE-2020-106,Efficient customer incident triage via linking with system incidents.,,,,
FSE-2020-107,Effort-aware just-in-time defect identification in practice: a case study at Alibaba.,,,,
FSE-2020-108,Enhancing the interoperability between deep learning frameworks by model conversion.,https://github.com/microsoft/MMdnn,True,i,r
FSE-2020-109,Establishing key performance indicators for measuring software-development processes at a large organization.,,,,
FSE-2020-110,Estimating GPU memory consumption of deep learning models.,,,,
FSE-2020-111,Exempla gratis (E.G.): code examples for free.,,,,
FSE-2020-112,Fireteam: a small-team development practice in industry.,https://doi.org/10.6084/m9.figshare.9938207,True,o,f
FSE-2019-3,Concolic testing for models of state-based systems.,,,,
FSE-2019-4,Target-driven compositional concolic testing with function summary refinement for effective bug detection.,https://sites.google.com/view/focalfse19,True,i,t
FSE-2019-5,Generating automated and online test oracles for Simulink models with continuous and uncertain behaviors.,https://github.com/SNTSVV/SOCRaTEs,True,i,r
FSE-2019-6,Lifting Datalog-based analyses to software product lines.,,,,
FSE-2019-7,An empirical study of real-world variability bugs detected by variability-oblivious tools.,https://github.com/paulgazz/kconfig_case_studies/releases/tag/v1.0,True,i,f
FSE-2019-8,Principles of feature modeling.,https://bitbucket.org/easelab/featuremodelingprinciples,True,i,f
FSE-2019-9,Understanding GCC builtins to develop better tools.,https://github.com/jku-ssw/gcc-builtin-study,True,i,t
FSE-2019-10,Assessing the quality of the steps to reproduce in bug reports.,,,,
FSE-2019-11,A learning-based approach for automatic construction of domain glossary from source code and documentation.,,,,
FSE-2019-12,On using machine learning to identify knowledge in API reference documentation.,,,,
FSE-2019-13,Generating query-specific class API summaries.,https://fudanselab.github.io/Research-ESEC-FSE2019-APIKGSummary/,True,o,r
FSE-2019-14,Semantic relation based expansion of abbreviations.,https://github.com/4DataShare/AbbExpansion,True,o,t
FSE-2019-15,Diversity-based web test generation.,https://github.com/matteobiagiola/FSE19-submission-material-DIG,True,i,r
FSE-2019-16,Web test dependency detection.,https://github.com/matteobiagiola/FSE19-submission-material-TEDD,True,i,r
FSE-2019-17,Testing scratch programs automatically.,https://github.com/se2p/artifact-esecfse2019,True,o,t
FSE-2019-18,A large-scale empirical study of compiler errors in continuous integration.,https://compilererrorinci.github.io,False,c,t
FSE-2019-19,A statistics-based performance testing methodology for cloud applications.,http://doi.org/10.6084/m9.figshare.7749356,True,o,t
FSE-2019-20,How bad can a bug get? an empirical analysis of software failures in the OpenStack cloud computing platform.,https://doi.org/10.6084/m9.figshare.7731629;https://doi.org/10.6084/m9.figshare.7732268;https://doi.org/10.6084/m9.figshare.8242877,True,o,s
FSE-2019-21,Towards more efficient meta-heuristic algorithms for combinatorial test generation.,,,,
FSE-2019-22,Compiler bug isolation via effective witness test program generation.,https://github.com/JunjieChen/DiWi,True,o,t
FSE-2019-23,Concolic testing with adaptively changing search heuristics.,https://github.com/kupl/Chameleon,True,i,f
FSE-2019-24,Symbolic execution-driven extraction of the parallel execution plans of Spark applications.,https://github.com/seepep/promocalls,True,o,f
FSE-2019-25,Generating effective test cases for self-driving cars from police reports.,https://github.com/SoftLegend/AC3R-Demo,True,i,t
FSE-2019-26,Preference-wise testing for Android applications.,https://github.com/Prefest2018/Prefest,True,o,f
FSE-2019-27,Bisecting commits and modeling commit risk during testing.,,,,
FSE-2019-28,White-box testing of big data analytics with complex user-defined functions.,https://github.com/maligulzar/BigTest,True,o,f
FSE-2019-29,Empirical review of Java program repair tools: a large-scale experiment on 2, 141 bugs and 23, 551 repair attempts.,,,,
FSE-2019-30,iFixR: bug report driven program repair.,https://github.com/SerVal-DTF/iFixR,True,c,t
FSE-2019-31,Exploring and exploiting the correlations between bug-inducing and bug-fixing commits.,https://github.com/justinwm/InduceBenchmark,True,o,f
FSE-2019-32,Effects of explicit feature traceability on program comprehension.,https://doi.org/10.5281/zenodo.3264974,True,i,f
FSE-2019-33,What the fork: a study of inefficient and efficient forking practices in social coding.,,,,
FSE-2019-34,ServDroid: detecting service usage inefficiencies in Android applications.,https://github.com/wsong-nj/ServDroid,True,i,f
FSE-2019-35,Together strong: cooperative Android app analysis.,,,,
FSE-2019-36,A framework for writing trigger-action todo comments in executable format.,http://cozy.ece.utexas.edu/trigit,False,o,r
FSE-2019-37,Decomposing the rationale of code commits: the software developer's perspective.,https://doi.org/10.5281/zenodo.3261842,True,o,s
FSE-2019-38,Model-based testing of breaking changes in Node.js libraries.,https://brics.dk/noregrets/,True,i,t
FSE-2019-39,Monitoring-aware IDEs.,,,,
FSE-2019-40,Going big: a large-scale study on what big data developers ask.,https://tinyurl.com/y4rw9w2n,True,i,t
FSE-2019-41,Why aren't regular expressions a lingua franca? an empirical study on the re-use and portability of regular expressions.,https://doi.org/10.5281/zenodo.3257777;https://github.com/SBULeeLab/LinguaFranca-FSE19/tree/master,True,o,s
FSE-2019-42,Nodest: feedback-driven static analysis of Node.js applications.,,,,
FSE-2019-43,Effective error-specification inference via domain-knowledge expansion.,https://github.com/ucd-plse/eesi,True,o,t
FSE-2019-44,DeepStellar: model-based quantitative analysis of stateful deep learning systems.,https://sites.google.com/view/deepstellar/home,True,o,r
FSE-2019-45,REINAM: reinforcement learning for input-grammar inference.,https://sites.google.com/site/reinamlearning/,True,i,f
FSE-2019-46,Boosting operational DNN testing efficiency through conditioning.,https://github.com/Lizenan1995/DNNOpAcc,True,o,t
FSE-2019-47,A comprehensive study on deep learning bug characteristics.,,,,
FSE-2019-48,Just fuzz it: solving floating-point constraints using coverage-guided fuzzing.,https://github.com/mc-imperial/jfs;https://github.com/mc-imperial/jfs-fse-2019-artifact,True,o,f
FSE-2019-49,Cerebro: context-aware adaptive fuzzing for effective vulnerability detection.,http://sites.google.com/site/cerebrofuzzer/,True,o,t
FSE-2019-50,iFixFlakies: a framework for automatically fixing order-dependent flaky tests.,https://sites.google.com/view/ifixflakies;;https://github.com/TestingResearchIllinois/iFixFlakies,True,o,r
FSE-2019-51,Binary reduction of dependency graphs.,https://doi.org/10.5281/zenodo.2574326,True,o,r
FSE-2019-52,AggrePlay: efficient record and replay of multi-threaded programs.,https://github.com/testrepo007/AggrePlay,True,o,f
FSE-2019-53,The review linkage graph for code review analytics: a recovery approach and empirical study.,https://github.com/software-rebels/ReviewLinkageGraph,True,i,f
FSE-2019-54,Mitigating power side channels during compilation.,,,,
FSE-2019-55,Maximal multi-layer specification synthesis.,,,,
FSE-2019-56,Phoenix: automated data-driven synthesis of repairs for static analysis violations.,https://figshare.com/s/8ba50b84deee6a826ced,True,i,t
FSE-2019-57,Black box fairness testing of machine learning models.,,,,
FSE-2019-58,Java reflection API: revealing the dark side of the mirror.,http://www.dsc.ufcg.edu.br/~spg/fse2019.html;https://github.com/non-conformances-research/fse2019,True,o,r
FSE-2019-59,A conceptual replication of continuous integration pain points in the context of Travis CI.,,,,
FSE-2019-60,Ethnographic research in software engineering: a critical review and checklist.,,,,
FSE-2019-61,Achilles' heel of plug-and-Play software architectures: a grounded theory based approach.,https://github.com/SoftwareDesignLab/AchillesHeel,True,i,t
FSE-2019-62,Latent error prediction and fault localization for microservice applications by learning from system trace logs.,https://fudanselab.github.io/Research-ESEC-FSE2019-AIOPS,True,i,r
FSE-2019-63,The importance of accounting for real-world labelling when predicting software vulnerabilities.,https://github.com/kabinja/fse2019,True,o,f
FSE-2019-64,Detecting concurrency memory corruption vulnerabilities.,https://github.com/mryancai/ConVul,True,i,t
FSE-2019-65,Locating vulnerabilities in binaries via memory layout recovering.,,,,
FSE-2019-66,Storm: program reduction for testing and debugging probabilistic programming systems.,,,,
FSE-2019-67,NullAway: practical type-based null safety for Java.,https://github.com/uber/NullAway,True,i,r
FSE-2019-68,Automatically detecting missing cleanup for ungraceful exits.,https://github.com/ZhouyangJia/SafeExit,True,o,f
FSE-2019-69,Finding and understanding bugs in software model checkers.,https://github.com/MCFuzzer/MCFuzz,True,i,r
FSE-2019-70,A segmented memory model for symbolic execution.,,,,
FSE-2019-71,Releasing fast and slow: an exploratory case study at ING.,https://figshare.com/s/4b99fd1b849e4728c6ef,True,i,f
FSE-2019-72,SAR: learning cross-language API mappings with little knowledge.,https://github.com/bdqnghi/SAR_API_mapping,True,o,f
FSE-2019-73,Robust log-based anomaly detection on unstable log data.,,,,
FSE-2019-74,Pinpointing performance inefficiencies in Java.,,,,
FSE-2019-75,Understanding flaky tests: the developer's perspective.,https://doi.org/10.5281/zenodo.3265830,False,a,t
FSE-2019-76,SEntiMoji: an emoji-powered learning approach for sentiment analysis in software engineering.,https://github.com/SEntiMoji/SEntiMoji,True,c,t
FSE-2020-113,FREPA: an automated and formal approach to requirement modeling and analysis in aircraft control domain.,https://github.com/fengjincao/AeroReqDemoForFSE,True,o,f
FSE-2020-114,Graph-based trace analysis for microservice architecture understanding and problem diagnosis.,,,,
FSE-2020-115,Harvey: a greybox fuzzer for smart contracts.,,,,
FSE-2020-116,How to mitigate the incident? an effective troubleshooting guide recommendation technique for online service systems.,,,,
FSE-2020-117,Improving cybersecurity hygiene through JIT patching.,,,,
FSE-2020-118,IntelliCode compose: code generation using transformer.,,,,
FSE-2020-119,Learning to extract transaction function from requirements: an industrial case on financial software.,,,,
FSE-2020-120,Online sports betting through the prism of software engineering.,,,,
FSE-2020-121,Reducing DNN labelling cost using surprise adequacy: an industrial case study for autonomous driving.,,,,
FSE-2020-122,Scaling static taint analysis to industrial SOA applications: a case study at Alibaba.,https://github.com/af-static-toolchains/aliflow-micro-benchmark,True,o,r
FSE-2020-123,Towards intelligent incident management: why we need it and how we make it.,,,,
FSE-2020-124,WebRR: self-replay enhanced robust record/replay for web application testing.,,,,
FSE-2021-102,Efficient module-level dynamic analysis for dynamic languages with module recontextualization.,https://github.com/andromeda/lya,True,i,t
FSE-2021-103,Mono2Micro: a practical and effective tool for decomposing monolithic Java applications to microservices.,,,,
FSE-2021-104,Data-driven test selection at scale.,,,,
FSE-2021-105,Effective low capacity status prediction for cloud systems.,,,,
FSE-2021-106,Automated code transformation for context propagation in Go.,https://github.com/uber-research/go-context-propagate,True,i,t
FSE-2021-107,Onion: identifying incident-indicating logs for cloud systems.,,,,
FSE-2021-108,Generating metamorphic relations for cyber-physical systems with genetic programming: an industrial case study.,,,,
FSE-2021-109,Domain adaptation for an automated classification of deontic modalities in software engineering contracts.,,,,
FSE-2021-110,How can manual testing processes be optimized? developer survey, optimization guidelines, and case studies.,https://github.com/manual-testing-study/manual-testing-esec-fse-21/,True,i,f
FSE-2020-0,A behavioral notion of robustness for software systems.,https://github.com/SteveZhangBit/LTSA-Robust,True,o,t
FSE-2020-1,ARDiff: scaling program equivalence checking via iterative abstraction and refinement of common code.,https://resess.github.io/PaperAppendices/ARDiff/;https://github.com/resess/ARDiff/tree/main,True,i,r
FSE-2020-2,C2S: translating natural language comments to formal program specifications.,https://c2s-fse.github.io/C2S/;https://github.com/C2S-FSE/C2S,True,o,r
FSE-2020-3,Detecting and understanding JavaScript global identifier conflicts on the web.,https://zenodo.org/record/3923232#.Yuv-53ZBxPZ,True,o,t
FSE-2020-4,Domain-independent interprocedural program analysis using block-abstraction memoization.,https://doi.org/10.5281/zenodo.4024268,True,c,r
FSE-2020-5,Flexeme: untangling commits using lexical flows.,https://pppi.github.io/Flexeme/,True,i,t
FSE-2020-6,HISyn: human learning-inspired natural language programming.,,,,
FSE-2020-7,Inductive program synthesis over noisy data.,,,,
FSE-2020-8,Inherent vacuity for GR(1) specifications.,http://smlab.cs.tau.ac.il/syntech/vacuity/,True,o,r
FSE-2020-9,Interval counterexamples for loop invariant learning.,https://doi.org/10.5281/zenodo.3898483;https://github.com/xurongchen/fse20/tree/Artifacts,True,o,f
FSE-2020-10,Java Ranger: statically summarizing regions for efficient symbolic execution of Java.,https://doi.org/10.5281/zenodo.3907232;https://github.com/vaibhavbsharma/java-ranger/tree/fse2020,True,o,r
FSE-2020-11,JShrink: in-depth investigation into debloating modern Java applications.,https://figshare.com/articles/software/JShrink_Artifact/12435542,True,i,t
FSE-2020-12,Making symbolic execution promising by learning aggressive state-pruning strategy.,https://github.com/kupl/HOMI_public,True,i,f
FSE-2020-13,Mining assumptions for software components using machine learning.,https://github.com/SNTSVV/EPIcuRus,True,o,r
FSE-2020-14,Mining input grammars from dynamic control flow.,https://github.com/vrthra/mimid,True,c,t
FSE-2020-15,Modular collaborative program analysis in OPAL.,https://github.com/stg-tud/opal,True,o,f
FSE-2020-16,Past-sensitive pointer analysis for symbolic execution.,https://srg.doc.ic.ac.uk/projects/pspa/,True,i,f
FSE-2020-17,TypeWriter: neural type prediction with search-based validation.,,,,
FSE-2020-18,UBITect: a precise and scalable method to detect use-before-initialization bugs in Linux kernel.,https://github.com/seclab-ucr/UBITect,True,o,r
FSE-2020-19,Exploring how deprecated Python library APIs are (not) handled.,https://github.com/dlocator-dev/dlocator,True,o,f
FSE-2020-20,Selecting third-party libraries: the practitioners' perspective.,https://doi.org/10.5281/zenodo.3979446,True,o,r
FSE-2020-21,A principled approach to GraphQL query cost analysis.,https://doi.org/10.5281/zenodo.4023299;https://github.com/Alan-Cha/graphql-complexity-paper-artifact/tree/v1.0.0,True,i,r
FSE-2020-22,Beware the evolving 'intelligent' web service! an integration architecture tactic to guard AI-first components.,http://bit.ly/2TIMmDh,True,o,f
FSE-2020-23,Block public access: trust safety verification of access control policies.,,,,
FSE-2020-24,Efficient incident identification from multi-dimensional issue reports via meta-heuristic search.,,,,
FSE-2020-25,Identifying linked incidents in large-scale online service systems.,,,,
FSE-2020-26,Real-time incident prediction for online service systems.,,,,
FSE-2020-27,Configuration smells in continuous delivery pipelines: a linter and a six-month study on GitLab.,https://doi.org/10.5281/zenodo.3861003,True,i,r
FSE-2020-28,Dimensions of software configuration: on the configuration context in modern software development.,https://github.com/AI-4-SE/Dimensions-of-Software-Configuration,True,o,f
FSE-2020-29,Global cost/quality management across multiple applications.,https://github.com/niuye8911/rapid_m,True,c,t
FSE-2020-30,Understanding and discovering software configuration dependencies in cloud and datacenter systems.,https://github.com/xlab-uiuc/cdep-fse,True,i,t
FSE-2020-31,Docable: evaluating the executability of software tutorials.,https://github.com/docable/docable,True,o,t
FSE-2020-32,RulePad: interactive authoring of checkable design rules.,https://github.com/devuxd/RulePad,True,o,f
FSE-2020-33,A first look at good first issues on GitHub.,https://github.com/SunflowerPKU/FSE20Dataset,True,c,t
FSE-2020-34,A randomized controlled trial on the effects of embedded computer language switching.,,,,
FSE-2020-35,A theory of the engagement in open source projects via summer of code programs.,https://figshare.com/s/f5a9f70a82d600b4c949,True,o,f
FSE-2020-36,An empirical analysis of the costs of clone- and platform-oriented software reuse.,https://doi.org/10.5281/zenodo.3993789,True,i,f
FSE-2020-37,An empirical study of bots in software development: characteristics and challenges from a practitioner's perspective.,,,,
FSE-2020-38,Biases and differences in code review using medical imaging and eye-tracking: genders, humans, and machines.,https://web.eecs.umich.edu/~weimerw/fmri.html,True,o,t
FSE-2020-39,Community expectations for research artifacts and evaluation processes.,https://doi.org/10.5281/zenodo.3951724;https://github.com/bhermann/artifact-survey/tree/v3,True,i,r
FSE-2020-40,Does stress impact technical interview performance?,,,,
FSE-2020-41,Exploring the evolution of software practices.,,,,
FSE-2020-42,Heard it through the Gitvine: an empirical study of tool diffusion across the npm ecosystem.,https://github.com/CMUSTRUDEL/badge_diffusion_supplementary,True,o,f
FSE-2020-43,Interactive, effort-aware library version harmonization.,https://libharmo.github.io;https://github.com/libharmo/libharmo.github.io,True,c,r
FSE-2020-44,On the naturalness of hardware descriptions.,https://github.com/EngineeringSoftware/hdlp,True,i,t
FSE-2020-45,On the relationship between design discussions and design quality: a case study of Apache projects.,https://fse2020.wixsite.com/designdiscussion,False,o,r
FSE-2020-46,On the relationship between refactoring actions and bugs: a differentiated replication.,https://doi.org/10.5281/zenodo.4018691,True,o,r
FSE-2020-47,Questions for data scientists in software engineering: a replication.,,,,
FSE-2020-48,Reducing implicit gender biases in software development: does intergroup contact theory work?,https://cutt.ly/pttgE1I,True,o,t
FSE-2020-49,Robotics software engineering: a perspective from the service robotics domain.,https://sites.google.com/view/empirical-study-robotics-se/home,True,i,r
FSE-2020-50,Thinking aloud about confusing code: a qualitative investigation of program comprehension and atoms of confusion.,https://atomsofconfusion.com/2020-think-aloud,True,i,t
FSE-2020-51,Understanding build issue resolution in practice: symptoms and fix patterns.,,,,
FSE-2020-52,Understanding type changes in Java.,,,,
FSE-2020-53,Do the machine learning models on a crowd sourced platform exhibit bias? an empirical study on model fairness.,,,,
FSE-2020-54,Fairway: a way to build fair ML software.,https://github.com/joymallyac/Fairway,True,i,f
FSE-2020-55,Towards automated verification of smart contract fairness.,https://doi.org/10.21979/N9/0BEVRT,True,i,t
FSE-2020-56,Boosting fuzzer efficiency: an information theoretic perspective.,https://doi.org/10.6084/m9.figshare.12415622.v2,True,i,t
FSE-2020-57,CrFuzz: fuzzing multi-purpose programs through input validation.,,,,
FSE-2020-58,Detecting critical bugs in SMT solvers using blackbox mutational fuzzing.,https://github.com/Practical-Formal-Methods/storm,True,i,f
FSE-2020-59,Fuzzing: on the exponential cost of vulnerability discovery.,,,,
FSE-2020-60,Intelligent REST API data fuzzing.,,,,
FSE-2020-61,MTFuzz: fuzzing with a multi-task neural network.,https://git.io/JUWkj;https://github.com/rahlk/MTFuzz;https://doi.org/10.5281/zenodo.3903818,True,i,t
FSE-2020-62,A comprehensive study on challenges in deploying deep learning based software.,,,,
FSE-2020-63,AMS: generating AutoML search spaces from weak specifications.,https://github.com/josepablocam/ams,True,i,f
FSE-2020-64,Correlations between deep neural network model coverage criteria and model quality.,https://github.com/RU-System-Software-andSecurity/CovTesting,True,o,r
FSE-2020-65,Deep learning library testing via effective model generation.,https://github.com/Jacob-yen/LEMON,True,o,r
FSE-2020-66,DeepSearch: a simple and effective blackbox attack for deep neural networks.,https://github.com/Practical-Formal-Methods/DeepSearch,True,o,f
FSE-2020-67,DENAS: automated rule generation by knowledge extraction from neural networks.,https://github.com/SeekingDream/denas_fse2020,True,i,r
FSE-2020-68,Detecting numerical bugs in neural network architectures.,https://doi.org/10.5281/zenodo.3843648,True,o,f
FSE-2020-69,Dynamic slicing for deep neural networks.,,,,
FSE-2020-70,Is neuron coverage a meaningful measure for testing deep neural networks?,https://doi.org/10.5281/zenodo.4021473,True,i,t
FSE-2020-71,Machine translation testing via pathological invariance.,,,,
FSE-2020-72,Model-based exploration of the frontier of behaviours for deep learning system testing.,https://github.com/testingautomated-usi/DeepJanus,True,o,r
FSE-2020-73,On decomposing a deep neural network into modules.,,,,
FSE-2020-74,Operational calibration: debugging confidence errors for DNNs in the field.,https://github.com/Lizn-zn/Op-QA,True,o,t
FSE-2020-75,All your app links are belong to us: understanding the threats of instant apps based attacks.,https://sites.google.com/view/instant-app-attacks,True,i,t
FSE-2020-76,Automated construction of energy test oracles for Android.,https://seal.ics.uci.edu/projects/aceton/index.html,True,i,r
FSE-2020-77,Borrowing your enemy's arrows: the case of code reuse in Android via direct inter-app code invocation.,https://github.com/gaojun0816/FSE-anonymousartefact,True,o,t
FSE-2020-78,Static asynchronous component misuse detection for Android applications.,https://github.com/pangeneral/AsyncChecker,True,i,t
FSE-2020-79,Automatically identifying performance issue reports with heuristic linguistic patterns.,,,,
FSE-2020-80,Calm energy accounting for multithreaded Java applications.,https://github.com/pl-chappie/chappie,True,i,t
FSE-2020-81,Dynamically reconfiguring software microbenchmarks: reducing execution time without sacrificing result quality.,https://github.com/sealuzh/jmh;https://doi.org/10.6084/m9.figshare.11944875,True,i,r
FSE-2020-82,Testing self-adaptive software with probabilistic guarantees on performance metrics.,https://github.com/ManCla/ESEC-FSE-2020,True,i,f
FSE-2020-83,API method recommendation via explicit matching of functionality verb phrases.,https://fudanselab.github.io/Research-FSE2020-FuncVerb/;https://github.com/FudanSELab/Research-FSE2020-FuncVerb,True,i,r
FSE-2020-84,Code recommendation for exception handling.,,,,
FSE-2020-85,eQual: informing early design decisions.,,,,
FSE-2020-86,Recommending stack overflow posts for fixing runtime exceptions using failure scenario matching.,https://doi.org/10.6084/m9.figshare.11948619,True,o,r
FSE-2020-87,Understanding the impact of GitHub suggested changes on recommendations between developers.,https://github.com/chbrown13/suggestions,True,o,f
FSE-2020-88,An evaluation of methods to port legacy code to SGX enclaves.,,,,
FSE-2020-89,Search-based adversarial testing and improvement of constrained credit scoring systems.,https://github.com/UL-SnT-Serval/coeva2/tree/fse,True,o,f
FSE-2020-90,SinkFinder: harvesting hundreds of unknown interesting function pairs with just one seed.,https://github.com/SinkFinder/data,True,i,f
FSE-2020-91,Baital: an adaptive weighted sampling approach for improved t-wise coverage.,https://github.com/meelgroup/baital,True,o,f
FSE-2020-92,Cost measures matter for mutation testing study validity.,https://doi.org/10.5522/04/11927208,True,o,f
FSE-2020-93,Detecting optimization bugs in database engines via non-optimizing reference engine construction.,https://github.com/sqlancer,True,i,t
FSE-2020-94,Efficient binary-level coverage analysis.,https://doi.org/10.5281/zenodo.3876047,True,i,t
FSE-2020-95,Efficiently finding higher-order mutants.,https://github.com/poosomooso/SSHOM-Search,True,o,t
FSE-2020-96,Evolutionary improvement of assertion oracles.,,,,
FSE-2020-97,FrUITeR: a framework for evaluating UI test reuse.,https://felicitia.github.io/FrUITeR/;https://github.com/felicitia/FrUITeR,True,i,r
FSE-2020-98,Object detection for graphical user interface: old fashioned or deep learning or a combination?,https://github.com/chenjshnn/Object-Detection-for-Graphical-User-Interface,True,,
FSE-2020-99,Understanding and automatically detecting conflicting interactions between smart home IoT applications.,http://plrg.ics.uci.edu/iotcheck/,True,i,t
FSE-2020-100,When does my program do this? learning circumstances of software behavior.,https://zenodo.org/record/3902142,True,c,t
FSE-2021-111,Turnover-induced knowledge loss in practice.,,,,
FSE-2021-112,One thousand and one stories: a large-scale survey of software refactoring.,https://zenodo.org/record/4923175,True,i,f
FSE-2021-113,A comprehensive study on learning-based PE malware family classification methods.,https://github.com/MHunt-er/Benchmarking-Malware-Family-Classification,True,i,t
FSE-2021-114,Infiltrating security into development: exploring the world's largest software security study.,,,,
FSE-2021-115,Data-driven extract method recommendations: a study at ING.,,,,
FSE-2021-116,Duplicated code pattern mining in visual programming languages.,,,,
FSE-2021-117,Making smart contract development more secure and easier.,https://github.com/FISCO-BCOS/SCStudio,True,i,f
FSE-2021-118,Quantifying no-fault-found test failures to prioritize inspection of flaky tests at Ericsson.,,,,
FSE-2021-119,When life gives you oranges: detecting and diagnosing intermittent job failures at Mozilla.,http://bit.ly/IntermittentJobs,True,i,t
FSE-2021-120,FuzzBench: an open fuzzer benchmarking platform and service.,https://security.googleblog.com/2020/03/fuzzbench-fuzzer-benchmarking-as-service.html,True,i,r
FSE-2021-121,An empirical investigation of practical log anomaly detection for online service systems.,,,,
FSE-2021-122,RAPID: checking API usage for the cloud in the cloud.,,,,
FSE-2021-123,An empirical study of GUI widget detection for industrial mobile games.,,,,
FSE-2021-124,Intelligent container reallocation at Microsoft 365.,https://github.com/mpls-fse/mpls,True,o,f
FSE-2021-125,Organizational implications of agile adoption: a case study from the public sector.,,,,
FSE-2022-104,Nalanda: a socio-technical graph platform for building software analytics tools at enterprise scale.,https://www.microsoft.com/en-us/research/publication/msr-tr-2021-28/,True,o,r
FSE-2022-105,Uncertainty-aware transfer learning to evolve digital twins for industrial elevators.,,,,
FSE-2022-106,All you need is logs: improving code completion by learning from anonymous IDE usage logs.,,,,
FSE-2022-107,Testing of machine learning models with limited samples: an industrial vacuum pumping application.,,,,
FSE-2022-108,Improving ML-based information retrieval software with user-driven functional testing and defect class analysis.,,,,
FSE-2022-109,What improves developer productivity at google? code quality.,,,,
FSE-2022-110,Understanding why we cannot model how long a code review will take: an industrial case study.,,,,
FSE-2022-111,Leveraging test plan quality to improve code review efficacy.,,,,
FSE-2022-112,Are elevator software robust against uncertainties? results and experiences from an industrial case study.,,,,
FSE-2021-6,Hazard analysis for human-on-the-loop interactions in sUAS systems.,,,,
FSE-2021-7,An exploratory study of autopilot software bugs in unmanned aerial vehicles.,https://zenodo.org/record/5090536#.YswJRuhBxPY,True,i,t
FSE-2021-8,Code integrity attestation for PLCs using black box neural network predictions.,https://github.com/sav-smu/plc-code-integrity,True,o,r
FSE-2021-9,PHYSFRAME: type checking physical frames of reference for robotic systems.,https://doi.org/10.5281/zenodo.4959920,True,o,t
FSE-2021-10,Automating serverless deployments for DevOps organizations.,https://doi.org/10.5281/zenodo.4873909,True,o,r
FSE-2021-11,Algebraic-datatype taint tracking, with applications to understanding Android identifier leaks.,https://github.com/sujon335/AlgebraicDatatypeTaintTracker,True,i,f
FSE-2021-12,Vet: identifying and avoiding UI exploration tarpits.,https://github.com/VET-UI-Testing/main,True,,
FSE-2021-13,Checking conformance of applications against GUI policies.,,,,
FSE-2021-14,Data-driven accessibility repair revisited: on the effectiveness of generating labels for icons in Android apps.,https://github.com/fmehralian/COALA,True,i,r
FSE-2021-15,Benchmarking automated GUI testing for Android against real-world bugs.,,,,
FSE-2021-16,Checking LTL[F, G, X] on compressed traces in polynomial time.,,,,
FSE-2021-17,Conditional interpolation: making concurrent program verification more effective.,,,,
FSE-2021-18,AlloyMax: bringing maximum satisfaction to relational specifications.,https://github.com/SteveZhangBit/alloy-maxsat-benchmark,True,o,f
FSE-2021-19,Timely and accurate detection of model deviation in self-adaptive software-intensive systems.,https://github.com/tongyanxiang/MoD2,True,o,f
FSE-2021-20,Lightweight and modular resource leak verification.,https://zenodo.org/record/5275304#.YswTpOhBxPY,True,o,t
FSE-2021-21,JSISOLATE: lightweight in-browser JavaScript isolation.,https://github.com/jeresig/dromaeo,True,o,f
FSE-2021-22,Cross-language code search using static and dynamic analyses.,https://github.com/DynamicCodeSearch/COSAL/tree/1.0,True,i,r
FSE-2021-23,Automating the removal of obsolete TODO comments.,https://github.com/beyondacm/TDClearner,True,i,r
FSE-2021-24,Estimating residual risk in greybox fuzzing.,https://www.kaggle.com/adaptivebias/empirical;https://www.kaggle.com/adaptivebias/simulation,True,i,t
FSE-2021-25,HeteroFuzz: fuzz testing to detect platform dependent divergence for heterogeneous applications.,,,,
FSE-2021-26,Sound and efficient concurrency bug prediction.,,,,
FSE-2021-27,Detecting Node.js prototype pollution vulnerabilities via object lookup analysis.,https://github.com/Song-Li/ObjLupAnsys.git,True,i,t
FSE-2021-28,Detecting concurrency vulnerabilities based on partial orders of memory and thread events.,,,,
FSE-2021-29,Vulnerability detection with fine-grained interpretations.,https://github.com/vulnerabilitydetection/VulnerabilityDetectionResearch,True,i,r
FSE-2021-30,Identifying casualty changes in software patches.,https://asejfia.github.io/cascade.github.io/,True,o,r
FSE-2021-31,ACHyb: a hybrid analysis approach to detect kernel access control vulnerabilities.,https://github.com/githubhuyang/achyb,True,i,t
FSE-2021-32,Context-aware and data-driven feedback generation for programming assignments.,https://github.com/kupl/LearnML,True,i,f
FSE-2021-33,A syntax-guided edit decoder for neural program repair.,https://github.com/pkuzqh/Recoder,True,o,f
FSE-2021-34,VarFix: balancing edit expressiveness and search effectiveness in automated program repair.,https://chupanw.github.io/varfix-supplement/,True,o,s
FSE-2021-35,Flaky test detection in Android via event order exploration.,https://github.com/AndroidFlakyTest/FlakeScanner,True,i,t
FSE-2021-36,SmartCommit: a graph-based interactive assistant for activity-oriented commits.,https://github.com/Symbolk/SmartCommitEvaluation-Viz,True,o,f
FSE-2021-37,A first look at developers' live chat on Gitter.,https://github.com/LiveChat2021/LiveChat#5-download,True,i,f
FSE-2021-38,Reel life vs. real life: how software developers share their daily life through vlogs.,,,,
FSE-2021-39,An empirical study on challenges of application development in serverless computing.,https://github.com/WenJinfeng/FSE21-Dataset_Script,True,i,f
FSE-2021-40,Bias in machine learning software: why? how? what to do?,https://github.com/joymallyac/Fair-SMOTE,True,i,f
FSE-2021-41,Understanding neural code intelligence through program simplification.,https://github.com/UH-SERG/SIVAND,True,o,t
FSE-2021-42,Multi-objectivizing software configuration tuning.,https://github.com/taochen/mmo-fse-2021,True,i,t
FSE-2021-43,Embedding app-library graph for neural third party library recommendation.,https://github.com/fio1982/GRec,True,i,f
FSE-2021-44,A large-scale empirical study on Java library migrations: prevalence, trends, and rationales.,https://doi.org/10.5281/zenodo.4816752;https://github.com/hehao98/LibraryMigration,True,a,t
FSE-2021-45,Learning-based extraction of first-order logic representations of API directives.,https://fudanselab.github.io/Research-ESEC-FSE2021-APIDirective/;https://github.com/FudanSELab/Research-ESEC-FSE2021-APIDirective,True,o,s
FSE-2021-46,DIFFBASE: a differential factbase for effective software evolution management.,https://github.com/d-fact/gumtree,True,i,t
FSE-2021-47,Would you like a quick peek? providing logging support to monitor data processing in big data applications.,https://github.com/SPEAR-SE/FSE2021_DPLOG,True,i,r
FSE-2021-48,Identifying bad software changes via multimodal anomaly detection for online service systems.,https://github.com/FSEwork/SCWarn,True,i,r
FSE-2021-49,An automatic refactoring framework for replacing test-production inheritance by mocking mechanism.,https://github.com/wx930910/JMocker,True,o,f
FSE-2021-50,ÐArcher: detecting on-chain-off-chain synchronization bugs in decentralized applications.,https://github.com/Troublor/darcher,True,i,f
FSE-2021-51,iBatch: saving Ethereum fees via secure and cost-effective batching of smart-contract invocations.,,,,
FSE-2021-52,Which abbreviations should be expanded?,https://github.com/jiangyanjie/smartExpander,True,o,r
FSE-2021-53,Validation on machine reading comprehension software without annotated labels: a property-based method.,https://github.com/imcsq/FSE21-MT4MRC,True,i,r
FSE-2021-54,FLEX: fixing flaky tests in machine learning projects by updating assertion bounds.,https://github.com/uiuc-arc/flex,True,i,t
FSE-2021-55,Parallel shadow execution to accelerate the debugging of numerical errors.,https://github.com/rutgers-apl/PFPSanitizer,True,i,r
FSE-2021-56,Exposing numerical bugs in deep learning via gradient back-propagation.,https://github.com/Jacob-yen/GRIST,True,i,t
FSE-2021-57,Metamorphic testing of Datalog engines.,https://github.com/Practical-Formal-Methods/queryFuzz,True,i,f
FSE-2021-58,Synthesis of web layouts from examples.,https://github.com/MangoTeam/mockdown;https://github.com/MangoTeam/replication-package,True,o,f
FSE-2021-59,Boosting coverage-based fault localization via graph-based representation learning.,https://github.com/yilinglou/Grace,True,i,r
FSE-2021-60,SynGuar: guaranteeing generalization in programming by example.,https://github.com/HALOCORE/SynGuar,True,i,f
FSE-2021-61,StateFormer: fine-grained type recovery from binaries using generative state modeling.,https://github.com/CUMLSec/stateformer,True,i,t
FSE-2021-62,Empirical study of transformers for source code.,https://github.com/bayesgroup/code_transformers,True,i,t
FSE-2021-63,Explaining mispredictions of machine learning models using rule induction.,https://github.com/facebookresearch/mmd,True,o,t
FSE-2021-64,Generalizable and interpretable learning for configuration extrapolation.,https://github.com/yding/gil;https://github.com/y-ding/gil,True,i,t
FSE-2021-65,Lightweight global and local contexts guided method name recommendation with prior knowledge.,https://github.com/ShangwenWang/Cognac,True,c,t
FSE-2021-66,To read or to rotate? comparing the effects of technical reading training and spatial skills training on novice programming ability.,https://github.com/CelloCorgi/FSE2021_To_Read_or_to_Rotate,True,o,f
FSE-2021-67,Connecting the dots: rethinking the relationship between code and prose writing with functional connectivity.,,,,
FSE-2021-68,LastPyMile: identifying the discrepancy between sources and packages.,https://doi.org/10.5281/zenodo.4899935,True,o,r
FSE-2021-69,A grounded theory of the role of coordination in software security patch management.,,,,
FSE-2021-70,TaintStream: fine-grained taint tracking for big data platforms through dynamic code translation.,https://github.com/PrivacyStreams/TaintStream,True,i,f
FSE-2021-71,Demystifying "bad" error messages in data science libraries.,https://doi.org/10.5281/zenodo.4889055,True,i,r
FSE-2021-72,NIL: large-scale detection of large-variance clones.,https://github.com/kusumotolab/NIL,True,i,t
FSE-2021-73,Understanding and detecting server-side request races in web applications.,,,,
FSE-2021-74,Detecting and localizing keyboard accessibility failures in web applications.,https://sites.google.com/usc.edu/kafe/home,True,o,r
FSE-2021-75,Swarmbug: debugging configuration bugs in swarm robotics.,https://github.com/swarmbug/src,True,i,t
FSE-2021-76,Probabilistic Delta debugging.,https://github.com/Amocy-Wang/ProbDD,True,c,t
FSE-2021-77,Finding broken Linux configuration specifications by statically analyzing the Kconfig language.,https://github.com/paulgazz/kmax,True,o,f
FSE-2021-78,Semantic bug seeding: a learning-based approach for creating realistic bugs.,https://github.com/sola-st/SemSeed/,True,i,t
FSE-2021-79,Characterizing search activities on stack overflow.,https://zenodo.org/record/4730525,True,o,f
FSE-2021-80,Authorship attribution of source code: a language-agnostic approach and applicability in software engineering.,https://github.com/JetBrains-Research/authorship-detection,True,i,r
FSE-2021-81,Probing model signal-awareness via prediction-preserving input minimization.,,,,
FSE-2021-82,Generating efficient solvers from constraint models.,https://github.com/fzlinshu/SoGen,True,i,t
FSE-2021-83,A comprehensive study of deep learning compiler bugs.,https://github.com/ShenQingchao/DLCstudy,True,o,f
FSE-2021-84,Fair preprocessing: towards understanding compositional fairness of data transformers in machine learning pipeline.,https://github.com/sumonbis/FairPreprocessing,True,i,f
FSE-2021-85,Fairea: a model behaviour mutation approach to benchmarking bias mitigation methods.,https://github.com/maxhort/Fairea/,True,i,r
FSE-2021-86,Feature trace recording.,https://github.com/pmbittner/FeatureTraceRecording/tree/esecfse21,True,o,f
FSE-2021-87,A longitudinal analysis of bloated Java dependencies.,https://github.com/castor-software/longitudinal-bloat,True,o,f
FSE-2021-88,XAI tools in the public sector: a case study on predicting combined sewer overflows.,,,,
FSE-2021-89,How disabled tests manifest in test maintainability challenges?,https://github.com/boyang9602/FSE_Ignore_Test,True,o,f
FSE-2021-90,Sustainability forecasting for Apache incubator projects.,https://doi.org/10.5281/zenodo.4564072,True,o,f
FSE-2021-91,Graph-based seed object synthesis for search-based unit testing.,https://sites.google.com/view/evoobj/home,True,i,r
FSE-2021-92,LS-sampling: an effective local search based sampling approach for achieving high t-wise coverage.,https://github.com/chuanluocs/LS-Sampling,True,o,f
FSE-2021-93,GLIB: towards automated test oracle for graphically-rich applications.,https://github.com/GLIB-game/GLIB,True,i,f
FSE-2021-94,Reassessing automatic evaluation metrics for code summarization tasks.,https://github.com/devjeetr/Re-assessing-automatic-evaluation-metrics-for-source-code-summarization-tasks,True,i,r
FSE-2021-95,Toward efficient interactions between Python and native libraries.,,,,
FSE-2021-96,Accelerating JavaScript static analysis via dynamic shortcuts.,https://github.com/kaist-plrg/safe-ds,True,o,f
FSE-2021-97,Skeletal approximation enumeration for SMT solver testing.,https://smtfuzz.github.io/,True,o,r
FSE-2021-98,Boosting static analysis accuracy with instrumented test executions.,,,,
FSE-2021-99,Symbolic parallel adaptive importance sampling for probabilistic program analysis.,https://github.com/ethanluoyc/sympais;https://doi.org/10.5281/zenodo.4902178,True,o,r
FSE-2021-100,IDE support for cloud-based static analyses.,,,,
FSE-2021-101,A bounded symbolic-size model for symbolic execution.,https://github.com/davidtr1037/klee-symsize;https://doi.org/10.6084/m9.figshare.14724453,True,o,f
FSE-2022-113,Achievement unlocked: a case study on gamifying DevOps practices in industry.,,,,
FSE-2022-114,Sometimes you have to treat the symptoms: tackling model drift in an industrial clone-and-own software product line.,https://forms.office.com/r/WRvUNQisuR,True,o,t
FSE-2022-115,Input splitting for cloud-based static application security testing platforms.,,,,
FSE-2022-116,Metadata-based retrieval for resolution recommendation in AIOps.,,,,
FSE-2022-117,Workgraph: personal focus vs. interruption for engineers at Meta.,,,,
FSE-2022-118,Understanding automated code review process and developer experience in industry.,,,,
FSE-2022-119,Unite: an adapter for transforming analysis tools to web services via OSLC.,https://pajda.fit.vutbr.cz/verifit/unite,True,i,r
FSE-2022-120,Discovering feature flag interdependencies in Microsoft office.,,,,
FSE-2022-121,What did you pack in my app? a systematic analysis of commercial Android packers.,https://github.com/PackDiff/PackDiff,True,i,r
FSE-2022-122,An empirical study of deep transfer learning-based program repair for Kotlin projects.,,,,
FSE-2022-123,An empirical investigation of missing data handling in cloud node failure prediction.,,,,
FSE-2022-124,An empirical study of log analysis at Microsoft.,,,,
FSE-2022-125,AutoTSG: learning and synthesis for incident troubleshooting.,,,,
FSE-2022-126,Demystifying "removed reviews" in iOS app store.,https://github.com/Luckyliue/removed_reviews,True,i,f
FSE-2022-127,Exploring and evaluating personalized models for code generation.,,,,
FSE-2022-128,FlakeRepro: automated and efficient reproduction of concurrency-related flaky tests.,,,,
FSE-2022-129,Group-based corpus scheduling for parallel fuzzing.,https://github.com/double-blind-paper-data/glibFuzzer,False,o,f
FSE-2022-130,Incorporating domain knowledge through task augmentation for front-end JavaScript code generation.,https://tianchi.aliyun.com/dataset/dataDetail?dataId=107819,True,i,f
FSE-2022-131,Industry experiences with large-scale refactoring.,https://github.com/ArchitecturePractices/lsr_survey_artifacts,True,o,t
FSE-2022-132,Industry practice of configuration auto-tuning for cloud applications and services.,,,,
FSE-2022-133,Investigating and improving log parsing in practice.,,,,
FSE-2022-134,Towards developer-centered automatic program repair: findings from Bloomberg.,,,,
FSE-2022-135,Trace analysis based microservice architecture measurement.,,,,
FSE-2022-139,Reflections on software failure analysis.,,,,
FSE-2022-5,Adaptive fairness improvement based on causality analysis.,,,,
FSE-2022-6,NatGen: generative pre-training by "naturalizing" source code.,https://github.com/saikat107/NatGen,True,o,t
FSE-2022-7,Testing of autonomous driving systems: where are we and where should we go?,,,,
FSE-2022-8,Fuzzing deep-learning libraries via automated relational API inference.,,,,
FSE-2022-9,SEDiff: scope-aware differential fuzzing to test internal function models in symbolic execution.,,,,
FSE-2022-10,Perfect is the enemy of test oracle.,https://github.com/Intelligent-CAT-Lab/SEER,True,i,r
FSE-2022-11,Scenario-based test reduction and prioritization for multi-module autonomous driving systems.,https://github.com/ITSEG-MQ/STRAP,True,i,f
FSE-2022-12,MOSAT: finding safety violations of autonomous driving systems using multi-objective genetic algorithm.,,,,
FSE-2022-13,Are we building on the rock? on the importance of data preprocessing for code summarization.,https://github.com/BuiltOntheRock/FSE22_BuiltOntheRock,True,i,r
FSE-2022-14,Correlates of programmer efficacy and their link to experience: a combined EEG and eye-tracking study.,https://github.com/brains-on-code/NoviceVsExpert,True,i,f
FSE-2022-15,What motivates software practitioners to contribute to inner source?,https://doi.org/10.5281/zenodo.6367434,True,i,f
FSE-2022-16,A retrospective study of one decade of artifact evaluations.,https://doi.org/10.5281/zenodo.7082407,True,o,r
FSE-2022-17,Quantifying community evolution in developer social networks.,,,,
FSE-2022-18,Understanding skills for OSS communities on GitHub.,https://doi.org/10.6084/m9.figshare.20929087,True,o,r
FSE-2022-19,Accurate method and variable tracking in commit history.,https://doi.org/10.5281/zenodo.7080276;https://github.com/jodavimehran/code-tracker,True,o,s
FSE-2022-20,Classifying edits to variability in source code.,https://github.com/VariantSync/DiffDetective/tree/esecfse22;https://doi.org/10.5281/zenodo.7110095,True,o,f
FSE-2022-21,The evolution of type annotations in python: an empirical study.,https://github.com/sola-st/PythonTypeAnnotationStudy,True,i,f
FSE-2022-22,UTANGO: untangling commits with context-aware, graph-based, code change clustering learning model.,https://github.com/Commit-Untangling/commit-untangling,True,i,r
FSE-2022-23,Static executes-before analysis for event driven programs.,https://doi.org/10.5281/zenodo.7088367,True,o,r
FSE-2022-24,Security code smells in apps: are we getting better?,https://github.com/Fraunhofer-SIT/FSE22-CodeSmells,True,i,f
FSE-2022-25,Large-scale analysis of non-termination bugs in real-world OSS projects.,https://sites.google.com/view/non-termbug/home,True,i,f
FSE-2022-26,On-the-fly syntax highlighting using neural networks.,https://doi.org/10.5281/zenodo.6958312;https://github.com/MEPalma/HLNN-ReplicationPackage/tree/v1.0.0,True,i,r
FSE-2022-27,Declarative smart contracts.,https://github.com/HaoxianChen/declarative-smart-contracts,True,i,r
FSE-2022-28,Asynchronous technical interviews: reducing the effect of supervised think-aloud on communication ability.,,,,
FSE-2022-29,How to formulate specific how-to questions in software development?,,,,
FSE-2022-30,Pair programming conversations with agents vs. developers: challenges and opportunities for SE community.,,,,
FSE-2022-31,Psychologically-inspired, unsupervised inference of perceptual groups of GUI widgets from GUI images.,https://github.com/MulongXie/GUI-Perceptual-Grouping,True,i,f
FSE-2022-32,Toward interactive bug reporting for (android app) end-users.,https://doi.org/10.5281/zenodo.6977413;https://github.com/sea-lab-wm/burt/tree/v1.1.0,True,o,r
FSE-2022-33,Understanding performance problems in deep learning systems.,https://doi.org/10.5281/zenodo.7060209,True,o,r
FSE-2022-34,API recommendation for machine learning libraries: how far are we?,https://doi.org/10.5281/zenodo.6360250,True,i,f
FSE-2022-35,No more fine-tuning? an experimental evaluation of prompt tuning in code intelligence.,https://github.com/adf1178/PT4Code,True,o,f
FSE-2022-36,Cross-device record and replay for Android apps.,https://sites.google.com/view/rx-framework/home,True,i,t
FSE-2022-37,Online testing of RESTful APIs: promises and challenges.,https://doi.org/10.5281/zenodo.6941292,True,o,s
FSE-2022-38,Avgust: automating usage-based test generation from videos of app executions.,https://doi.org/10.5281/zenodo.7036218;https://github.com/SageSELab/Avgust/tree/v1.1,True,i,r
FSE-2022-39,Detecting non-crashing functional bugs in Android apps via deep-state differential analysis.,https://automatedoracleforandroid.github.io/Odin/;https://zenodo.org/record/6973860#.Y-4fbXZBxPZ,True,i,f
FSE-2022-40,RoboFuzz: fuzzing robotic systems over robot operating system (ROS) for finding correctness bugs.,https://github.com/sslab-gatech/robofuzz,True,i,t
FSE-2022-41,AgileCtrl: a self-adaptive framework for configuration tuning.,,,,
FSE-2022-42,Using nudges to accelerate code reviews at scale.,,,,
FSE-2022-43,First come first served: the impact of file position on code review.,https://zenodo.org/record/6901285;https://doi.org/10.5281/zenodo.6901285,False,o,r
FSE-2022-44,Code, quality, and process metrics in graduated and retired ASFI projects.,https://zenodo.org/record/6374071,True,i,f
FSE-2022-45,CommentFinder: a simpler, faster, more accurate code review comments recommendation.,https://github.com/awsm-research/CommentFinder,True,i,t
FSE-2022-46,AutoPruner: transformer-based call graph pruning.,,,,
FSE-2022-47,Lighting up supervised learning in user review-based code localization: dataset and benchmark.,https://github.com/lcynju/review2code,True,i,f
FSE-2022-48,CORMS: a GitHub and Gerrit based hybrid code reviewer recommendation approach for modern code review.,https://doi.org/10.6084/m9.figshare.20493042.v4,True,o,f
FSE-2022-49,Hierarchical Bayesian multi-kernel learning for integrated classification and summarization of app reviews.,https://tinyurl.com/qup3h4l,True,o,f
FSE-2022-50,Semi-supervised pre-processing for learning-based traceability framework on real-world software projects.,https://doi.org/10.5281/zenodo.7111136,True,o,r
FSE-2022-51,Input invariants.,https://doi.org/10.1145/3554336;https://github.com/rindPHI/isla;https://github.com/rindPHI/islearn,True,o,s
FSE-2022-52,Modus: a Datalog dialect for building container images.,https://zenodo.org/record/7088613,True,i,t
FSE-2022-53,Multi-phase invariant synthesis.,https://doi.org/10.5281/zenodo.7047061,True,c,r
FSE-2022-54,Parasol: efficient parallel synthesis of large model spaces.,https://sites.google.com/view/parallelexploration/home.,True,o,f
FSE-2022-55,Neural termination analysis.,https://doi.org/10.1145/3554332,True,o,r
FSE-2022-56,PaReco: patched clones and missed patches among the divergent variants of a software family.,https://github.com/KadjelRamkisoen/PaReco,True,i,r
FSE-2022-57,Fault localization to detect co-change fixing locations.,https://github.com/fixlocatorresearch/fixlocatorresearch,True,i,r
FSE-2022-58,The best of both worlds: integrating semantic features with expert features for defect prediction and localization.,https://github.com/jacknichao/JIT-Fine,True,i,f
FSE-2022-59,An exploratory study on the predominant programming paradigms in Python code.,https://doi.org/10.5281/zenodo.6975558,True,o,r
FSE-2022-60,Making Python code idiomatic by automatic refactoring non-idiomatic Python code with pythonic idioms.,https://github.com/idiomaticrefactoring/pythonidiomsrefactor,True,o,f
FSE-2022-61,An empirical study of blockchain system vulnerabilities: modules, types, and patterns.,https://github.com/VPRLab/BlkVulnDataset,True,a,t
FSE-2022-62,How to better utilize code graphs in semantic code search?,https://github.com/G2SMM/G2SC,True,i,f
FSE-2022-63,23 shades of self-admitted technical debt: an empirical study on machine learning software.,https://github.com/DavidMOBrien/23Shades,True,i,f
FSE-2022-64,NeuDep: neural binary memory dependence analysis.,,,,
FSE-2022-65,DynaPyt: a dynamic analysis framework for Python.,https://github.com/sola-st/DynaPyt,True,c,t
FSE-2022-66,Cross-language Android permission specification.,https://natidroid.github.io/,True,i,f
FSE-2022-67,Peahen: fast and precise static deadlock detection via context reduction.,,,,
FSE-2022-68,A case study of implicit mentoring, its prevalence, and impact in Apache.,https://doi.org/10.5281/zenodo.6367126,True,o,r
FSE-2022-69,Software security during modern code review: the developer's perspective.,https://doi.org/10.5281/zenodo.6969369,True,a,t
FSE-2022-70,Program merge conflict resolution via neural transformers.,https://doi.org/10.5281/zenodo.6366908,True,i,r
FSE-2022-71,Automated unearthing of dangerous issue reports.,https://github.com/panshengyi/MemVul,True,i,r
FSE-2022-72,On the vulnerability proneness of multilingual code.,https://figshare.com/s/f56fd5f5319bbfa5250a,True,i,r
FSE-2022-73,Tracking patches for open source software vulnerabilities.,https://patch-tracer.github.io,True,c,t
FSE-2022-74,DeJITLeak: eliminating JIT-induced timing side-channel leaks.,https://doi.org/10.5281/zenodo.7080369;https://github.com/LeoQ7/DeJITLeak/,True,o,s
FSE-2022-75,Quantitative relational modelling with QAlloy.,https://github.com/tjark/Par,True,c,f
FSE-2022-76,Demystifying the underground ecosystem of account registration bots.,https://mobile-app-research.tech,True,i,t
FSE-2022-77,Using graph neural networks for program termination.,https://doi.org/10.5281/zenodo.7083445;https://github.com/yoavalon/GNNProgramTermination/tree/v1.0,True,o,s
FSE-2022-78,PyTER: effective program repair for Python type errors.,https://github.com/kupl/PyTER,True,i,f
FSE-2022-79,VulRepair: a T5-based automated software vulnerability repair.,https://github.com/awsm-research/VulRepair;https://doi.org/10.5281/zenodo.7080271,True,o,s
FSE-2022-80,DeepDev-PERF: a deep learning-based approach for improving software performance.,https://github.com/glGarg/DeepDev-PERF,True,o,f
FSE-2022-81,Less training, more repairing please: revisiting automated program repair via zero-shot learning.,https://zenodo.org/record/6819444,True,o,r
FSE-2022-82,NL2Viz: natural language to visualization via constrained syntax-guided synthesis.,,,,
FSE-2022-83,AccessiText: automated detection of text accessibility issues in Android apps.,https://sites.google.com/view/accessitext/home,True,c,r
FSE-2022-84,Actionable and interpretable fault localization for recurring failures in online service systems.,,,,
FSE-2022-85,AUGER: automatically generating review comments with pre-training models.,https://gitlab.com/ai-for-se-public-data/auger-fse-2022,True,i,f
FSE-2022-86,Automatically deriving JavaScript static analyzers from specifications using Meta-level static analysis.,https://doi.org/10.5281/zenodo.6906415;https://github.com/kaist-plrg/jsaver,True,o,f
FSE-2022-87,Automating code review activities by large-scale pre-training.,https://github.com/microsoft/CodeBERT/tree/master/CodeReviewer,True,i,f
FSE-2022-88,Corporate dominance in open source ecosystems: a case study of OpenStack.,https://doi.org/10.6084/m9.figshare.20939383,True,i,r
FSE-2022-89,Detecting Simulink compiler bugs via controllable zombie blocks mutation.,https://github.com/EDA-Testing/COMBAT,False,i,r
FSE-2022-90,Diet code is healthy: simplifying programs for pre-trained models of code.,https://github.com/zhangzwwww/DietCode,True,c,t
FSE-2022-91,Do bugs lead to unnaturalness of source code?,https://github.com/jiangyanjie/RevisitingNaturalness,True,i,r
FSE-2022-92,Generating realistic vulnerabilities via neural code editing: an empirical study.,https://doi.org/10.5281/zenodo.7048525,True,o,s
FSE-2022-93,Generic sensitivity: customizing context-sensitive pointer analysis for generics.,https://doi.org/10.6084/m9.figshare.20486556.v1,True,o,s
FSE-2022-94,MAAT: a novel ensemble approach to addressing fairness and performance bugs for machine learning software.,https://github.com/chenzhenpeng18/FSE22-MAAT,True,i,r
FSE-2022-95,Minerva: browser API fuzzing with dynamic mod-ref analysis.,https://github.com/ChijinZ/Minerva,True,i,t
FSE-2022-96,NMTSloth: understanding and testing efficiency degradation of neural machine translation systems.,https://github.com/SeekingDream/NMTSloth,True,o,f
FSE-2022-97,Putting them under microscope: a fine-grained approach for detecting redundant test cases in natural language.,https://github.com/czycurefun/testcase_detection,True,i,f
FSE-2022-98,RULER: discriminative and iterative adversarial training for deep neural network fairness.,https://github.com/wssun/RULER,True,i,r
FSE-2022-99,SamplingCA: effective and efficient sampling-based pairwise testing for highly configurable software systems.,https://github.com/chuanluocs/SamplingCA,True,o,f
FSE-2022-100,SPINE: a scalable log parser with feedback guidance.,,,,
FSE-2022-101,SymMC: approximate model enumeration and counting using symmetry information for Alloy specifications.,https://github.com/wenxiwang/SymMC-Tool,True,i,t
FSE-2022-102,TraceCRL: contrastive representation learning for microservice trace analysis.,https://fudanselab.github.io/TraceCRL/,True,o,r
FSE-2022-103,You see what I want you to see: poisoning vulnerabilities in neural code search.,https://github.com/CGCL-codes/naturalcc,True,c,t
FSE-2022-140,Language-agnostic dynamic analysis of multilingual code: promises, pitfalls, and prospects.,https://figshare.com/s/a91abcaebd07464f4ea3,True,i,h
ICSE-2017-13,From diversity by numbers to diversity as process: supporting inclusiveness in software development teams with brainstorming.,,,,
ICSE-2018-14,Roles and impacts of hands-on software architects in five industrial case studies.,,,,
ICSE-2018-146,Statistical errors in software engineering experiments: a preliminary literature review.,https://goo.gl/8zb9LU,True,o,t
ICSE-2018-147,Synthesizing qualitative research in software engineering: a critical review.,,,,
ICSE-2018-149,Search-based test data generation for SQL queries.,https://zenodo.org/records/1166023,True,i,r
ICSE-2018-150,Multi-objective integer programming approaches for solving optimal feature selection problem: a new perspective on multi-objective optimization problems in SBSE.,https://sites.google.com/view/ip-method-repsol,True,i,r
ICSE-2018-152,Automatically generating search heuristics for concolic testing.,https://github.com/kupl/ParaDySE,True,i,f
ICSE-2020-108,Collaborative bug finding for Android apps.,https://bugine.github.io/,True,i,t
ICSE-2020-109,POSIT: simultaneously tagging natural and programming languages.,https://github.com/PPPI/POSIT,True,i,t
ICSE-2020-110,CPC: automatically classifying and propagating natural language comments via program analysis.,,,,
ICSE-2020-111,Suggesting natural method names to check name consistencies.,https://doubledoubleblind.github.io/mnire.,True,i,r
ICSE-2020-112,Retrieval-based neural source code summarization.,https://github.com/zhangj111/rencos,True,c,t
ICSE-2020-113,On learning meaningful assert statements for unit test cases.,https://sites.google.com/view/atlas-nmt/home,True,i,r
ICSE-2020-114,Quickly generating diverse valid test inputs with reinforcement learning.,https://github.com/sameerreddy13/rlcheck,True,i,t
ICSE-2020-115,An evidence-based inquiry into the use of grey literature in software engineering.,http://softeng.nju.edu.cn/tech_reports/TR-19-005-GreyLiterature-EN.pdf,False,o,f
ICSE-2020-116,Towards the use of the readily available tests from the release pipeline as performance tests: are we there yet?,https://github.com/senseuwaterloo/ICSE2020-Performance,True,i,f
ICSE-2020-117,Verifying object construction.,https://github.com/kelloggm/object-construction-checker;https://zenodo.org/records/3634993,True,o,t
ICSE-2020-118,Automatically testing string solvers.,,,,
ICSE-2020-119,A study on the lifecycle of flaky tests.,https://github.com/winglam/flaky-test-lifecycle-data,True,i,r
ICSE-2020-12,Schrödinger's security: opening the box on app developers' security rationale.,http://hdl.handle.net/1983/f43803de-4ade-488f-be1a-a2e8ba30c201,True,o,r
ICSE-2020-120,Testing file system implementations on layered models.,https://midwinter1993.github.io/dogfood/,True,o,f
ICSE-2020-121,Co-evolving code with evolving metamodels.,,,,
ICSE-2020-122,Lazy product discovery in huge configuration spaces.,https://github.com/gzoumix/pdepa;archive.softwareheritage.org/browse/origin/https://github.com/gzoumix/pdepa.git;https://doi.org/10.6084/m9.figshare.11728914.v4;https://doi.org/10.5281/zenodo.3633643,True,i,f
ICSE-2020-123,Reducing run-time adaptation space via analysis of possible utility bounds.,https://sites.google.com/view/thallium/,True,i,r
ICSE-2020-124,Context-aware in-process crowdworker recommendation.,https://github.com/wangjunjieISCAS/InProcessRecommendation,True,i,f
ICSE-2020-125,A large-scale empirical study on vulnerability distribution within projects and the lessons learned.,https://github.com/twelveand0/CarrotsBlender,True,i,f
ICSE-2020-126,Unsuccessful story about few shot malware family classification and siamese network to the rescue.,https://github.com/qWe1aSd/malPre,True,o,t
ICSE-2020-127,How does misconfiguration of analytic services compromise mobile privacy?,https://sites.google.com/site/trackersec2019/,False,o,f
ICSE-2020-128,Interpreting cloud computer vision pain-points: a mining study of stack overflow.,http://bit.ly/2Z8zOKW,True,i,r
ICSE-2020-36,How has forking changed in the last 20 years?: a study of hard forks on GitHub.,https://github.com/shuiblue/ICSE20-hardfork-appendix,True,o,r
ICSE-2021-56,Input Algebras.,,,,
ICSE-2022-2,Diversity-Driven Automated Formal Verification.,https://github.com/LASER-UMASS/Diva/,True,i,t
ICSE-2022-3,$\mu AFL$: Non-intrusive Feedback-driven Fuzzing for Microcontroller Firmware.,https://github.com/MCUSec/microAFL,True,i,t
ASE-2022-0,A Comprehensive Evaluation of Android ICC Resolution Techniques.,,,,
ASE-2022-1,A Hybrid Approach for Inference between Behavioral Exception API Documentation and Implementations, and Its Applications.,https://nguyenhoan.github.io/statgen/,True,i,r
ASE-2022-2,A Light Bug Triage Framework for Applying Large Pre-trained Language Model.,,,,
ASE-2022-3,A Transferable Time Series Forecasting Service Using Deep Transformer Model for Online Systems.,,,,
ASE-2022-4,Accelerating Build Dependency Error Detection via Virtual Build.,,,,
ASE-2022-5,Accelerating OCR-Based Widget Localization for Test Automation of GUI Applications.,,,,
ASE-2022-6,An Empirical Study of Automation in Software Security Patch Management.,,,,
ASE-2022-7,Answer Summarization for Technical Queries: Benchmark and New Approach.,https://github.com/TechSumBot/TechSumBot,True,a,t
ASE-2022-8,Are Neural Bug Detectors Comparable to Software Developers on Variable Misuse Bugs?,https://doi.org/10.5281/zenodo.6504032,True,i,r
ASE-2022-9,Are they Toeing the Line? Diagnosing Privacy Compliance Violations among Browser Extensions.,https://github.com/ExtPPCompliance/PPCompliance,True,i,r
ASE-2022-10,AST-Probe: Recovering abstract syntax trees from hidden representations of pre-trained language models.,https://doi.org/10.5281/zenodo.7032076,True,o,t
ASE-2022-11,Auto Off-Target: Enabling Thorough and Scalable Testing for Complex Software Systems.,,,,
ASE-2022-12,Automated Feedback Generation for Competition-Level Code.,,,,
ASE-2022-13,Automatic Comment Generation via Multi-Pass Deliberation.,https://github.com/ase-decom/ASE22_DECOM,True,i,r
ASE-2022-14,Automatically Detecting Visual Bugs in HTML5 Canvas Games.,https://github.com/asgaardlab/canvas-visual-bugs-testbed;https://asgaardlab.github.io/canvas-visualbugs-testbed/game,True,i,t
ASE-2022-15,B-AIS: An Automated Process for Black-box Evaluation of Visual Perception in AI-enabled Software against Domain Semantics.,https://github.com/AI-EnabledSoftwareEngineering-AISE/B-AIS,True,o,f
ASE-2022-16,Boosting the Revealing of Detected Violations in Deep Learning Testing: A Diversity-Guided Method.,https://github.com/imcsq/ASE22-MPPrioritize,True,i,r
ASE-2022-17,BuildSonic: Detecting and Repairing Performance-Related Configuration Smells for Continuous Integration Builds.,https://buildsonic.github.io,True,o,t
ASE-2022-18,Call Me Maybe: Using NLP to Automatically Generate Unit Test Cases Respecting Temporal Constraints.,https://github.com/ariannab/callmemaybe,True,o,t
ASE-2022-19,CARGO: AI-Guided Dependency Analysis for Migrating Monolithic Applications to Microservices Architecture.,,,,
ASE-2022-20,Checking LTL Satisfiability via End-to-end Learning.,https://github.com/chenpolong/TLNet,True,i,t
ASE-2022-21,CoditT5: Pretraining for Source Code and Natural Language Editing.,https://github.com/EngineeringSoftware/CoditT5,True,i,t
ASE-2022-22,Compiler Testing using Template Java Programs.,https://github.com/EngineeringSoftware/jattack,True,i,t
ASE-2022-23,Compressing Pre-trained Models of Code into 3 MB.,https://github.com/soarsmu/Compressor.git,True,i,f
ASE-2022-24,Consistent Scene Graph Generation by Constraint Optimization.,https://github.com/20001LastOrder/ClevrRelational,False,c,r
ASE-2022-25,Constructing a System Knowledge Graph of User Tasks and Failures from Bug Reports to Support Soap Opera Testing.,https://github.com/SuYanqi/SYS-KG,True,i,f
ASE-2022-26,Cornucopia : A Framework for Feedback Guided Generation of Binaries.,https://doi.org/10.5281/zenodo.7039858;https://binarygeneration.github.io/,True,i,t
ASE-2022-27,CrystalBLEU: Precisely and Efficiently Measuring the Similarity of Code.,https://github.com/sola-st/crystalbleu,True,o,s
ASE-2022-28,Data Augmentation for Improving Emotion Recognition in Software Engineering Communication.,https://anonymous.4open.science/r/SE-Emotion-Study-0141/,True,i,t
ASE-2022-29,Data Leakage in Notebooks: Static Detection and Better Processes.,https://github.com/malusamayo/leakage-analysis,True,i,f
ASE-2022-30,DeepPerform: An Efficient Approach for Performance Testing of Resource-Constrained Neural Networks.,https://github.com/SeekingDream/DeepPerform,True,i,f
ASE-2022-31,Detecting Blocking Errors in Go Programs using Localized Abstract Interpretation.,https://brics.dk/goat/;https://github.com/cs-au-dk/goat,True,o,t
ASE-2022-32,Detecting Build Conflicts in Software Merge for Java Programs via Static Analysis.,https://figshare.com/s/459145063f38bdb244b9,True,i,t
ASE-2022-33,Detecting Semantic Code Clones by Building AST-based Markov Chains Model.,https://github.com/CGCL-codes/Amain,True,i,f
ASE-2022-34,Differentially Testing Database Transactions for Fun and Profit.,https://github.com/tcse-iscas/DT2,True,i,t
ASE-2022-35,Effectively Generating Vulnerable Transaction Sequences in Smart Contracts with Reinforcement Learning-guided Fuzzing.,,,,
ASE-2022-36,Efficient Greybox Fuzzing to Detect Memory Errors.,https://github.com/bajinsheng/ReZZan,True,i,t
ASE-2022-37,Efficient Synthesis of Method Call Sequences for Test Generation and Bounded Verification.,,,,
ASE-2022-38,Empirical Study of System Resources Abused by IoT Attackers.,https://github.com/HoneyAsclepius/HoneyAsclepius.git,True,i,f
ASE-2022-39,Enriching Compiler Testing with Real Program from Bug Report.,,,,
ASE-2022-40,Evolving Ranking-Based Failure Proximities for Better Clustering in Fault Isolation.,https://github.com/rishabh-ranjan/simian,True,i,f
ASE-2022-41,Exploiting Epochs and Symmetries in Analysing MPI Programs.,https://github.com/testsmt/janus,True,i,f
ASE-2022-42,Finding and Understanding Incompleteness Bugs in SMT Solvers.,,,,
ASE-2022-43,FuzzerAid: Grouping Fuzzed Crashes Based On Fault Signatures.,,,,
ASE-2022-44,Fuzzle: Making a Puzzle for Fuzzers.,,,,
ASE-2022-45,Generating Critical Test Scenarios for Autonomous Driving Systems via Influential Behavior Patterns.,,,,
ASE-2022-46,GLITCH: Automated Polyglot Security Smell Detection in Infrastructure as Code.,https://github.com/IntelligentDDS/GIED,True,i,t
ASE-2022-47,Graph based Incident Extraction and Diagnosis in Large-Scale Online Systems.,,,,
ASE-2022-48,Griffin : Grammar-Free DBMS Fuzzing.,,,,
ASE-2022-49,Groundhog: An Automated Accessibility Crawler for Mobile Apps.,https://sites.google.com/view/ase22semverdetection/homepage,True,i,r
ASE-2022-50,Has My Release Disobeyed Semantic Versioning? Static Detection Based on Semantic Differencing.,,,,
ASE-2022-51,How Useful is Code Change Information for Fault Localization in Continuous Integration?,https://github.com/anonymized-datascientist/Leveraging-Change-Information,True,i,r
ASE-2022-52,HTFuzz: Heap Operation Sequence Sensitive Fuzzing.,https://github.com/sharedata21/HTFuzz,True,i,f
ASE-2022-53,HyperAST: Enabling Efficient Analysis of Software Histories at Scale.,https://github.com/quentinLeDilavrec/HyperAST,True,i,f
ASE-2022-54,ICEBAR: Feedback-Driven Iterative Repair of Alloy Specifications.,https://sites.google.com/view/icebarevaluation;https://github.com/saiema/ICEBAR,True,i,r
ASE-2022-55,Identifying Solidity Smart Contract API Documentation Errors.,https://sites.google.com/view/doccon-tool;https://github.com/Chenguang-Zhu/DocCon,True,i,t
ASE-2022-56,Inline Tests.,https://github.com/EngineeringSoftware/inlinetest,True,i,t
ASE-2022-57,Insight: Exploring Cross-Ecosystem Vulnerability Impacts.,http://insight-clv-detection.com/,True,i,t
ASE-2022-58,Is this Change the Answer to that Problem?: Correlating Descriptions of Bug and Code Changes for Evaluating Patch Correctness.,https://github.com/Trustworthy-Software/Quatrain,True,i,t
ASE-2022-59,Jasmine: A Static Analysis Framework for Spring Core Technologies.,https://github.com/SpringJasmine/Jasmine,True,o,f
ASE-2022-60,Keeping Secrets: Multi-objective Genetic Improvement for Detecting and Reducing Information Leakage.,https://github.com/LavaOps/LeakReducer/,True,o,r
ASE-2022-61,LawBreaker: An Approach for Specifying Traffic Laws and Fuzzing Autonomous Vehicles.,https://lawbreaker2022.github.io/,True,i,r
ASE-2022-62,Learning Contract Invariants Using Reinforcement Learning.,,,,
ASE-2022-63,Learning to Construct Better Mutation Faults.,https://github.com/tianzhaotju/LEAM,True,i,t
ASE-2022-64,Learning to Synthesize Relational Invariants.,,,,
ASE-2022-65,Leveraging Practitioners' Feedback to Improve a Security Linter.,https://figshare.com/s/6b6a769b1393eae0774c,True,i,t
ASE-2022-66,LISSA: Lazy Initialization with Specialized Solver Aid.,,,,
ASE-2022-67,Low-Resources Project-Specific Code Summarization.,https://github.com/pkuserc/MPCos_ASE2022,True,c,f
ASE-2022-68,MalWhiteout: Reducing Label Errors in Android Malware Detection.,https://github.com/MalTools/MalWhiteout,True,i,t
ASE-2022-69,Mining Android API Usage to Generate Unit Test Cases for Pinpointing Compatibility Issues.,https://github.com/SMAT-Lab/JUnitTestGen;https://doi.org/10.5281/zenodo.6507579,True,i,f
ASE-2022-70,Natural Test Generation for Precise Testing of Question Answering Software.,https://github.com/ShenQingchao/QAQA,True,i,f
ASE-2022-71,Neuroevolution-Based Generation of Tests and Oracles for Games.,https://github.com/se2p/whisker,True,o,f
ASE-2022-72,Not All Dependencies are Equal: An Empirical Study on Production Dependencies in NPM.,https://zenodo.org/record/6518765,True,i,f
ASE-2022-73,Patching Weak Convolutional Neural Network Models through Modularization and Composition.,https://github.com/qibinhang/CNNSplitter,True,c,t
ASE-2022-74,PRCBERT: Prompt Learning for Requirement Classification using BERT-based Pretrained Language Models.,,,,
ASE-2022-75,Precise (Un)Affected Version Analysis for Web Vulnerabilities.,https://github.com/seclab-fudan/AFV,True,c,r
ASE-2022-76,PredART: Towards Automatic Oracle Prediction of Object Placements in Augmented Reality Testing.,https://sites.google.com/view/predart2022,True,i,f
ASE-2022-77,Prioritized Constraint-Aided Dynamic Partial-Order Reduction.,,,,
ASE-2022-78,Prompt-tuned Code Language Model as a Neural Knowledge Base for Type Inference in Statically-Typed Partial Code.,https://anonymous.4open.science/r/Experiment-Datas-93AE/README.md,False,i,f
ASE-2022-79,Provably Tightest Linear Approximation for Robustness Verification of Sigmoid-like Neural Networks.,https://github.com/FormalAIze/NeWise.git,True,i,f
ASE-2022-80,QATest: A Uniform Fuzzing Framework for Question Answering Systems.,https://github.com/SATE-Lab/QATest,False,i,f
ASE-2022-81,QVIP: An ILP-based Formal Verification Approach for Quantized Neural Networks.,https://github.com/QVIP22/Data,True,i,r
ASE-2022-82,Reentrancy Vulnerability Detection and Localization: A Deep Learning Based Two-phase Approach.,https://github.com/toolstemp/IAcontract,True,i,f
ASE-2022-83,reformulator: Automated Refactoring of the N+1 Problem in Database-Backed Applications.,https://doi.org/10.5281/zenodo.6959485,True,i,r
ASE-2022-84,Repairing Failure-inducing Inputs with Input Reflection.,https://github.com/yanxiao6/InputReflector,True,i,f
ASE-2022-85,Robust Learning of Deep Predictive Models from Noisy and Imbalanced Software Engineering Datasets.,https://github.com/RobustTrainer/RobustTrainer,True,i,t
ASE-2022-86,SA4U: Practical Static Analysis for Unit Type Error Detection.,https://github.com/obicons/sa4u,True,o,t
ASE-2022-87,Safety and Performance, Why not Both? Bi-Objective Optimized Model Compression toward AI Software Deployment.,https://github.com/JiePKU/MIA-SafeCompress,True,i,t
ASE-2022-88,Scalable Sampling of Highly-Configurable Systems: Generating Random Instances of the Linux Kernel.,https://github.com/davidfa71/Sampling-the-Linux-kernel,True,o,t
ASE-2022-89,Scrutinizing Privacy Policy Compliance of Virtual Personal Assistant Apps.,https://github.com/UQ-Trust-Lab/SKIPPER;https://doi.org/10.5281/zenodo.7045277,True,c,r
ASE-2022-90,Selectively Combining Multiple Coverage Goals in Search-Based Unit Test Generation.,https://doi.org/10.5281/zenodo.6467640,True,i,t
ASE-2022-91,SelfAPR: Self-supervised Program Repair with Test Execution Diagnostics.,https://github.com/SophieHYe/SelfAPR,True,i,t
ASE-2022-92,smartPip: A Smart Approach to Resolving Python Dependency Conflict Issues.,https://github.com/smartpip/smartpip,True,c,t
ASE-2022-93,SmOOD: Smoothness-based Out-of-Distribution Detection Approach for Surrogate Neural Networks in Aircraft Design.,,,,
ASE-2022-94,So Many Fuzzers, So Little Time*: Experience from Evaluating Fuzzers on the Contiki-NG Network (Hay)Stack.,,,,
ASE-2022-95,Sorry, I don't Understand: Improving Voice User Interface Testing.,,,,
ASE-2022-96,StandUp4NPR: Standardizing SetUp for Empirically Comparing Neural Program Repair Systems.,https://github.com/kwz219/NPR4J,True,i,f
ASE-2022-97,Static Type Recommendation for Python.,https://github.com/ksun212/Stray,True,i,t
ASE-2022-98,Studying and Understanding the Tradeoffs Between Generality and Reduction in Software Debloating.,https://github.com/qixin5/debloating_study,True,i,t
ASE-2022-99,SymFusion: Hybrid Instrumentation for Concolic Execution.,https://season-lab.github.io/SymFusion/,True,i,t
ASE-2022-100,The Metamorphosis: Automatic Detection of Scaling Issues for Mobile Apps.,https://github.com/dVermin/dVermin;https://github.com/dVermin/dVermin-Python,True,i,f
ASE-2022-101,ThirdEye: Attention Maps for Safe Autonomous Driving Systems.,https://github.com/tsigalko18/ase22,True,i,r
ASE-2022-102,Too Much Accessibility is Harmful! Automated Detection and Analysis of Overly Accessible Elements in Mobile Apps.,https://github.com/seal-hub/Oversight,True,i,r
ASE-2022-103,Toward Improving the Robustness of Deep Learning Models via Model Transformation.,https://doi.org/10.5281/zenodo.7018397,True,o,t
ASE-2022-104,Towards Understanding the Faults of JavaScript-Based Deep Learning Systems.,https://sites.google.com/view/dl-fault-study4js,True,i,r
ASE-2022-105,Towards Understanding Third-party Library Dependency in C/C++ Ecosystem.,https://github.com/lkpsg/ccscanner,True,i,f
ASE-2022-106,TransplantFix: Graph Differencing-based Code Transplantation for Automated Program Repair.,https://github.com/DehengYang/TransplantFix,True,i,t
ASE-2022-107,TransRepair: Context-aware Program Repair for Compilation Errors.,https://sites.google.com/view/transrepair/,True,i,r
ASE-2022-108,TreeCen: Building Tree Graph for Scalable Semantic Code Clone Detection.,https://github.com/CGCL-codes/TreeCen,True,i,f
ASE-2022-109,Tseitin or not Tseitin? The Impact of CNF Transformations on Feature-Model Analyses.,,,,
ASE-2022-110,Understanding and Predicting Docker Build Duration: An Empirical Study of Containerized Workflow of OSS Projects.,https://github.com/yangzhangs/ase2022-UPDBD,True,i,r
ASE-2022-111,Unsupervised Summarization of Privacy Concerns in Mobile Application Reviews.,https://seel.cse.lsu.edu/data/ase22.zip,True,c,f
ASE-2022-112,Unveiling Hidden DNN Defects with Decision-Based Metamorphic Testing.,https://github.com/Yuanyuan-Yuan/Decision-Oracle,True,i,r
ASE-2022-113,Using Consensual Biterms from Text Structures of Requirements and Code to Improve IR-Based Traceability Recovery.,https://github.com/huiAlex/TAROT,True,o,t
ASE-2022-114,VITAS : Guided Model-based VUI Testing of VPA Apps.,https://vitas000.github.io/tool/,True,o,r
ASE-2022-115,Which Exception Shall We Throw?,https://github.com/drhaozhong/thex,True,o,t
